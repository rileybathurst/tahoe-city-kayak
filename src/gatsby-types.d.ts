/* eslint-disable */

/* prettier-ignore */

/* THIS FILE IS AUTOGENERATED. CHANGES WILL BE LOST ON SUBSEQUENT RUNS. */

declare namespace Queries {

type Maybe<T> = T | null;
type InputMaybe<T> = T | null;
type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
type Scalars = {
  /** The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID. */
  ID: string;
  /** The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text. */
  String: string;
  /** The `Boolean` scalar type represents `true` or `false`. */
  Boolean: boolean;
  /** The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. */
  Int: number;
  /** The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). */
  Float: number;
  /** A date string, such as 2007-12-03, compliant with the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */
  Date: string;
  GatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData;
  /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  JSON: Record<string, unknown>;
};

type AVIFOptions = {
  readonly lossless: InputMaybe<Scalars['Boolean']>;
  readonly quality: InputMaybe<Scalars['Int']>;
  readonly speed: InputMaybe<Scalars['Int']>;
};

type BlurredOptions = {
  /** Force the output format for the low-res preview. Default is to use the same format as the input. You should rarely need to change this */
  readonly toFormat: InputMaybe<ImageFormat>;
  /** Width of the generated low-res preview. Default is 20px */
  readonly width: InputMaybe<Scalars['Int']>;
};

type BooleanQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Boolean']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
  readonly ne: InputMaybe<Scalars['Boolean']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
};

type DateQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Date']>;
  readonly gt: InputMaybe<Scalars['Date']>;
  readonly gte: InputMaybe<Scalars['Date']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Date']>>>;
  readonly lt: InputMaybe<Scalars['Date']>;
  readonly lte: InputMaybe<Scalars['Date']>;
  readonly ne: InputMaybe<Scalars['Date']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Date']>>>;
};

type Directory = Node & {
  readonly absolutePath: Scalars['String'];
  readonly accessTime: Scalars['Date'];
  readonly atime: Scalars['Date'];
  readonly atimeMs: Scalars['Float'];
  readonly base: Scalars['String'];
  readonly birthTime: Scalars['Date'];
  /** @deprecated Use `birthTime` instead */
  readonly birthtime: Maybe<Scalars['Date']>;
  /** @deprecated Use `birthTime` instead */
  readonly birthtimeMs: Maybe<Scalars['Float']>;
  readonly changeTime: Scalars['Date'];
  readonly children: ReadonlyArray<Node>;
  readonly ctime: Scalars['Date'];
  readonly ctimeMs: Scalars['Float'];
  readonly dev: Scalars['Int'];
  readonly dir: Scalars['String'];
  readonly ext: Scalars['String'];
  readonly extension: Scalars['String'];
  readonly gid: Scalars['Int'];
  readonly id: Scalars['ID'];
  readonly ino: Scalars['Float'];
  readonly internal: Internal;
  readonly mode: Scalars['Int'];
  readonly modifiedTime: Scalars['Date'];
  readonly mtime: Scalars['Date'];
  readonly mtimeMs: Scalars['Float'];
  readonly name: Scalars['String'];
  readonly nlink: Scalars['Int'];
  readonly parent: Maybe<Node>;
  readonly prettySize: Scalars['String'];
  readonly rdev: Scalars['Int'];
  readonly relativeDirectory: Scalars['String'];
  readonly relativePath: Scalars['String'];
  readonly root: Scalars['String'];
  readonly size: Scalars['Int'];
  readonly sourceInstanceName: Scalars['String'];
  readonly uid: Scalars['Int'];
};


type Directory_accessTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_atimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_birthTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_changeTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_ctimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_modifiedTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_mtimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type DirectoryConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<DirectoryEdge>;
  readonly group: ReadonlyArray<DirectoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Directory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type DirectoryConnection_distinctArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryConnection_groupArgs = {
  field: DirectoryFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type DirectoryConnection_maxArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryConnection_minArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryConnection_sumArgs = {
  field: DirectoryFieldSelector;
};

type DirectoryEdge = {
  readonly next: Maybe<Directory>;
  readonly node: Directory;
  readonly previous: Maybe<Directory>;
};

type DirectoryFieldSelector = {
  readonly absolutePath: InputMaybe<FieldSelectorEnum>;
  readonly accessTime: InputMaybe<FieldSelectorEnum>;
  readonly atime: InputMaybe<FieldSelectorEnum>;
  readonly atimeMs: InputMaybe<FieldSelectorEnum>;
  readonly base: InputMaybe<FieldSelectorEnum>;
  readonly birthTime: InputMaybe<FieldSelectorEnum>;
  readonly birthtime: InputMaybe<FieldSelectorEnum>;
  readonly birthtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly changeTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly ctime: InputMaybe<FieldSelectorEnum>;
  readonly ctimeMs: InputMaybe<FieldSelectorEnum>;
  readonly dev: InputMaybe<FieldSelectorEnum>;
  readonly dir: InputMaybe<FieldSelectorEnum>;
  readonly ext: InputMaybe<FieldSelectorEnum>;
  readonly extension: InputMaybe<FieldSelectorEnum>;
  readonly gid: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly ino: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly mode: InputMaybe<FieldSelectorEnum>;
  readonly modifiedTime: InputMaybe<FieldSelectorEnum>;
  readonly mtime: InputMaybe<FieldSelectorEnum>;
  readonly mtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly nlink: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly prettySize: InputMaybe<FieldSelectorEnum>;
  readonly rdev: InputMaybe<FieldSelectorEnum>;
  readonly relativeDirectory: InputMaybe<FieldSelectorEnum>;
  readonly relativePath: InputMaybe<FieldSelectorEnum>;
  readonly root: InputMaybe<FieldSelectorEnum>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly sourceInstanceName: InputMaybe<FieldSelectorEnum>;
  readonly uid: InputMaybe<FieldSelectorEnum>;
};

type DirectoryFilterInput = {
  readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly accessTime: InputMaybe<DateQueryOperatorInput>;
  readonly atime: InputMaybe<DateQueryOperatorInput>;
  readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly base: InputMaybe<StringQueryOperatorInput>;
  readonly birthTime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly changeTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly ctime: InputMaybe<DateQueryOperatorInput>;
  readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly dev: InputMaybe<IntQueryOperatorInput>;
  readonly dir: InputMaybe<StringQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly extension: InputMaybe<StringQueryOperatorInput>;
  readonly gid: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ino: InputMaybe<FloatQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mode: InputMaybe<IntQueryOperatorInput>;
  readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
  readonly mtime: InputMaybe<DateQueryOperatorInput>;
  readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nlink: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prettySize: InputMaybe<StringQueryOperatorInput>;
  readonly rdev: InputMaybe<IntQueryOperatorInput>;
  readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  readonly relativePath: InputMaybe<StringQueryOperatorInput>;
  readonly root: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<IntQueryOperatorInput>;
};

type DirectoryGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<DirectoryEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<DirectoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Directory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type DirectoryGroupConnection_distinctArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryGroupConnection_groupArgs = {
  field: DirectoryFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type DirectoryGroupConnection_maxArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryGroupConnection_minArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryGroupConnection_sumArgs = {
  field: DirectoryFieldSelector;
};

type DirectorySortInput = {
  readonly absolutePath: InputMaybe<SortOrderEnum>;
  readonly accessTime: InputMaybe<SortOrderEnum>;
  readonly atime: InputMaybe<SortOrderEnum>;
  readonly atimeMs: InputMaybe<SortOrderEnum>;
  readonly base: InputMaybe<SortOrderEnum>;
  readonly birthTime: InputMaybe<SortOrderEnum>;
  readonly birthtime: InputMaybe<SortOrderEnum>;
  readonly birthtimeMs: InputMaybe<SortOrderEnum>;
  readonly changeTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly ctime: InputMaybe<SortOrderEnum>;
  readonly ctimeMs: InputMaybe<SortOrderEnum>;
  readonly dev: InputMaybe<SortOrderEnum>;
  readonly dir: InputMaybe<SortOrderEnum>;
  readonly ext: InputMaybe<SortOrderEnum>;
  readonly extension: InputMaybe<SortOrderEnum>;
  readonly gid: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly ino: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly mode: InputMaybe<SortOrderEnum>;
  readonly modifiedTime: InputMaybe<SortOrderEnum>;
  readonly mtime: InputMaybe<SortOrderEnum>;
  readonly mtimeMs: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly nlink: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly prettySize: InputMaybe<SortOrderEnum>;
  readonly rdev: InputMaybe<SortOrderEnum>;
  readonly relativeDirectory: InputMaybe<SortOrderEnum>;
  readonly relativePath: InputMaybe<SortOrderEnum>;
  readonly root: InputMaybe<SortOrderEnum>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly sourceInstanceName: InputMaybe<SortOrderEnum>;
  readonly uid: InputMaybe<SortOrderEnum>;
};

type DuotoneGradient = {
  readonly highlight: Scalars['String'];
  readonly opacity: InputMaybe<Scalars['Int']>;
  readonly shadow: Scalars['String'];
};

type FieldSelectorEnum =
  | 'SELECT';

type File = Node & {
  readonly absolutePath: Scalars['String'];
  readonly accessTime: Scalars['Date'];
  readonly atime: Scalars['Date'];
  readonly atimeMs: Scalars['Float'];
  readonly base: Scalars['String'];
  readonly birthTime: Scalars['Date'];
  /** @deprecated Use `birthTime` instead */
  readonly birthtime: Maybe<Scalars['Date']>;
  /** @deprecated Use `birthTime` instead */
  readonly birthtimeMs: Maybe<Scalars['Float']>;
  readonly blksize: Maybe<Scalars['Int']>;
  readonly blocks: Maybe<Scalars['Int']>;
  readonly changeTime: Scalars['Date'];
  /** Returns the first child node of type ImageSharp or null if there are no children of given type on this node */
  readonly childImageSharp: Maybe<ImageSharp>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type ImageSharp */
  readonly childrenImageSharp: Maybe<ReadonlyArray<Maybe<ImageSharp>>>;
  readonly ctime: Scalars['Date'];
  readonly ctimeMs: Scalars['Float'];
  readonly dev: Scalars['Int'];
  readonly dir: Scalars['String'];
  readonly ext: Scalars['String'];
  readonly extension: Scalars['String'];
  readonly gid: Scalars['Int'];
  readonly id: Scalars['ID'];
  readonly ino: Scalars['Float'];
  readonly internal: Internal;
  readonly mode: Scalars['Int'];
  readonly modifiedTime: Scalars['Date'];
  readonly mtime: Scalars['Date'];
  readonly mtimeMs: Scalars['Float'];
  readonly name: Scalars['String'];
  readonly nlink: Scalars['Int'];
  readonly parent: Maybe<Node>;
  readonly prettySize: Scalars['String'];
  /** Copy file to static directory and return public url to it */
  readonly publicURL: Maybe<Scalars['String']>;
  readonly rdev: Scalars['Int'];
  readonly relativeDirectory: Scalars['String'];
  readonly relativePath: Scalars['String'];
  readonly root: Scalars['String'];
  readonly size: Scalars['Int'];
  readonly sourceInstanceName: Scalars['String'];
  readonly uid: Scalars['Int'];
  readonly url: Maybe<Scalars['String']>;
};


type File_accessTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_atimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_birthTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_changeTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_ctimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_modifiedTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_mtimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type FileConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<FileEdge>;
  readonly group: ReadonlyArray<FileGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<File>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type FileConnection_distinctArgs = {
  field: FileFieldSelector;
};


type FileConnection_groupArgs = {
  field: FileFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type FileConnection_maxArgs = {
  field: FileFieldSelector;
};


type FileConnection_minArgs = {
  field: FileFieldSelector;
};


type FileConnection_sumArgs = {
  field: FileFieldSelector;
};

type FileEdge = {
  readonly next: Maybe<File>;
  readonly node: File;
  readonly previous: Maybe<File>;
};

type FileFieldSelector = {
  readonly absolutePath: InputMaybe<FieldSelectorEnum>;
  readonly accessTime: InputMaybe<FieldSelectorEnum>;
  readonly atime: InputMaybe<FieldSelectorEnum>;
  readonly atimeMs: InputMaybe<FieldSelectorEnum>;
  readonly base: InputMaybe<FieldSelectorEnum>;
  readonly birthTime: InputMaybe<FieldSelectorEnum>;
  readonly birthtime: InputMaybe<FieldSelectorEnum>;
  readonly birthtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly blksize: InputMaybe<FieldSelectorEnum>;
  readonly blocks: InputMaybe<FieldSelectorEnum>;
  readonly changeTime: InputMaybe<FieldSelectorEnum>;
  readonly childImageSharp: InputMaybe<ImageSharpFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenImageSharp: InputMaybe<ImageSharpFieldSelector>;
  readonly ctime: InputMaybe<FieldSelectorEnum>;
  readonly ctimeMs: InputMaybe<FieldSelectorEnum>;
  readonly dev: InputMaybe<FieldSelectorEnum>;
  readonly dir: InputMaybe<FieldSelectorEnum>;
  readonly ext: InputMaybe<FieldSelectorEnum>;
  readonly extension: InputMaybe<FieldSelectorEnum>;
  readonly gid: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly ino: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly mode: InputMaybe<FieldSelectorEnum>;
  readonly modifiedTime: InputMaybe<FieldSelectorEnum>;
  readonly mtime: InputMaybe<FieldSelectorEnum>;
  readonly mtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly nlink: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly prettySize: InputMaybe<FieldSelectorEnum>;
  readonly publicURL: InputMaybe<FieldSelectorEnum>;
  readonly rdev: InputMaybe<FieldSelectorEnum>;
  readonly relativeDirectory: InputMaybe<FieldSelectorEnum>;
  readonly relativePath: InputMaybe<FieldSelectorEnum>;
  readonly root: InputMaybe<FieldSelectorEnum>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly sourceInstanceName: InputMaybe<FieldSelectorEnum>;
  readonly uid: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
};

type FileFilterInput = {
  readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly accessTime: InputMaybe<DateQueryOperatorInput>;
  readonly atime: InputMaybe<DateQueryOperatorInput>;
  readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly base: InputMaybe<StringQueryOperatorInput>;
  readonly birthTime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly blksize: InputMaybe<IntQueryOperatorInput>;
  readonly blocks: InputMaybe<IntQueryOperatorInput>;
  readonly changeTime: InputMaybe<DateQueryOperatorInput>;
  readonly childImageSharp: InputMaybe<ImageSharpFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenImageSharp: InputMaybe<ImageSharpFilterListInput>;
  readonly ctime: InputMaybe<DateQueryOperatorInput>;
  readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly dev: InputMaybe<IntQueryOperatorInput>;
  readonly dir: InputMaybe<StringQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly extension: InputMaybe<StringQueryOperatorInput>;
  readonly gid: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ino: InputMaybe<FloatQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mode: InputMaybe<IntQueryOperatorInput>;
  readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
  readonly mtime: InputMaybe<DateQueryOperatorInput>;
  readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nlink: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prettySize: InputMaybe<StringQueryOperatorInput>;
  readonly publicURL: InputMaybe<StringQueryOperatorInput>;
  readonly rdev: InputMaybe<IntQueryOperatorInput>;
  readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  readonly relativePath: InputMaybe<StringQueryOperatorInput>;
  readonly root: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<IntQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type FileGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<FileEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<FileGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<File>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type FileGroupConnection_distinctArgs = {
  field: FileFieldSelector;
};


type FileGroupConnection_groupArgs = {
  field: FileFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type FileGroupConnection_maxArgs = {
  field: FileFieldSelector;
};


type FileGroupConnection_minArgs = {
  field: FileFieldSelector;
};


type FileGroupConnection_sumArgs = {
  field: FileFieldSelector;
};

type FileSortInput = {
  readonly absolutePath: InputMaybe<SortOrderEnum>;
  readonly accessTime: InputMaybe<SortOrderEnum>;
  readonly atime: InputMaybe<SortOrderEnum>;
  readonly atimeMs: InputMaybe<SortOrderEnum>;
  readonly base: InputMaybe<SortOrderEnum>;
  readonly birthTime: InputMaybe<SortOrderEnum>;
  readonly birthtime: InputMaybe<SortOrderEnum>;
  readonly birthtimeMs: InputMaybe<SortOrderEnum>;
  readonly blksize: InputMaybe<SortOrderEnum>;
  readonly blocks: InputMaybe<SortOrderEnum>;
  readonly changeTime: InputMaybe<SortOrderEnum>;
  readonly childImageSharp: InputMaybe<ImageSharpSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenImageSharp: InputMaybe<ImageSharpSortInput>;
  readonly ctime: InputMaybe<SortOrderEnum>;
  readonly ctimeMs: InputMaybe<SortOrderEnum>;
  readonly dev: InputMaybe<SortOrderEnum>;
  readonly dir: InputMaybe<SortOrderEnum>;
  readonly ext: InputMaybe<SortOrderEnum>;
  readonly extension: InputMaybe<SortOrderEnum>;
  readonly gid: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly ino: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly mode: InputMaybe<SortOrderEnum>;
  readonly modifiedTime: InputMaybe<SortOrderEnum>;
  readonly mtime: InputMaybe<SortOrderEnum>;
  readonly mtimeMs: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly nlink: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly prettySize: InputMaybe<SortOrderEnum>;
  readonly publicURL: InputMaybe<SortOrderEnum>;
  readonly rdev: InputMaybe<SortOrderEnum>;
  readonly relativeDirectory: InputMaybe<SortOrderEnum>;
  readonly relativePath: InputMaybe<SortOrderEnum>;
  readonly root: InputMaybe<SortOrderEnum>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly sourceInstanceName: InputMaybe<SortOrderEnum>;
  readonly uid: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
};

type FloatQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Float']>;
  readonly gt: InputMaybe<Scalars['Float']>;
  readonly gte: InputMaybe<Scalars['Float']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  readonly lt: InputMaybe<Scalars['Float']>;
  readonly lte: InputMaybe<Scalars['Float']>;
  readonly ne: InputMaybe<Scalars['Float']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
};

type GatsbyImageDataQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['GatsbyImageData']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['GatsbyImageData']>>>;
  readonly ne: InputMaybe<Scalars['GatsbyImageData']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['GatsbyImageData']>>>;
};

type GatsbyImageFormat =
  | 'auto'
  | 'avif'
  | 'jpg'
  | ''
  | 'png'
  | 'webp';

type GatsbyImageLayout =
  | 'constrained'
  | 'fixed'
  | 'fullWidth';

type GatsbyImagePlaceholder =
  | 'blurred'
  | 'dominantColor'
  | 'none'
  | 'tracedSVG';

type ImageCropFocus =
  | 17
  | 0
  | 2
  | 16
  | 1
  | 5
  | 8
  | 3
  | 6
  | 7
  | 4;

type ImageFit =
  | 'contain'
  | 'cover'
  | 'fill'
  | 'inside'
  | 'outside';

type ImageFormat =
  | ''
  | 'avif'
  | 'jpg'
  | ''
  | 'png'
  | 'webp';

type ImageLayout =
  | 'constrained'
  | 'fixed'
  | 'fullWidth';

type ImagePlaceholder =
  | 'blurred'
  | 'dominantColor'
  | 'none'
  | 'tracedSVG';

type ImageSharp = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly fixed: Maybe<ImageSharpFixed>;
  readonly fluid: Maybe<ImageSharpFluid>;
  readonly gatsbyImageData: Scalars['GatsbyImageData'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly original: Maybe<ImageSharpOriginal>;
  readonly parent: Maybe<Node>;
  readonly resize: Maybe<ImageSharpResize>;
};


type ImageSharp_fixedArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64Width: InputMaybe<Scalars['Int']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  height: InputMaybe<Scalars['Int']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  toFormat?: InputMaybe<ImageFormat>;
  toFormatBase64?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
  width: InputMaybe<Scalars['Int']>;
};


type ImageSharp_fluidArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64Width: InputMaybe<Scalars['Int']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  maxHeight: InputMaybe<Scalars['Int']>;
  maxWidth: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  sizes?: InputMaybe<Scalars['String']>;
  srcSetBreakpoints?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  toFormat?: InputMaybe<ImageFormat>;
  toFormatBase64?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
};


type ImageSharp_gatsbyImageDataArgs = {
  aspectRatio: InputMaybe<Scalars['Float']>;
  avifOptions: InputMaybe<AVIFOptions>;
  backgroundColor: InputMaybe<Scalars['String']>;
  blurredOptions: InputMaybe<BlurredOptions>;
  breakpoints: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  formats: InputMaybe<ReadonlyArray<InputMaybe<ImageFormat>>>;
  height: InputMaybe<Scalars['Int']>;
  jpgOptions: InputMaybe<JPGOptions>;
  layout?: InputMaybe<ImageLayout>;
  outputPixelDensities: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  placeholder: InputMaybe<ImagePlaceholder>;
  pngOptions: InputMaybe<PNGOptions>;
  quality: InputMaybe<Scalars['Int']>;
  sizes: InputMaybe<Scalars['String']>;
  tracedSVGOptions: InputMaybe<Potrace>;
  transformOptions: InputMaybe<TransformOptions>;
  webpOptions: InputMaybe<WebPOptions>;
  width: InputMaybe<Scalars['Int']>;
};


type ImageSharp_resizeArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64?: InputMaybe<Scalars['Boolean']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  height: InputMaybe<Scalars['Int']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  pngCompressionLevel?: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  toFormat?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
  width: InputMaybe<Scalars['Int']>;
};

type ImageSharpConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ImageSharpEdge>;
  readonly group: ReadonlyArray<ImageSharpGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ImageSharp>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ImageSharpConnection_distinctArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpConnection_groupArgs = {
  field: ImageSharpFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ImageSharpConnection_maxArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpConnection_minArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpConnection_sumArgs = {
  field: ImageSharpFieldSelector;
};

type ImageSharpEdge = {
  readonly next: Maybe<ImageSharp>;
  readonly node: ImageSharp;
  readonly previous: Maybe<ImageSharp>;
};

type ImageSharpFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly fixed: InputMaybe<ImageSharpFixedFieldSelector>;
  readonly fluid: InputMaybe<ImageSharpFluidFieldSelector>;
  readonly gatsbyImageData: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly original: InputMaybe<ImageSharpOriginalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly resize: InputMaybe<ImageSharpResizeFieldSelector>;
};

type ImageSharpFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly fixed: InputMaybe<ImageSharpFixedFilterInput>;
  readonly fluid: InputMaybe<ImageSharpFluidFilterInput>;
  readonly gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly original: InputMaybe<ImageSharpOriginalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly resize: InputMaybe<ImageSharpResizeFilterInput>;
};

type ImageSharpFilterListInput = {
  readonly elemMatch: InputMaybe<ImageSharpFilterInput>;
};

type ImageSharpFixed = {
  readonly aspectRatio: Maybe<Scalars['Float']>;
  readonly base64: Maybe<Scalars['String']>;
  readonly height: Scalars['Float'];
  readonly originalName: Maybe<Scalars['String']>;
  readonly src: Scalars['String'];
  readonly srcSet: Scalars['String'];
  readonly srcSetWebp: Maybe<Scalars['String']>;
  readonly srcWebp: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
  readonly width: Scalars['Float'];
};

type ImageSharpFixedFieldSelector = {
  readonly aspectRatio: InputMaybe<FieldSelectorEnum>;
  readonly base64: InputMaybe<FieldSelectorEnum>;
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly originalName: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly srcSet: InputMaybe<FieldSelectorEnum>;
  readonly srcSetWebp: InputMaybe<FieldSelectorEnum>;
  readonly srcWebp: InputMaybe<FieldSelectorEnum>;
  readonly tracedSVG: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpFixedFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly base64: InputMaybe<StringQueryOperatorInput>;
  readonly height: InputMaybe<FloatQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly srcSet: InputMaybe<StringQueryOperatorInput>;
  readonly srcSetWebp: InputMaybe<StringQueryOperatorInput>;
  readonly srcWebp: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<FloatQueryOperatorInput>;
};

type ImageSharpFixedSortInput = {
  readonly aspectRatio: InputMaybe<SortOrderEnum>;
  readonly base64: InputMaybe<SortOrderEnum>;
  readonly height: InputMaybe<SortOrderEnum>;
  readonly originalName: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly srcSet: InputMaybe<SortOrderEnum>;
  readonly srcSetWebp: InputMaybe<SortOrderEnum>;
  readonly srcWebp: InputMaybe<SortOrderEnum>;
  readonly tracedSVG: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type ImageSharpFluid = {
  readonly aspectRatio: Scalars['Float'];
  readonly base64: Maybe<Scalars['String']>;
  readonly originalImg: Maybe<Scalars['String']>;
  readonly originalName: Maybe<Scalars['String']>;
  readonly presentationHeight: Scalars['Int'];
  readonly presentationWidth: Scalars['Int'];
  readonly sizes: Scalars['String'];
  readonly src: Scalars['String'];
  readonly srcSet: Scalars['String'];
  readonly srcSetWebp: Maybe<Scalars['String']>;
  readonly srcWebp: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
};

type ImageSharpFluidFieldSelector = {
  readonly aspectRatio: InputMaybe<FieldSelectorEnum>;
  readonly base64: InputMaybe<FieldSelectorEnum>;
  readonly originalImg: InputMaybe<FieldSelectorEnum>;
  readonly originalName: InputMaybe<FieldSelectorEnum>;
  readonly presentationHeight: InputMaybe<FieldSelectorEnum>;
  readonly presentationWidth: InputMaybe<FieldSelectorEnum>;
  readonly sizes: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly srcSet: InputMaybe<FieldSelectorEnum>;
  readonly srcSetWebp: InputMaybe<FieldSelectorEnum>;
  readonly srcWebp: InputMaybe<FieldSelectorEnum>;
  readonly tracedSVG: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpFluidFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly base64: InputMaybe<StringQueryOperatorInput>;
  readonly originalImg: InputMaybe<StringQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly presentationHeight: InputMaybe<IntQueryOperatorInput>;
  readonly presentationWidth: InputMaybe<IntQueryOperatorInput>;
  readonly sizes: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly srcSet: InputMaybe<StringQueryOperatorInput>;
  readonly srcSetWebp: InputMaybe<StringQueryOperatorInput>;
  readonly srcWebp: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
};

type ImageSharpFluidSortInput = {
  readonly aspectRatio: InputMaybe<SortOrderEnum>;
  readonly base64: InputMaybe<SortOrderEnum>;
  readonly originalImg: InputMaybe<SortOrderEnum>;
  readonly originalName: InputMaybe<SortOrderEnum>;
  readonly presentationHeight: InputMaybe<SortOrderEnum>;
  readonly presentationWidth: InputMaybe<SortOrderEnum>;
  readonly sizes: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly srcSet: InputMaybe<SortOrderEnum>;
  readonly srcSetWebp: InputMaybe<SortOrderEnum>;
  readonly srcWebp: InputMaybe<SortOrderEnum>;
  readonly tracedSVG: InputMaybe<SortOrderEnum>;
};

type ImageSharpGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ImageSharpEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ImageSharpGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ImageSharp>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ImageSharpGroupConnection_distinctArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpGroupConnection_groupArgs = {
  field: ImageSharpFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ImageSharpGroupConnection_maxArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpGroupConnection_minArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpGroupConnection_sumArgs = {
  field: ImageSharpFieldSelector;
};

type ImageSharpOriginal = {
  readonly height: Maybe<Scalars['Float']>;
  readonly src: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Float']>;
};

type ImageSharpOriginalFieldSelector = {
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpOriginalFilterInput = {
  readonly height: InputMaybe<FloatQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<FloatQueryOperatorInput>;
};

type ImageSharpOriginalSortInput = {
  readonly height: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type ImageSharpResize = {
  readonly aspectRatio: Maybe<Scalars['Float']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly originalName: Maybe<Scalars['String']>;
  readonly src: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};

type ImageSharpResizeFieldSelector = {
  readonly aspectRatio: InputMaybe<FieldSelectorEnum>;
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly originalName: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly tracedSVG: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpResizeFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type ImageSharpResizeSortInput = {
  readonly aspectRatio: InputMaybe<SortOrderEnum>;
  readonly height: InputMaybe<SortOrderEnum>;
  readonly originalName: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly tracedSVG: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type ImageSharpSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly fixed: InputMaybe<ImageSharpFixedSortInput>;
  readonly fluid: InputMaybe<ImageSharpFluidSortInput>;
  readonly gatsbyImageData: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly original: InputMaybe<ImageSharpOriginalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly resize: InputMaybe<ImageSharpResizeSortInput>;
};

type IntQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Int']>;
  readonly gt: InputMaybe<Scalars['Int']>;
  readonly gte: InputMaybe<Scalars['Int']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  readonly lt: InputMaybe<Scalars['Int']>;
  readonly lte: InputMaybe<Scalars['Int']>;
  readonly ne: InputMaybe<Scalars['Int']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
};

type Internal = {
  readonly content: Maybe<Scalars['String']>;
  readonly contentDigest: Scalars['String'];
  readonly contentFilePath: Maybe<Scalars['String']>;
  readonly description: Maybe<Scalars['String']>;
  readonly fieldOwners: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly ignoreType: Maybe<Scalars['Boolean']>;
  readonly mediaType: Maybe<Scalars['String']>;
  readonly owner: Scalars['String'];
  readonly type: Scalars['String'];
};

type InternalFieldSelector = {
  readonly content: InputMaybe<FieldSelectorEnum>;
  readonly contentDigest: InputMaybe<FieldSelectorEnum>;
  readonly contentFilePath: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly fieldOwners: InputMaybe<FieldSelectorEnum>;
  readonly ignoreType: InputMaybe<FieldSelectorEnum>;
  readonly mediaType: InputMaybe<FieldSelectorEnum>;
  readonly owner: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type InternalFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly contentDigest: InputMaybe<StringQueryOperatorInput>;
  readonly contentFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly fieldOwners: InputMaybe<StringQueryOperatorInput>;
  readonly ignoreType: InputMaybe<BooleanQueryOperatorInput>;
  readonly mediaType: InputMaybe<StringQueryOperatorInput>;
  readonly owner: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type InternalSortInput = {
  readonly content: InputMaybe<SortOrderEnum>;
  readonly contentDigest: InputMaybe<SortOrderEnum>;
  readonly contentFilePath: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly fieldOwners: InputMaybe<SortOrderEnum>;
  readonly ignoreType: InputMaybe<SortOrderEnum>;
  readonly mediaType: InputMaybe<SortOrderEnum>;
  readonly owner: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type JPGOptions = {
  readonly progressive: InputMaybe<Scalars['Boolean']>;
  readonly quality: InputMaybe<Scalars['Int']>;
};

type JSONQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['JSON']>;
  readonly glob: InputMaybe<Scalars['JSON']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['JSON']>>>;
  readonly ne: InputMaybe<Scalars['JSON']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['JSON']>>>;
  readonly regex: InputMaybe<Scalars['JSON']>;
};

/** Node Interface */
type Node = {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type NodeFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type NodeFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type NodeFilterListInput = {
  readonly elemMatch: InputMaybe<NodeFilterInput>;
};

type NodeSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type PNGOptions = {
  readonly compressionSpeed: InputMaybe<Scalars['Int']>;
  readonly quality: InputMaybe<Scalars['Int']>;
};

type PageInfo = {
  readonly currentPage: Scalars['Int'];
  readonly hasNextPage: Scalars['Boolean'];
  readonly hasPreviousPage: Scalars['Boolean'];
  readonly itemCount: Scalars['Int'];
  readonly pageCount: Scalars['Int'];
  readonly perPage: Maybe<Scalars['Int']>;
  readonly totalCount: Scalars['Int'];
};

type Potrace = {
  readonly alphaMax: InputMaybe<Scalars['Float']>;
  readonly background: InputMaybe<Scalars['String']>;
  readonly blackOnWhite: InputMaybe<Scalars['Boolean']>;
  readonly color: InputMaybe<Scalars['String']>;
  readonly optCurve: InputMaybe<Scalars['Boolean']>;
  readonly optTolerance: InputMaybe<Scalars['Float']>;
  readonly threshold: InputMaybe<Scalars['Int']>;
  readonly turdSize: InputMaybe<Scalars['Float']>;
  readonly turnPolicy: InputMaybe<PotraceTurnPolicy>;
};

type PotraceTurnPolicy =
  | 'black'
  | 'left'
  | 'majority'
  | 'minority'
  | 'right'
  | 'white';

type Query = {
  readonly allDirectory: DirectoryConnection;
  readonly allFile: FileConnection;
  readonly allImageSharp: ImageSharpConnection;
  readonly allSite: SiteConnection;
  readonly allSiteBuildMetadata: SiteBuildMetadataConnection;
  readonly allSiteFunction: SiteFunctionConnection;
  readonly allSitePage: SitePageConnection;
  readonly allSitePlugin: SitePluginConnection;
  readonly allStrapiAbout: STRAPI_ABOUTConnection;
  readonly allStrapiAboutTextTextnode: STRAPI_ABOUT_TEXT_TEXTNODEConnection;
  readonly allStrapiAnnouncement: STRAPI_ANNOUNCEMENTConnection;
  readonly allStrapiAnnouncementPostTextnode: STRAPI_ANNOUNCEMENT_POST_TEXTNODEConnection;
  readonly allStrapiAttribute: STRAPI_ATTRIBUTEConnection;
  readonly allStrapiAttributeDescriptionTextnode: STRAPI_ATTRIBUTE_DESCRIPTION_TEXTNODEConnection;
  readonly allStrapiBrand: STRAPI_BRANDConnection;
  readonly allStrapiDemo: STRAPI_DEMOConnection;
  readonly allStrapiDemoTextTextnode: STRAPI_DEMO_TEXT_TEXTNODEConnection;
  readonly allStrapiEvent: STRAPI_EVENTConnection;
  readonly allStrapiExperience: STRAPI_EXPERIENCEConnection;
  readonly allStrapiExperienceTextTextnode: STRAPI_EXPERIENCE_TEXT_TEXTNODEConnection;
  readonly allStrapiFaq: STRAPI_FAQConnection;
  readonly allStrapiImagegrab: STRAPI_IMAGEGRABConnection;
  readonly allStrapiJob: STRAPI_JOBConnection;
  readonly allStrapiJobDescriptionTextnode: STRAPI_JOB_DESCRIPTION_TEXTNODEConnection;
  readonly allStrapiLocale: STRAPI_LOCALEConnection;
  readonly allStrapiLocaleAboutTextnode: STRAPI_LOCALE_ABOUT_TEXTNODEConnection;
  readonly allStrapiLocaleTopbarTextnode: STRAPI_LOCALE_TOPBAR_TEXTNODEConnection;
  readonly allStrapiLocation: STRAPI_LOCATIONConnection;
  readonly allStrapiLocationAddressTextnode: STRAPI_LOCATION_ADDRESS_TEXTNODEConnection;
  readonly allStrapiLocationDescriptionTextnode: STRAPI_LOCATION_DESCRIPTION_TEXTNODEConnection;
  readonly allStrapiMedia: STRAPI__MEDIAConnection;
  readonly allStrapiRental: STRAPI_RENTALConnection;
  readonly allStrapiRentalAddon: STRAPI_RENTAL_ADDONConnection;
  readonly allStrapiRentalRate: STRAPI_RENTAL_RATEConnection;
  readonly allStrapiRentalTextTextnode: STRAPI_RENTAL_TEXT_TEXTNODEConnection;
  readonly allStrapiRetails: STRAPI_RETAILConnection;
  readonly allStrapiRetailsDescriptionTextnode: STRAPI_RETAIL_DESCRIPTION_TEXTNODEConnection;
  readonly allStrapiRetailsFeaturesTextnode: STRAPI_RETAIL_FEATURES_TEXTNODEConnection;
  readonly allStrapiShop: STRAPI_SHOPConnection;
  readonly allStrapiShopTextTextnode: STRAPI_SHOP_TEXT_TEXTNODEConnection;
  readonly allStrapiSport: STRAPI_SPORTConnection;
  readonly allStrapiTeam: STRAPI_TEAMConnection;
  readonly allStrapiTeamBioTextnode: STRAPI_TEAM_BIO_TEXTNODEConnection;
  readonly allStrapiTestimonial: STRAPI_TESTIMONIALConnection;
  readonly allStrapiTour: STRAPI_TOURConnection;
  readonly allStrapiTourInformationTextnode: STRAPI_TOUR_INFORMATION_TEXTNODEConnection;
  readonly directory: Maybe<Directory>;
  readonly file: Maybe<File>;
  readonly imageSharp: Maybe<ImageSharp>;
  readonly site: Maybe<Site>;
  readonly siteBuildMetadata: Maybe<SiteBuildMetadata>;
  readonly siteFunction: Maybe<SiteFunction>;
  readonly sitePage: Maybe<SitePage>;
  readonly sitePlugin: Maybe<SitePlugin>;
  readonly strapiAbout: Maybe<STRAPI_ABOUT>;
  readonly strapiAboutTextTextnode: Maybe<STRAPI_ABOUT_TEXT_TEXTNODE>;
  readonly strapiAnnouncement: Maybe<STRAPI_ANNOUNCEMENT>;
  readonly strapiAnnouncementPostTextnode: Maybe<STRAPI_ANNOUNCEMENT_POST_TEXTNODE>;
  readonly strapiAttribute: Maybe<STRAPI_ATTRIBUTE>;
  readonly strapiAttributeDescriptionTextnode: Maybe<STRAPI_ATTRIBUTE_DESCRIPTION_TEXTNODE>;
  readonly strapiBrand: Maybe<STRAPI_BRAND>;
  readonly strapiDemo: Maybe<STRAPI_DEMO>;
  readonly strapiDemoTextTextnode: Maybe<STRAPI_DEMO_TEXT_TEXTNODE>;
  readonly strapiEvent: Maybe<STRAPI_EVENT>;
  readonly strapiExperience: Maybe<STRAPI_EXPERIENCE>;
  readonly strapiExperienceTextTextnode: Maybe<STRAPI_EXPERIENCE_TEXT_TEXTNODE>;
  readonly strapiFaq: Maybe<STRAPI_FAQ>;
  readonly strapiImagegrab: Maybe<STRAPI_IMAGEGRAB>;
  readonly strapiJob: Maybe<STRAPI_JOB>;
  readonly strapiJobDescriptionTextnode: Maybe<STRAPI_JOB_DESCRIPTION_TEXTNODE>;
  readonly strapiLocale: Maybe<STRAPI_LOCALE>;
  readonly strapiLocaleAboutTextnode: Maybe<STRAPI_LOCALE_ABOUT_TEXTNODE>;
  readonly strapiLocaleTopbarTextnode: Maybe<STRAPI_LOCALE_TOPBAR_TEXTNODE>;
  readonly strapiLocation: Maybe<STRAPI_LOCATION>;
  readonly strapiLocationAddressTextnode: Maybe<STRAPI_LOCATION_ADDRESS_TEXTNODE>;
  readonly strapiLocationDescriptionTextnode: Maybe<STRAPI_LOCATION_DESCRIPTION_TEXTNODE>;
  readonly strapiMedia: Maybe<STRAPI__MEDIA>;
  readonly strapiRental: Maybe<STRAPI_RENTAL>;
  readonly strapiRentalAddon: Maybe<STRAPI_RENTAL_ADDON>;
  readonly strapiRentalRate: Maybe<STRAPI_RENTAL_RATE>;
  readonly strapiRentalTextTextnode: Maybe<STRAPI_RENTAL_TEXT_TEXTNODE>;
  readonly strapiRetail: Maybe<STRAPI_RETAIL>;
  readonly strapiRetailDescriptionTextnode: Maybe<STRAPI_RETAIL_DESCRIPTION_TEXTNODE>;
  readonly strapiRetailFeaturesTextnode: Maybe<STRAPI_RETAIL_FEATURES_TEXTNODE>;
  readonly strapiShop: Maybe<STRAPI_SHOP>;
  readonly strapiShopTextTextnode: Maybe<STRAPI_SHOP_TEXT_TEXTNODE>;
  readonly strapiSport: Maybe<STRAPI_SPORT>;
  readonly strapiTeam: Maybe<STRAPI_TEAM>;
  readonly strapiTeamBioTextnode: Maybe<STRAPI_TEAM_BIO_TEXTNODE>;
  readonly strapiTestimonial: Maybe<STRAPI_TESTIMONIAL>;
  readonly strapiTour: Maybe<STRAPI_TOUR>;
  readonly strapiTourInformationTextnode: Maybe<STRAPI_TOUR_INFORMATION_TEXTNODE>;
};


type Query_allDirectoryArgs = {
  filter: InputMaybe<DirectoryFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<DirectorySortInput>>>;
};


type Query_allFileArgs = {
  filter: InputMaybe<FileFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<FileSortInput>>>;
};


type Query_allImageSharpArgs = {
  filter: InputMaybe<ImageSharpFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ImageSharpSortInput>>>;
};


type Query_allSiteArgs = {
  filter: InputMaybe<SiteFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SiteSortInput>>>;
};


type Query_allSiteBuildMetadataArgs = {
  filter: InputMaybe<SiteBuildMetadataFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SiteBuildMetadataSortInput>>>;
};


type Query_allSiteFunctionArgs = {
  filter: InputMaybe<SiteFunctionFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SiteFunctionSortInput>>>;
};


type Query_allSitePageArgs = {
  filter: InputMaybe<SitePageFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SitePageSortInput>>>;
};


type Query_allSitePluginArgs = {
  filter: InputMaybe<SitePluginFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SitePluginSortInput>>>;
};


type Query_allStrapiAboutArgs = {
  filter: InputMaybe<STRAPI_ABOUTFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_ABOUTSortInput>>>;
};


type Query_allStrapiAboutTextTextnodeArgs = {
  filter: InputMaybe<STRAPI_ABOUT_TEXT_TEXTNODEFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_ABOUT_TEXT_TEXTNODESortInput>>>;
};


type Query_allStrapiAnnouncementArgs = {
  filter: InputMaybe<STRAPI_ANNOUNCEMENTFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_ANNOUNCEMENTSortInput>>>;
};


type Query_allStrapiAnnouncementPostTextnodeArgs = {
  filter: InputMaybe<STRAPI_ANNOUNCEMENT_POST_TEXTNODEFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_ANNOUNCEMENT_POST_TEXTNODESortInput>>>;
};


type Query_allStrapiAttributeArgs = {
  filter: InputMaybe<STRAPI_ATTRIBUTEFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_ATTRIBUTESortInput>>>;
};


type Query_allStrapiAttributeDescriptionTextnodeArgs = {
  filter: InputMaybe<STRAPI_ATTRIBUTE_DESCRIPTION_TEXTNODEFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_ATTRIBUTE_DESCRIPTION_TEXTNODESortInput>>>;
};


type Query_allStrapiBrandArgs = {
  filter: InputMaybe<STRAPI_BRANDFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_BRANDSortInput>>>;
};


type Query_allStrapiDemoArgs = {
  filter: InputMaybe<STRAPI_DEMOFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_DEMOSortInput>>>;
};


type Query_allStrapiDemoTextTextnodeArgs = {
  filter: InputMaybe<STRAPI_DEMO_TEXT_TEXTNODEFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_DEMO_TEXT_TEXTNODESortInput>>>;
};


type Query_allStrapiEventArgs = {
  filter: InputMaybe<STRAPI_EVENTFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_EVENTSortInput>>>;
};


type Query_allStrapiExperienceArgs = {
  filter: InputMaybe<STRAPI_EXPERIENCEFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_EXPERIENCESortInput>>>;
};


type Query_allStrapiExperienceTextTextnodeArgs = {
  filter: InputMaybe<STRAPI_EXPERIENCE_TEXT_TEXTNODEFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_EXPERIENCE_TEXT_TEXTNODESortInput>>>;
};


type Query_allStrapiFaqArgs = {
  filter: InputMaybe<STRAPI_FAQFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_FAQSortInput>>>;
};


type Query_allStrapiImagegrabArgs = {
  filter: InputMaybe<STRAPI_IMAGEGRABFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_IMAGEGRABSortInput>>>;
};


type Query_allStrapiJobArgs = {
  filter: InputMaybe<STRAPI_JOBFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_JOBSortInput>>>;
};


type Query_allStrapiJobDescriptionTextnodeArgs = {
  filter: InputMaybe<STRAPI_JOB_DESCRIPTION_TEXTNODEFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_JOB_DESCRIPTION_TEXTNODESortInput>>>;
};


type Query_allStrapiLocaleArgs = {
  filter: InputMaybe<STRAPI_LOCALEFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_LOCALESortInput>>>;
};


type Query_allStrapiLocaleAboutTextnodeArgs = {
  filter: InputMaybe<STRAPI_LOCALE_ABOUT_TEXTNODEFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_LOCALE_ABOUT_TEXTNODESortInput>>>;
};


type Query_allStrapiLocaleTopbarTextnodeArgs = {
  filter: InputMaybe<STRAPI_LOCALE_TOPBAR_TEXTNODEFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_LOCALE_TOPBAR_TEXTNODESortInput>>>;
};


type Query_allStrapiLocationArgs = {
  filter: InputMaybe<STRAPI_LOCATIONFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_LOCATIONSortInput>>>;
};


type Query_allStrapiLocationAddressTextnodeArgs = {
  filter: InputMaybe<STRAPI_LOCATION_ADDRESS_TEXTNODEFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_LOCATION_ADDRESS_TEXTNODESortInput>>>;
};


type Query_allStrapiLocationDescriptionTextnodeArgs = {
  filter: InputMaybe<STRAPI_LOCATION_DESCRIPTION_TEXTNODEFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_LOCATION_DESCRIPTION_TEXTNODESortInput>>>;
};


type Query_allStrapiMediaArgs = {
  filter: InputMaybe<STRAPI__MEDIAFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI__MEDIASortInput>>>;
};


type Query_allStrapiRentalArgs = {
  filter: InputMaybe<STRAPI_RENTALFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_RENTALSortInput>>>;
};


type Query_allStrapiRentalAddonArgs = {
  filter: InputMaybe<STRAPI_RENTAL_ADDONFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_RENTAL_ADDONSortInput>>>;
};


type Query_allStrapiRentalRateArgs = {
  filter: InputMaybe<STRAPI_RENTAL_RATEFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_RENTAL_RATESortInput>>>;
};


type Query_allStrapiRentalTextTextnodeArgs = {
  filter: InputMaybe<STRAPI_RENTAL_TEXT_TEXTNODEFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_RENTAL_TEXT_TEXTNODESortInput>>>;
};


type Query_allStrapiRetailsArgs = {
  filter: InputMaybe<STRAPI_RETAILFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_RETAILSortInput>>>;
};


type Query_allStrapiRetailsDescriptionTextnodeArgs = {
  filter: InputMaybe<STRAPI_RETAIL_DESCRIPTION_TEXTNODEFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_RETAIL_DESCRIPTION_TEXTNODESortInput>>>;
};


type Query_allStrapiRetailsFeaturesTextnodeArgs = {
  filter: InputMaybe<STRAPI_RETAIL_FEATURES_TEXTNODEFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_RETAIL_FEATURES_TEXTNODESortInput>>>;
};


type Query_allStrapiShopArgs = {
  filter: InputMaybe<STRAPI_SHOPFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_SHOPSortInput>>>;
};


type Query_allStrapiShopTextTextnodeArgs = {
  filter: InputMaybe<STRAPI_SHOP_TEXT_TEXTNODEFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_SHOP_TEXT_TEXTNODESortInput>>>;
};


type Query_allStrapiSportArgs = {
  filter: InputMaybe<STRAPI_SPORTFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_SPORTSortInput>>>;
};


type Query_allStrapiTeamArgs = {
  filter: InputMaybe<STRAPI_TEAMFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_TEAMSortInput>>>;
};


type Query_allStrapiTeamBioTextnodeArgs = {
  filter: InputMaybe<STRAPI_TEAM_BIO_TEXTNODEFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_TEAM_BIO_TEXTNODESortInput>>>;
};


type Query_allStrapiTestimonialArgs = {
  filter: InputMaybe<STRAPI_TESTIMONIALFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_TESTIMONIALSortInput>>>;
};


type Query_allStrapiTourArgs = {
  filter: InputMaybe<STRAPI_TOURFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_TOURSortInput>>>;
};


type Query_allStrapiTourInformationTextnodeArgs = {
  filter: InputMaybe<STRAPI_TOUR_INFORMATION_TEXTNODEFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_TOUR_INFORMATION_TEXTNODESortInput>>>;
};


type Query_directoryArgs = {
  absolutePath: InputMaybe<StringQueryOperatorInput>;
  accessTime: InputMaybe<DateQueryOperatorInput>;
  atime: InputMaybe<DateQueryOperatorInput>;
  atimeMs: InputMaybe<FloatQueryOperatorInput>;
  base: InputMaybe<StringQueryOperatorInput>;
  birthTime: InputMaybe<DateQueryOperatorInput>;
  birthtime: InputMaybe<DateQueryOperatorInput>;
  birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  changeTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  ctime: InputMaybe<DateQueryOperatorInput>;
  ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  dev: InputMaybe<IntQueryOperatorInput>;
  dir: InputMaybe<StringQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  extension: InputMaybe<StringQueryOperatorInput>;
  gid: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ino: InputMaybe<FloatQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mode: InputMaybe<IntQueryOperatorInput>;
  modifiedTime: InputMaybe<DateQueryOperatorInput>;
  mtime: InputMaybe<DateQueryOperatorInput>;
  mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nlink: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prettySize: InputMaybe<StringQueryOperatorInput>;
  rdev: InputMaybe<IntQueryOperatorInput>;
  relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  relativePath: InputMaybe<StringQueryOperatorInput>;
  root: InputMaybe<StringQueryOperatorInput>;
  size: InputMaybe<IntQueryOperatorInput>;
  sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<IntQueryOperatorInput>;
};


type Query_fileArgs = {
  absolutePath: InputMaybe<StringQueryOperatorInput>;
  accessTime: InputMaybe<DateQueryOperatorInput>;
  atime: InputMaybe<DateQueryOperatorInput>;
  atimeMs: InputMaybe<FloatQueryOperatorInput>;
  base: InputMaybe<StringQueryOperatorInput>;
  birthTime: InputMaybe<DateQueryOperatorInput>;
  birthtime: InputMaybe<DateQueryOperatorInput>;
  birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  blksize: InputMaybe<IntQueryOperatorInput>;
  blocks: InputMaybe<IntQueryOperatorInput>;
  changeTime: InputMaybe<DateQueryOperatorInput>;
  childImageSharp: InputMaybe<ImageSharpFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenImageSharp: InputMaybe<ImageSharpFilterListInput>;
  ctime: InputMaybe<DateQueryOperatorInput>;
  ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  dev: InputMaybe<IntQueryOperatorInput>;
  dir: InputMaybe<StringQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  extension: InputMaybe<StringQueryOperatorInput>;
  gid: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ino: InputMaybe<FloatQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mode: InputMaybe<IntQueryOperatorInput>;
  modifiedTime: InputMaybe<DateQueryOperatorInput>;
  mtime: InputMaybe<DateQueryOperatorInput>;
  mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nlink: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prettySize: InputMaybe<StringQueryOperatorInput>;
  publicURL: InputMaybe<StringQueryOperatorInput>;
  rdev: InputMaybe<IntQueryOperatorInput>;
  relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  relativePath: InputMaybe<StringQueryOperatorInput>;
  root: InputMaybe<StringQueryOperatorInput>;
  size: InputMaybe<IntQueryOperatorInput>;
  sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<IntQueryOperatorInput>;
  url: InputMaybe<StringQueryOperatorInput>;
};


type Query_imageSharpArgs = {
  children: InputMaybe<NodeFilterListInput>;
  fixed: InputMaybe<ImageSharpFixedFilterInput>;
  fluid: InputMaybe<ImageSharpFluidFilterInput>;
  gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  original: InputMaybe<ImageSharpOriginalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  resize: InputMaybe<ImageSharpResizeFilterInput>;
};


type Query_siteArgs = {
  buildTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  graphqlTypegen: InputMaybe<SiteGraphqlTypegenFilterInput>;
  host: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  jsxRuntime: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pathPrefix: InputMaybe<StringQueryOperatorInput>;
  polyfill: InputMaybe<BooleanQueryOperatorInput>;
  port: InputMaybe<IntQueryOperatorInput>;
  siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
  trailingSlash: InputMaybe<StringQueryOperatorInput>;
};


type Query_siteBuildMetadataArgs = {
  buildTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_siteFunctionArgs = {
  absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  functionRoute: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  matchPath: InputMaybe<StringQueryOperatorInput>;
  originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
  originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pluginName: InputMaybe<StringQueryOperatorInput>;
  relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
};


type Query_sitePageArgs = {
  children: InputMaybe<NodeFilterListInput>;
  component: InputMaybe<StringQueryOperatorInput>;
  componentChunkName: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  internalComponentName: InputMaybe<StringQueryOperatorInput>;
  matchPath: InputMaybe<StringQueryOperatorInput>;
  pageContext: InputMaybe<JSONQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  path: InputMaybe<StringQueryOperatorInput>;
  pluginCreator: InputMaybe<SitePluginFilterInput>;
};


type Query_sitePluginArgs = {
  browserAPIs: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nodeAPIs: InputMaybe<StringQueryOperatorInput>;
  packageJson: InputMaybe<JSONQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pluginFilepath: InputMaybe<StringQueryOperatorInput>;
  pluginOptions: InputMaybe<JSONQueryOperatorInput>;
  resolve: InputMaybe<StringQueryOperatorInput>;
  ssrAPIs: InputMaybe<StringQueryOperatorInput>;
  version: InputMaybe<StringQueryOperatorInput>;
};


type Query_strapiAboutArgs = {
  children: InputMaybe<NodeFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  publishedAt: InputMaybe<DateQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  text: InputMaybe<STRAPI_ABOUTTextFilterInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_strapiAboutTextTextnodeArgs = {
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  text: InputMaybe<StringQueryOperatorInput>;
};


type Query_strapiAnnouncementArgs = {
  calendar: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  gatsbyPath: InputMaybe<StringQueryOperatorInput>;
  hero: InputMaybe<STRAPI__MEDIAFilterInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  locales: InputMaybe<STRAPI_LOCALEFilterListInput>;
  locations: InputMaybe<STRAPI_LOCATIONFilterListInput>;
  parent: InputMaybe<NodeFilterInput>;
  post: InputMaybe<STRAPI_ANNOUNCEMENTPostFilterInput>;
  publishedAt: InputMaybe<DateQueryOperatorInput>;
  slug: InputMaybe<StringQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_strapiAnnouncementPostTextnodeArgs = {
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  post: InputMaybe<StringQueryOperatorInput>;
};


type Query_strapiAttributeArgs = {
  children: InputMaybe<NodeFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  description: InputMaybe<STRAPI_ATTRIBUTEDescriptionFilterInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  publishedAt: InputMaybe<DateQueryOperatorInput>;
  slug: InputMaybe<StringQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_strapiAttributeDescriptionTextnodeArgs = {
  children: InputMaybe<NodeFilterListInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_strapiBrandArgs = {
  children: InputMaybe<NodeFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  publishedAt: InputMaybe<DateQueryOperatorInput>;
  retail: InputMaybe<STRAPI_RETAILFilterListInput>;
  slug: InputMaybe<StringQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  svg: InputMaybe<StringQueryOperatorInput>;
  tagline: InputMaybe<StringQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_strapiDemoArgs = {
  children: InputMaybe<NodeFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  publishedAt: InputMaybe<DateQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  text: InputMaybe<STRAPI_DEMOTextFilterInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_strapiDemoTextTextnodeArgs = {
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  text: InputMaybe<StringQueryOperatorInput>;
};


type Query_strapiEventArgs = {
  children: InputMaybe<NodeFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  finish: InputMaybe<DateQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  publishedAt: InputMaybe<DateQueryOperatorInput>;
  start: InputMaybe<DateQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  topbar: InputMaybe<StringQueryOperatorInput>;
  tour: InputMaybe<STRAPI_TOURFilterInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_strapiExperienceArgs = {
  children: InputMaybe<NodeFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  publishedAt: InputMaybe<DateQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  text: InputMaybe<STRAPI_EXPERIENCETextFilterInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_strapiExperienceTextTextnodeArgs = {
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  text: InputMaybe<StringQueryOperatorInput>;
};


type Query_strapiFaqArgs = {
  answer: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  publishedAt: InputMaybe<DateQueryOperatorInput>;
  question: InputMaybe<StringQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_strapiImagegrabArgs = {
  children: InputMaybe<NodeFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  image: InputMaybe<STRAPI__MEDIAFilterInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  publishedAt: InputMaybe<DateQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_strapiJobArgs = {
  children: InputMaybe<NodeFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  description: InputMaybe<STRAPI_JOBDescriptionFilterInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  locales: InputMaybe<STRAPI_LOCALEFilterListInput>;
  parent: InputMaybe<NodeFilterInput>;
  publishedAt: InputMaybe<DateQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_strapiJobDescriptionTextnodeArgs = {
  children: InputMaybe<NodeFilterListInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_strapiLocaleArgs = {
  about: InputMaybe<STRAPI_LOCALEAboutFilterInput>;
  announcements: InputMaybe<STRAPI_ANNOUNCEMENTFilterListInput>;
  children: InputMaybe<NodeFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  email: InputMaybe<StringQueryOperatorInput>;
  facebook: InputMaybe<StringQueryOperatorInput>;
  geoRadius: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  instagram: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  jobs: InputMaybe<STRAPI_JOBFilterListInput>;
  latitude: InputMaybe<FloatQueryOperatorInput>;
  locations: InputMaybe<STRAPI_LOCATIONFilterListInput>;
  longitude: InputMaybe<FloatQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  numberOfEmployees: InputMaybe<StringQueryOperatorInput>;
  ogImage: InputMaybe<StringQueryOperatorInput>;
  ogimagedescription: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  peek_base: InputMaybe<StringQueryOperatorInput>;
  peek_double: InputMaybe<StringQueryOperatorInput>;
  peek_paddleboard: InputMaybe<StringQueryOperatorInput>;
  peek_rentals: InputMaybe<StringQueryOperatorInput>;
  peek_single: InputMaybe<StringQueryOperatorInput>;
  peek_tours: InputMaybe<StringQueryOperatorInput>;
  phone: InputMaybe<StringQueryOperatorInput>;
  publishedAt: InputMaybe<DateQueryOperatorInput>;
  season_end: InputMaybe<DateQueryOperatorInput>;
  season_start: InputMaybe<DateQueryOperatorInput>;
  slug: InputMaybe<StringQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  teams: InputMaybe<STRAPI_TEAMFilterListInput>;
  testimonials: InputMaybe<STRAPI_TESTIMONIALFilterListInput>;
  themeColor: InputMaybe<StringQueryOperatorInput>;
  topbar: InputMaybe<STRAPI_LOCALETopbarFilterInput>;
  tours: InputMaybe<STRAPI_TOURFilterListInput>;
  tripadvisor: InputMaybe<StringQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
  url: InputMaybe<StringQueryOperatorInput>;
};


type Query_strapiLocaleAboutTextnodeArgs = {
  about: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_strapiLocaleTopbarTextnodeArgs = {
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  topbar: InputMaybe<StringQueryOperatorInput>;
};


type Query_strapiLocationArgs = {
  address: InputMaybe<STRAPI_LOCATIONAddressFilterInput>;
  addressLocality: InputMaybe<StringQueryOperatorInput>;
  addressRegion: InputMaybe<StringQueryOperatorInput>;
  announcements: InputMaybe<STRAPI_ANNOUNCEMENTFilterListInput>;
  children: InputMaybe<NodeFilterListInput>;
  closing_time: InputMaybe<StringQueryOperatorInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  description: InputMaybe<STRAPI_LOCATIONDescriptionFilterInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  link: InputMaybe<StringQueryOperatorInput>;
  locale: InputMaybe<STRAPI_LOCALEFilterInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  opening_time: InputMaybe<StringQueryOperatorInput>;
  order: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  paymentAccepted: InputMaybe<StringQueryOperatorInput>;
  postalCode: InputMaybe<StringQueryOperatorInput>;
  publishedAt: InputMaybe<DateQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  streetAddress: InputMaybe<StringQueryOperatorInput>;
  svg: InputMaybe<StringQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_strapiLocationAddressTextnodeArgs = {
  address: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_strapiLocationDescriptionTextnodeArgs = {
  children: InputMaybe<NodeFilterListInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_strapiMediaArgs = {
  alternativeText: InputMaybe<StringQueryOperatorInput>;
  caption: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  formats: InputMaybe<STRAPI__MEDIAFormatsFilterInput>;
  hash: InputMaybe<StringQueryOperatorInput>;
  height: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  localFile: InputMaybe<FileFilterInput>;
  mime: InputMaybe<StringQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  size: InputMaybe<FloatQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
  url: InputMaybe<StringQueryOperatorInput>;
  width: InputMaybe<IntQueryOperatorInput>;
};


type Query_strapiRentalArgs = {
  children: InputMaybe<NodeFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  publishedAt: InputMaybe<DateQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  text: InputMaybe<STRAPI_RENTALTextFilterInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_strapiRentalAddonArgs = {
  attribute: InputMaybe<STRAPI_ATTRIBUTEFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  double: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  publishedAt: InputMaybe<DateQueryOperatorInput>;
  single: InputMaybe<IntQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  sup: InputMaybe<IntQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_strapiRentalRateArgs = {
  children: InputMaybe<NodeFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  favorite: InputMaybe<BooleanQueryOperatorInput>;
  fullDay: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  item: InputMaybe<StringQueryOperatorInput>;
  oneHour: InputMaybe<IntQueryOperatorInput>;
  order: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  publishedAt: InputMaybe<DateQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  threeHour: InputMaybe<IntQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_strapiRentalTextTextnodeArgs = {
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  text: InputMaybe<StringQueryOperatorInput>;
};


type Query_strapiRetailArgs = {
  brand: InputMaybe<STRAPI_BRANDFilterInput>;
  capacity: InputMaybe<IntQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  crew: InputMaybe<StringQueryOperatorInput>;
  cutout: InputMaybe<STRAPI__MEDIAFilterInput>;
  demo: InputMaybe<BooleanQueryOperatorInput>;
  description: InputMaybe<STRAPI_RETAILDescriptionFilterInput>;
  discount: InputMaybe<IntQueryOperatorInput>;
  excerpt: InputMaybe<StringQueryOperatorInput>;
  featured: InputMaybe<BooleanQueryOperatorInput>;
  features: InputMaybe<STRAPI_RETAILFeaturesFilterInput>;
  hullweight: InputMaybe<FloatQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  inflatable: InputMaybe<BooleanQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  length: InputMaybe<IntQueryOperatorInput>;
  link: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  price: InputMaybe<FloatQueryOperatorInput>;
  publishedAt: InputMaybe<DateQueryOperatorInput>;
  riggedweight: InputMaybe<IntQueryOperatorInput>;
  series: InputMaybe<StringQueryOperatorInput>;
  slug: InputMaybe<StringQueryOperatorInput>;
  sport: InputMaybe<STRAPI_SPORTFilterInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  thickness: InputMaybe<FloatQueryOperatorInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  type: InputMaybe<StringQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
  volume: InputMaybe<IntQueryOperatorInput>;
  width: InputMaybe<FloatQueryOperatorInput>;
};


type Query_strapiRetailDescriptionTextnodeArgs = {
  children: InputMaybe<NodeFilterListInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_strapiRetailFeaturesTextnodeArgs = {
  children: InputMaybe<NodeFilterListInput>;
  features: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_strapiShopArgs = {
  children: InputMaybe<NodeFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  publishedAt: InputMaybe<DateQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  text: InputMaybe<STRAPI_SHOPTextFilterInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_strapiShopTextTextnodeArgs = {
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  text: InputMaybe<StringQueryOperatorInput>;
};


type Query_strapiSportArgs = {
  children: InputMaybe<NodeFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  description: InputMaybe<STRAPI_SPORTDescriptionFilterInput>;
  gatsbyPath: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  publishedAt: InputMaybe<DateQueryOperatorInput>;
  slug: InputMaybe<StringQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_strapiTeamArgs = {
  bio: InputMaybe<STRAPI_TEAMBioFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  locales: InputMaybe<STRAPI_LOCALEFilterListInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  position: InputMaybe<StringQueryOperatorInput>;
  profile: InputMaybe<STRAPI__MEDIAFilterInput>;
  publishedAt: InputMaybe<DateQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_strapiTeamBioTextnodeArgs = {
  bio: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_strapiTestimonialArgs = {
  children: InputMaybe<NodeFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  customer: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  locale: InputMaybe<STRAPI_LOCALEFilterInput>;
  location: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  publishedAt: InputMaybe<DateQueryOperatorInput>;
  sign: InputMaybe<StringQueryOperatorInput>;
  source: InputMaybe<StringQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  testimonial: InputMaybe<StringQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_strapiTourArgs = {
  children: InputMaybe<NodeFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  duration: InputMaybe<IntQueryOperatorInput>;
  excerpt: InputMaybe<StringQueryOperatorInput>;
  experience: InputMaybe<StringQueryOperatorInput>;
  featured: InputMaybe<BooleanQueryOperatorInput>;
  finish: InputMaybe<StringQueryOperatorInput>;
  fitness: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  information: InputMaybe<STRAPI_TOURInformationFilterInput>;
  internal: InputMaybe<InternalFilterInput>;
  locale: InputMaybe<STRAPI_LOCALEFilterInput>;
  minimum: InputMaybe<IntQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  ogimage: InputMaybe<STRAPI__MEDIAFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  peek: InputMaybe<StringQueryOperatorInput>;
  price: InputMaybe<IntQueryOperatorInput>;
  publishedAt: InputMaybe<DateQueryOperatorInput>;
  slug: InputMaybe<StringQueryOperatorInput>;
  sport: InputMaybe<StringQueryOperatorInput>;
  start: InputMaybe<StringQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  timeframe: InputMaybe<StringQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_strapiTourInformationTextnodeArgs = {
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  information: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};

type STRAPI_ABOUT = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly text: Maybe<STRAPI_ABOUTText>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type STRAPI_ABOUT_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_ABOUT_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_ABOUT_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_ABOUTConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_ABOUTEdge>;
  readonly group: ReadonlyArray<STRAPI_ABOUTGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_ABOUT>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_ABOUTConnection_distinctArgs = {
  field: STRAPI_ABOUTFieldSelector;
};


type STRAPI_ABOUTConnection_groupArgs = {
  field: STRAPI_ABOUTFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_ABOUTConnection_maxArgs = {
  field: STRAPI_ABOUTFieldSelector;
};


type STRAPI_ABOUTConnection_minArgs = {
  field: STRAPI_ABOUTFieldSelector;
};


type STRAPI_ABOUTConnection_sumArgs = {
  field: STRAPI_ABOUTFieldSelector;
};

type STRAPI_ABOUTEdge = {
  readonly next: Maybe<STRAPI_ABOUT>;
  readonly node: STRAPI_ABOUT;
  readonly previous: Maybe<STRAPI_ABOUT>;
};

type STRAPI_ABOUTFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly publishedAt: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<STRAPI_ABOUTTextFieldSelector>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_ABOUTFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly text: InputMaybe<STRAPI_ABOUTTextFilterInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type STRAPI_ABOUTGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_ABOUTEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_ABOUTGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_ABOUT>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_ABOUTGroupConnection_distinctArgs = {
  field: STRAPI_ABOUTFieldSelector;
};


type STRAPI_ABOUTGroupConnection_groupArgs = {
  field: STRAPI_ABOUTFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_ABOUTGroupConnection_maxArgs = {
  field: STRAPI_ABOUTFieldSelector;
};


type STRAPI_ABOUTGroupConnection_minArgs = {
  field: STRAPI_ABOUTFieldSelector;
};


type STRAPI_ABOUTGroupConnection_sumArgs = {
  field: STRAPI_ABOUTFieldSelector;
};

type STRAPI_ABOUTSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly publishedAt: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<STRAPI_ABOUTTextSortInput>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type STRAPI_ABOUTText = {
  readonly data: Maybe<STRAPI_ABOUT_TEXT_TEXTNODE>;
};

type STRAPI_ABOUTTextFieldSelector = {
  readonly data: InputMaybe<STRAPI_ABOUT_TEXT_TEXTNODEFieldSelector>;
};

type STRAPI_ABOUTTextFilterInput = {
  readonly data: InputMaybe<STRAPI_ABOUT_TEXT_TEXTNODEFilterInput>;
};

type STRAPI_ABOUTTextSortInput = {
  readonly data: InputMaybe<STRAPI_ABOUT_TEXT_TEXTNODESortInput>;
};

type STRAPI_ABOUT_TEXT_TEXTNODE = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly text: Maybe<Scalars['String']>;
};

type STRAPI_ABOUT_TEXT_TEXTNODEConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_ABOUT_TEXT_TEXTNODEEdge>;
  readonly group: ReadonlyArray<STRAPI_ABOUT_TEXT_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_ABOUT_TEXT_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_ABOUT_TEXT_TEXTNODEConnection_distinctArgs = {
  field: STRAPI_ABOUT_TEXT_TEXTNODEFieldSelector;
};


type STRAPI_ABOUT_TEXT_TEXTNODEConnection_groupArgs = {
  field: STRAPI_ABOUT_TEXT_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_ABOUT_TEXT_TEXTNODEConnection_maxArgs = {
  field: STRAPI_ABOUT_TEXT_TEXTNODEFieldSelector;
};


type STRAPI_ABOUT_TEXT_TEXTNODEConnection_minArgs = {
  field: STRAPI_ABOUT_TEXT_TEXTNODEFieldSelector;
};


type STRAPI_ABOUT_TEXT_TEXTNODEConnection_sumArgs = {
  field: STRAPI_ABOUT_TEXT_TEXTNODEFieldSelector;
};

type STRAPI_ABOUT_TEXT_TEXTNODEEdge = {
  readonly next: Maybe<STRAPI_ABOUT_TEXT_TEXTNODE>;
  readonly node: STRAPI_ABOUT_TEXT_TEXTNODE;
  readonly previous: Maybe<STRAPI_ABOUT_TEXT_TEXTNODE>;
};

type STRAPI_ABOUT_TEXT_TEXTNODEFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly text: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_ABOUT_TEXT_TEXTNODEFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly text: InputMaybe<StringQueryOperatorInput>;
};

type STRAPI_ABOUT_TEXT_TEXTNODEGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_ABOUT_TEXT_TEXTNODEEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_ABOUT_TEXT_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_ABOUT_TEXT_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_ABOUT_TEXT_TEXTNODEGroupConnection_distinctArgs = {
  field: STRAPI_ABOUT_TEXT_TEXTNODEFieldSelector;
};


type STRAPI_ABOUT_TEXT_TEXTNODEGroupConnection_groupArgs = {
  field: STRAPI_ABOUT_TEXT_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_ABOUT_TEXT_TEXTNODEGroupConnection_maxArgs = {
  field: STRAPI_ABOUT_TEXT_TEXTNODEFieldSelector;
};


type STRAPI_ABOUT_TEXT_TEXTNODEGroupConnection_minArgs = {
  field: STRAPI_ABOUT_TEXT_TEXTNODEFieldSelector;
};


type STRAPI_ABOUT_TEXT_TEXTNODEGroupConnection_sumArgs = {
  field: STRAPI_ABOUT_TEXT_TEXTNODEFieldSelector;
};

type STRAPI_ABOUT_TEXT_TEXTNODESortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly text: InputMaybe<SortOrderEnum>;
};

type STRAPI_ANNOUNCEMENT = Node & {
  readonly calendar: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly gatsbyPath: Maybe<Scalars['String']>;
  readonly hero: Maybe<STRAPI__MEDIA>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly locales: Maybe<ReadonlyArray<Maybe<STRAPI_LOCALE>>>;
  readonly locations: Maybe<ReadonlyArray<Maybe<STRAPI_LOCATION>>>;
  readonly parent: Maybe<Node>;
  readonly post: Maybe<STRAPI_ANNOUNCEMENTPost>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly slug: Maybe<Scalars['String']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly title: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type STRAPI_ANNOUNCEMENT_calendarArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_ANNOUNCEMENT_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_ANNOUNCEMENT_gatsbyPathArgs = {
  filePath: InputMaybe<Scalars['String']>;
};


type STRAPI_ANNOUNCEMENT_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_ANNOUNCEMENT_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_ANNOUNCEMENTConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_ANNOUNCEMENTEdge>;
  readonly group: ReadonlyArray<STRAPI_ANNOUNCEMENTGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_ANNOUNCEMENT>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_ANNOUNCEMENTConnection_distinctArgs = {
  field: STRAPI_ANNOUNCEMENTFieldSelector;
};


type STRAPI_ANNOUNCEMENTConnection_groupArgs = {
  field: STRAPI_ANNOUNCEMENTFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_ANNOUNCEMENTConnection_maxArgs = {
  field: STRAPI_ANNOUNCEMENTFieldSelector;
};


type STRAPI_ANNOUNCEMENTConnection_minArgs = {
  field: STRAPI_ANNOUNCEMENTFieldSelector;
};


type STRAPI_ANNOUNCEMENTConnection_sumArgs = {
  field: STRAPI_ANNOUNCEMENTFieldSelector;
};

type STRAPI_ANNOUNCEMENTEdge = {
  readonly next: Maybe<STRAPI_ANNOUNCEMENT>;
  readonly node: STRAPI_ANNOUNCEMENT;
  readonly previous: Maybe<STRAPI_ANNOUNCEMENT>;
};

type STRAPI_ANNOUNCEMENTFieldSelector = {
  readonly calendar: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly gatsbyPath: InputMaybe<FieldSelectorEnum>;
  readonly hero: InputMaybe<STRAPI__MEDIAFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly locales: InputMaybe<STRAPI_LOCALEFieldSelector>;
  readonly locations: InputMaybe<STRAPI_LOCATIONFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly post: InputMaybe<STRAPI_ANNOUNCEMENTPostFieldSelector>;
  readonly publishedAt: InputMaybe<FieldSelectorEnum>;
  readonly slug: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_ANNOUNCEMENTFilterInput = {
  readonly calendar: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly gatsbyPath: InputMaybe<StringQueryOperatorInput>;
  readonly hero: InputMaybe<STRAPI__MEDIAFilterInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly locales: InputMaybe<STRAPI_LOCALEFilterListInput>;
  readonly locations: InputMaybe<STRAPI_LOCATIONFilterListInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly post: InputMaybe<STRAPI_ANNOUNCEMENTPostFilterInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type STRAPI_ANNOUNCEMENTFilterListInput = {
  readonly elemMatch: InputMaybe<STRAPI_ANNOUNCEMENTFilterInput>;
};

type STRAPI_ANNOUNCEMENTGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_ANNOUNCEMENTEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_ANNOUNCEMENTGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_ANNOUNCEMENT>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_ANNOUNCEMENTGroupConnection_distinctArgs = {
  field: STRAPI_ANNOUNCEMENTFieldSelector;
};


type STRAPI_ANNOUNCEMENTGroupConnection_groupArgs = {
  field: STRAPI_ANNOUNCEMENTFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_ANNOUNCEMENTGroupConnection_maxArgs = {
  field: STRAPI_ANNOUNCEMENTFieldSelector;
};


type STRAPI_ANNOUNCEMENTGroupConnection_minArgs = {
  field: STRAPI_ANNOUNCEMENTFieldSelector;
};


type STRAPI_ANNOUNCEMENTGroupConnection_sumArgs = {
  field: STRAPI_ANNOUNCEMENTFieldSelector;
};

type STRAPI_ANNOUNCEMENTPost = {
  readonly data: Maybe<STRAPI_ANNOUNCEMENT_POST_TEXTNODE>;
};

type STRAPI_ANNOUNCEMENTPostFieldSelector = {
  readonly data: InputMaybe<STRAPI_ANNOUNCEMENT_POST_TEXTNODEFieldSelector>;
};

type STRAPI_ANNOUNCEMENTPostFilterInput = {
  readonly data: InputMaybe<STRAPI_ANNOUNCEMENT_POST_TEXTNODEFilterInput>;
};

type STRAPI_ANNOUNCEMENTPostSortInput = {
  readonly data: InputMaybe<STRAPI_ANNOUNCEMENT_POST_TEXTNODESortInput>;
};

type STRAPI_ANNOUNCEMENTSortInput = {
  readonly calendar: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly gatsbyPath: InputMaybe<SortOrderEnum>;
  readonly hero: InputMaybe<STRAPI__MEDIASortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly locales: InputMaybe<STRAPI_LOCALESortInput>;
  readonly locations: InputMaybe<STRAPI_LOCATIONSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly post: InputMaybe<STRAPI_ANNOUNCEMENTPostSortInput>;
  readonly publishedAt: InputMaybe<SortOrderEnum>;
  readonly slug: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type STRAPI_ANNOUNCEMENT_POST_TEXTNODE = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly post: Maybe<Scalars['String']>;
};

type STRAPI_ANNOUNCEMENT_POST_TEXTNODEConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_ANNOUNCEMENT_POST_TEXTNODEEdge>;
  readonly group: ReadonlyArray<STRAPI_ANNOUNCEMENT_POST_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_ANNOUNCEMENT_POST_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_ANNOUNCEMENT_POST_TEXTNODEConnection_distinctArgs = {
  field: STRAPI_ANNOUNCEMENT_POST_TEXTNODEFieldSelector;
};


type STRAPI_ANNOUNCEMENT_POST_TEXTNODEConnection_groupArgs = {
  field: STRAPI_ANNOUNCEMENT_POST_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_ANNOUNCEMENT_POST_TEXTNODEConnection_maxArgs = {
  field: STRAPI_ANNOUNCEMENT_POST_TEXTNODEFieldSelector;
};


type STRAPI_ANNOUNCEMENT_POST_TEXTNODEConnection_minArgs = {
  field: STRAPI_ANNOUNCEMENT_POST_TEXTNODEFieldSelector;
};


type STRAPI_ANNOUNCEMENT_POST_TEXTNODEConnection_sumArgs = {
  field: STRAPI_ANNOUNCEMENT_POST_TEXTNODEFieldSelector;
};

type STRAPI_ANNOUNCEMENT_POST_TEXTNODEEdge = {
  readonly next: Maybe<STRAPI_ANNOUNCEMENT_POST_TEXTNODE>;
  readonly node: STRAPI_ANNOUNCEMENT_POST_TEXTNODE;
  readonly previous: Maybe<STRAPI_ANNOUNCEMENT_POST_TEXTNODE>;
};

type STRAPI_ANNOUNCEMENT_POST_TEXTNODEFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly post: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_ANNOUNCEMENT_POST_TEXTNODEFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly post: InputMaybe<StringQueryOperatorInput>;
};

type STRAPI_ANNOUNCEMENT_POST_TEXTNODEGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_ANNOUNCEMENT_POST_TEXTNODEEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_ANNOUNCEMENT_POST_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_ANNOUNCEMENT_POST_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_ANNOUNCEMENT_POST_TEXTNODEGroupConnection_distinctArgs = {
  field: STRAPI_ANNOUNCEMENT_POST_TEXTNODEFieldSelector;
};


type STRAPI_ANNOUNCEMENT_POST_TEXTNODEGroupConnection_groupArgs = {
  field: STRAPI_ANNOUNCEMENT_POST_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_ANNOUNCEMENT_POST_TEXTNODEGroupConnection_maxArgs = {
  field: STRAPI_ANNOUNCEMENT_POST_TEXTNODEFieldSelector;
};


type STRAPI_ANNOUNCEMENT_POST_TEXTNODEGroupConnection_minArgs = {
  field: STRAPI_ANNOUNCEMENT_POST_TEXTNODEFieldSelector;
};


type STRAPI_ANNOUNCEMENT_POST_TEXTNODEGroupConnection_sumArgs = {
  field: STRAPI_ANNOUNCEMENT_POST_TEXTNODEFieldSelector;
};

type STRAPI_ANNOUNCEMENT_POST_TEXTNODESortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly post: InputMaybe<SortOrderEnum>;
};

type STRAPI_ATTRIBUTE = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly description: Maybe<STRAPI_ATTRIBUTEDescription>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly name: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly slug: Maybe<Scalars['String']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type STRAPI_ATTRIBUTE_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_ATTRIBUTE_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_ATTRIBUTE_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_ATTRIBUTEConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_ATTRIBUTEEdge>;
  readonly group: ReadonlyArray<STRAPI_ATTRIBUTEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_ATTRIBUTE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_ATTRIBUTEConnection_distinctArgs = {
  field: STRAPI_ATTRIBUTEFieldSelector;
};


type STRAPI_ATTRIBUTEConnection_groupArgs = {
  field: STRAPI_ATTRIBUTEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_ATTRIBUTEConnection_maxArgs = {
  field: STRAPI_ATTRIBUTEFieldSelector;
};


type STRAPI_ATTRIBUTEConnection_minArgs = {
  field: STRAPI_ATTRIBUTEFieldSelector;
};


type STRAPI_ATTRIBUTEConnection_sumArgs = {
  field: STRAPI_ATTRIBUTEFieldSelector;
};

type STRAPI_ATTRIBUTEDescription = {
  readonly data: Maybe<STRAPI_ATTRIBUTE_DESCRIPTION_TEXTNODE>;
};

type STRAPI_ATTRIBUTEDescriptionFieldSelector = {
  readonly data: InputMaybe<STRAPI_ATTRIBUTE_DESCRIPTION_TEXTNODEFieldSelector>;
};

type STRAPI_ATTRIBUTEDescriptionFilterInput = {
  readonly data: InputMaybe<STRAPI_ATTRIBUTE_DESCRIPTION_TEXTNODEFilterInput>;
};

type STRAPI_ATTRIBUTEDescriptionSortInput = {
  readonly data: InputMaybe<STRAPI_ATTRIBUTE_DESCRIPTION_TEXTNODESortInput>;
};

type STRAPI_ATTRIBUTEEdge = {
  readonly next: Maybe<STRAPI_ATTRIBUTE>;
  readonly node: STRAPI_ATTRIBUTE;
  readonly previous: Maybe<STRAPI_ATTRIBUTE>;
};

type STRAPI_ATTRIBUTEFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<STRAPI_ATTRIBUTEDescriptionFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly publishedAt: InputMaybe<FieldSelectorEnum>;
  readonly slug: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_ATTRIBUTEFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly description: InputMaybe<STRAPI_ATTRIBUTEDescriptionFilterInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type STRAPI_ATTRIBUTEGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_ATTRIBUTEEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_ATTRIBUTEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_ATTRIBUTE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_ATTRIBUTEGroupConnection_distinctArgs = {
  field: STRAPI_ATTRIBUTEFieldSelector;
};


type STRAPI_ATTRIBUTEGroupConnection_groupArgs = {
  field: STRAPI_ATTRIBUTEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_ATTRIBUTEGroupConnection_maxArgs = {
  field: STRAPI_ATTRIBUTEFieldSelector;
};


type STRAPI_ATTRIBUTEGroupConnection_minArgs = {
  field: STRAPI_ATTRIBUTEFieldSelector;
};


type STRAPI_ATTRIBUTEGroupConnection_sumArgs = {
  field: STRAPI_ATTRIBUTEFieldSelector;
};

type STRAPI_ATTRIBUTESortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<STRAPI_ATTRIBUTEDescriptionSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly publishedAt: InputMaybe<SortOrderEnum>;
  readonly slug: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type STRAPI_ATTRIBUTE_DESCRIPTION_TEXTNODE = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly description: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type STRAPI_ATTRIBUTE_DESCRIPTION_TEXTNODEConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_ATTRIBUTE_DESCRIPTION_TEXTNODEEdge>;
  readonly group: ReadonlyArray<STRAPI_ATTRIBUTE_DESCRIPTION_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_ATTRIBUTE_DESCRIPTION_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_ATTRIBUTE_DESCRIPTION_TEXTNODEConnection_distinctArgs = {
  field: STRAPI_ATTRIBUTE_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_ATTRIBUTE_DESCRIPTION_TEXTNODEConnection_groupArgs = {
  field: STRAPI_ATTRIBUTE_DESCRIPTION_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_ATTRIBUTE_DESCRIPTION_TEXTNODEConnection_maxArgs = {
  field: STRAPI_ATTRIBUTE_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_ATTRIBUTE_DESCRIPTION_TEXTNODEConnection_minArgs = {
  field: STRAPI_ATTRIBUTE_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_ATTRIBUTE_DESCRIPTION_TEXTNODEConnection_sumArgs = {
  field: STRAPI_ATTRIBUTE_DESCRIPTION_TEXTNODEFieldSelector;
};

type STRAPI_ATTRIBUTE_DESCRIPTION_TEXTNODEEdge = {
  readonly next: Maybe<STRAPI_ATTRIBUTE_DESCRIPTION_TEXTNODE>;
  readonly node: STRAPI_ATTRIBUTE_DESCRIPTION_TEXTNODE;
  readonly previous: Maybe<STRAPI_ATTRIBUTE_DESCRIPTION_TEXTNODE>;
};

type STRAPI_ATTRIBUTE_DESCRIPTION_TEXTNODEFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type STRAPI_ATTRIBUTE_DESCRIPTION_TEXTNODEFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type STRAPI_ATTRIBUTE_DESCRIPTION_TEXTNODEGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_ATTRIBUTE_DESCRIPTION_TEXTNODEEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_ATTRIBUTE_DESCRIPTION_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_ATTRIBUTE_DESCRIPTION_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_ATTRIBUTE_DESCRIPTION_TEXTNODEGroupConnection_distinctArgs = {
  field: STRAPI_ATTRIBUTE_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_ATTRIBUTE_DESCRIPTION_TEXTNODEGroupConnection_groupArgs = {
  field: STRAPI_ATTRIBUTE_DESCRIPTION_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_ATTRIBUTE_DESCRIPTION_TEXTNODEGroupConnection_maxArgs = {
  field: STRAPI_ATTRIBUTE_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_ATTRIBUTE_DESCRIPTION_TEXTNODEGroupConnection_minArgs = {
  field: STRAPI_ATTRIBUTE_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_ATTRIBUTE_DESCRIPTION_TEXTNODEGroupConnection_sumArgs = {
  field: STRAPI_ATTRIBUTE_DESCRIPTION_TEXTNODEFieldSelector;
};

type STRAPI_ATTRIBUTE_DESCRIPTION_TEXTNODESortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type STRAPI_BRAND = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly name: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly retail: Maybe<ReadonlyArray<Maybe<STRAPI_RETAIL>>>;
  readonly slug: Maybe<Scalars['String']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly svg: Maybe<Scalars['String']>;
  readonly tagline: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type STRAPI_BRAND_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_BRAND_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_BRAND_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_BRANDConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_BRANDEdge>;
  readonly group: ReadonlyArray<STRAPI_BRANDGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_BRAND>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_BRANDConnection_distinctArgs = {
  field: STRAPI_BRANDFieldSelector;
};


type STRAPI_BRANDConnection_groupArgs = {
  field: STRAPI_BRANDFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_BRANDConnection_maxArgs = {
  field: STRAPI_BRANDFieldSelector;
};


type STRAPI_BRANDConnection_minArgs = {
  field: STRAPI_BRANDFieldSelector;
};


type STRAPI_BRANDConnection_sumArgs = {
  field: STRAPI_BRANDFieldSelector;
};

type STRAPI_BRANDEdge = {
  readonly next: Maybe<STRAPI_BRAND>;
  readonly node: STRAPI_BRAND;
  readonly previous: Maybe<STRAPI_BRAND>;
};

type STRAPI_BRANDFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly publishedAt: InputMaybe<FieldSelectorEnum>;
  readonly retail: InputMaybe<STRAPI_RETAILFieldSelector>;
  readonly slug: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly svg: InputMaybe<FieldSelectorEnum>;
  readonly tagline: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_BRANDFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly retail: InputMaybe<STRAPI_RETAILFilterListInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly svg: InputMaybe<StringQueryOperatorInput>;
  readonly tagline: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type STRAPI_BRANDGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_BRANDEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_BRANDGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_BRAND>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_BRANDGroupConnection_distinctArgs = {
  field: STRAPI_BRANDFieldSelector;
};


type STRAPI_BRANDGroupConnection_groupArgs = {
  field: STRAPI_BRANDFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_BRANDGroupConnection_maxArgs = {
  field: STRAPI_BRANDFieldSelector;
};


type STRAPI_BRANDGroupConnection_minArgs = {
  field: STRAPI_BRANDFieldSelector;
};


type STRAPI_BRANDGroupConnection_sumArgs = {
  field: STRAPI_BRANDFieldSelector;
};

type STRAPI_BRANDSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly publishedAt: InputMaybe<SortOrderEnum>;
  readonly retail: InputMaybe<STRAPI_RETAILSortInput>;
  readonly slug: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly svg: InputMaybe<SortOrderEnum>;
  readonly tagline: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type STRAPI_DEMO = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly text: Maybe<STRAPI_DEMOText>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type STRAPI_DEMO_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_DEMO_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_DEMO_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_DEMOConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_DEMOEdge>;
  readonly group: ReadonlyArray<STRAPI_DEMOGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_DEMO>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_DEMOConnection_distinctArgs = {
  field: STRAPI_DEMOFieldSelector;
};


type STRAPI_DEMOConnection_groupArgs = {
  field: STRAPI_DEMOFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_DEMOConnection_maxArgs = {
  field: STRAPI_DEMOFieldSelector;
};


type STRAPI_DEMOConnection_minArgs = {
  field: STRAPI_DEMOFieldSelector;
};


type STRAPI_DEMOConnection_sumArgs = {
  field: STRAPI_DEMOFieldSelector;
};

type STRAPI_DEMOEdge = {
  readonly next: Maybe<STRAPI_DEMO>;
  readonly node: STRAPI_DEMO;
  readonly previous: Maybe<STRAPI_DEMO>;
};

type STRAPI_DEMOFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly publishedAt: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<STRAPI_DEMOTextFieldSelector>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_DEMOFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly text: InputMaybe<STRAPI_DEMOTextFilterInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type STRAPI_DEMOGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_DEMOEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_DEMOGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_DEMO>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_DEMOGroupConnection_distinctArgs = {
  field: STRAPI_DEMOFieldSelector;
};


type STRAPI_DEMOGroupConnection_groupArgs = {
  field: STRAPI_DEMOFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_DEMOGroupConnection_maxArgs = {
  field: STRAPI_DEMOFieldSelector;
};


type STRAPI_DEMOGroupConnection_minArgs = {
  field: STRAPI_DEMOFieldSelector;
};


type STRAPI_DEMOGroupConnection_sumArgs = {
  field: STRAPI_DEMOFieldSelector;
};

type STRAPI_DEMOSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly publishedAt: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<STRAPI_DEMOTextSortInput>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type STRAPI_DEMOText = {
  readonly data: Maybe<STRAPI_DEMO_TEXT_TEXTNODE>;
};

type STRAPI_DEMOTextFieldSelector = {
  readonly data: InputMaybe<STRAPI_DEMO_TEXT_TEXTNODEFieldSelector>;
};

type STRAPI_DEMOTextFilterInput = {
  readonly data: InputMaybe<STRAPI_DEMO_TEXT_TEXTNODEFilterInput>;
};

type STRAPI_DEMOTextSortInput = {
  readonly data: InputMaybe<STRAPI_DEMO_TEXT_TEXTNODESortInput>;
};

type STRAPI_DEMO_TEXT_TEXTNODE = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly text: Maybe<Scalars['String']>;
};

type STRAPI_DEMO_TEXT_TEXTNODEConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_DEMO_TEXT_TEXTNODEEdge>;
  readonly group: ReadonlyArray<STRAPI_DEMO_TEXT_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_DEMO_TEXT_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_DEMO_TEXT_TEXTNODEConnection_distinctArgs = {
  field: STRAPI_DEMO_TEXT_TEXTNODEFieldSelector;
};


type STRAPI_DEMO_TEXT_TEXTNODEConnection_groupArgs = {
  field: STRAPI_DEMO_TEXT_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_DEMO_TEXT_TEXTNODEConnection_maxArgs = {
  field: STRAPI_DEMO_TEXT_TEXTNODEFieldSelector;
};


type STRAPI_DEMO_TEXT_TEXTNODEConnection_minArgs = {
  field: STRAPI_DEMO_TEXT_TEXTNODEFieldSelector;
};


type STRAPI_DEMO_TEXT_TEXTNODEConnection_sumArgs = {
  field: STRAPI_DEMO_TEXT_TEXTNODEFieldSelector;
};

type STRAPI_DEMO_TEXT_TEXTNODEEdge = {
  readonly next: Maybe<STRAPI_DEMO_TEXT_TEXTNODE>;
  readonly node: STRAPI_DEMO_TEXT_TEXTNODE;
  readonly previous: Maybe<STRAPI_DEMO_TEXT_TEXTNODE>;
};

type STRAPI_DEMO_TEXT_TEXTNODEFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly text: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_DEMO_TEXT_TEXTNODEFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly text: InputMaybe<StringQueryOperatorInput>;
};

type STRAPI_DEMO_TEXT_TEXTNODEGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_DEMO_TEXT_TEXTNODEEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_DEMO_TEXT_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_DEMO_TEXT_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_DEMO_TEXT_TEXTNODEGroupConnection_distinctArgs = {
  field: STRAPI_DEMO_TEXT_TEXTNODEFieldSelector;
};


type STRAPI_DEMO_TEXT_TEXTNODEGroupConnection_groupArgs = {
  field: STRAPI_DEMO_TEXT_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_DEMO_TEXT_TEXTNODEGroupConnection_maxArgs = {
  field: STRAPI_DEMO_TEXT_TEXTNODEFieldSelector;
};


type STRAPI_DEMO_TEXT_TEXTNODEGroupConnection_minArgs = {
  field: STRAPI_DEMO_TEXT_TEXTNODEFieldSelector;
};


type STRAPI_DEMO_TEXT_TEXTNODEGroupConnection_sumArgs = {
  field: STRAPI_DEMO_TEXT_TEXTNODEFieldSelector;
};

type STRAPI_DEMO_TEXT_TEXTNODESortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly text: InputMaybe<SortOrderEnum>;
};

type STRAPI_EVENT = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly finish: Maybe<Scalars['Date']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly name: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly start: Maybe<Scalars['Date']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly topbar: Maybe<Scalars['String']>;
  readonly tour: Maybe<STRAPI_TOUR>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type STRAPI_EVENT_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_EVENT_finishArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_EVENT_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_EVENT_startArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_EVENT_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_EVENTConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_EVENTEdge>;
  readonly group: ReadonlyArray<STRAPI_EVENTGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_EVENT>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_EVENTConnection_distinctArgs = {
  field: STRAPI_EVENTFieldSelector;
};


type STRAPI_EVENTConnection_groupArgs = {
  field: STRAPI_EVENTFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_EVENTConnection_maxArgs = {
  field: STRAPI_EVENTFieldSelector;
};


type STRAPI_EVENTConnection_minArgs = {
  field: STRAPI_EVENTFieldSelector;
};


type STRAPI_EVENTConnection_sumArgs = {
  field: STRAPI_EVENTFieldSelector;
};

type STRAPI_EVENTEdge = {
  readonly next: Maybe<STRAPI_EVENT>;
  readonly node: STRAPI_EVENT;
  readonly previous: Maybe<STRAPI_EVENT>;
};

type STRAPI_EVENTFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly finish: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly publishedAt: InputMaybe<FieldSelectorEnum>;
  readonly start: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly topbar: InputMaybe<FieldSelectorEnum>;
  readonly tour: InputMaybe<STRAPI_TOURFieldSelector>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_EVENTFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly finish: InputMaybe<DateQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly start: InputMaybe<DateQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly topbar: InputMaybe<StringQueryOperatorInput>;
  readonly tour: InputMaybe<STRAPI_TOURFilterInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type STRAPI_EVENTGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_EVENTEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_EVENTGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_EVENT>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_EVENTGroupConnection_distinctArgs = {
  field: STRAPI_EVENTFieldSelector;
};


type STRAPI_EVENTGroupConnection_groupArgs = {
  field: STRAPI_EVENTFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_EVENTGroupConnection_maxArgs = {
  field: STRAPI_EVENTFieldSelector;
};


type STRAPI_EVENTGroupConnection_minArgs = {
  field: STRAPI_EVENTFieldSelector;
};


type STRAPI_EVENTGroupConnection_sumArgs = {
  field: STRAPI_EVENTFieldSelector;
};

type STRAPI_EVENTSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly finish: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly publishedAt: InputMaybe<SortOrderEnum>;
  readonly start: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly topbar: InputMaybe<SortOrderEnum>;
  readonly tour: InputMaybe<STRAPI_TOURSortInput>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type STRAPI_EXPERIENCE = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly text: Maybe<STRAPI_EXPERIENCEText>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type STRAPI_EXPERIENCE_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_EXPERIENCE_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_EXPERIENCE_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_EXPERIENCEConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_EXPERIENCEEdge>;
  readonly group: ReadonlyArray<STRAPI_EXPERIENCEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_EXPERIENCE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_EXPERIENCEConnection_distinctArgs = {
  field: STRAPI_EXPERIENCEFieldSelector;
};


type STRAPI_EXPERIENCEConnection_groupArgs = {
  field: STRAPI_EXPERIENCEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_EXPERIENCEConnection_maxArgs = {
  field: STRAPI_EXPERIENCEFieldSelector;
};


type STRAPI_EXPERIENCEConnection_minArgs = {
  field: STRAPI_EXPERIENCEFieldSelector;
};


type STRAPI_EXPERIENCEConnection_sumArgs = {
  field: STRAPI_EXPERIENCEFieldSelector;
};

type STRAPI_EXPERIENCEEdge = {
  readonly next: Maybe<STRAPI_EXPERIENCE>;
  readonly node: STRAPI_EXPERIENCE;
  readonly previous: Maybe<STRAPI_EXPERIENCE>;
};

type STRAPI_EXPERIENCEFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly publishedAt: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<STRAPI_EXPERIENCETextFieldSelector>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_EXPERIENCEFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly text: InputMaybe<STRAPI_EXPERIENCETextFilterInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type STRAPI_EXPERIENCEGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_EXPERIENCEEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_EXPERIENCEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_EXPERIENCE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_EXPERIENCEGroupConnection_distinctArgs = {
  field: STRAPI_EXPERIENCEFieldSelector;
};


type STRAPI_EXPERIENCEGroupConnection_groupArgs = {
  field: STRAPI_EXPERIENCEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_EXPERIENCEGroupConnection_maxArgs = {
  field: STRAPI_EXPERIENCEFieldSelector;
};


type STRAPI_EXPERIENCEGroupConnection_minArgs = {
  field: STRAPI_EXPERIENCEFieldSelector;
};


type STRAPI_EXPERIENCEGroupConnection_sumArgs = {
  field: STRAPI_EXPERIENCEFieldSelector;
};

type STRAPI_EXPERIENCESortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly publishedAt: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<STRAPI_EXPERIENCETextSortInput>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type STRAPI_EXPERIENCEText = {
  readonly data: Maybe<STRAPI_EXPERIENCE_TEXT_TEXTNODE>;
};

type STRAPI_EXPERIENCETextFieldSelector = {
  readonly data: InputMaybe<STRAPI_EXPERIENCE_TEXT_TEXTNODEFieldSelector>;
};

type STRAPI_EXPERIENCETextFilterInput = {
  readonly data: InputMaybe<STRAPI_EXPERIENCE_TEXT_TEXTNODEFilterInput>;
};

type STRAPI_EXPERIENCETextSortInput = {
  readonly data: InputMaybe<STRAPI_EXPERIENCE_TEXT_TEXTNODESortInput>;
};

type STRAPI_EXPERIENCE_TEXT_TEXTNODE = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly text: Maybe<Scalars['String']>;
};

type STRAPI_EXPERIENCE_TEXT_TEXTNODEConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_EXPERIENCE_TEXT_TEXTNODEEdge>;
  readonly group: ReadonlyArray<STRAPI_EXPERIENCE_TEXT_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_EXPERIENCE_TEXT_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_EXPERIENCE_TEXT_TEXTNODEConnection_distinctArgs = {
  field: STRAPI_EXPERIENCE_TEXT_TEXTNODEFieldSelector;
};


type STRAPI_EXPERIENCE_TEXT_TEXTNODEConnection_groupArgs = {
  field: STRAPI_EXPERIENCE_TEXT_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_EXPERIENCE_TEXT_TEXTNODEConnection_maxArgs = {
  field: STRAPI_EXPERIENCE_TEXT_TEXTNODEFieldSelector;
};


type STRAPI_EXPERIENCE_TEXT_TEXTNODEConnection_minArgs = {
  field: STRAPI_EXPERIENCE_TEXT_TEXTNODEFieldSelector;
};


type STRAPI_EXPERIENCE_TEXT_TEXTNODEConnection_sumArgs = {
  field: STRAPI_EXPERIENCE_TEXT_TEXTNODEFieldSelector;
};

type STRAPI_EXPERIENCE_TEXT_TEXTNODEEdge = {
  readonly next: Maybe<STRAPI_EXPERIENCE_TEXT_TEXTNODE>;
  readonly node: STRAPI_EXPERIENCE_TEXT_TEXTNODE;
  readonly previous: Maybe<STRAPI_EXPERIENCE_TEXT_TEXTNODE>;
};

type STRAPI_EXPERIENCE_TEXT_TEXTNODEFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly text: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_EXPERIENCE_TEXT_TEXTNODEFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly text: InputMaybe<StringQueryOperatorInput>;
};

type STRAPI_EXPERIENCE_TEXT_TEXTNODEGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_EXPERIENCE_TEXT_TEXTNODEEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_EXPERIENCE_TEXT_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_EXPERIENCE_TEXT_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_EXPERIENCE_TEXT_TEXTNODEGroupConnection_distinctArgs = {
  field: STRAPI_EXPERIENCE_TEXT_TEXTNODEFieldSelector;
};


type STRAPI_EXPERIENCE_TEXT_TEXTNODEGroupConnection_groupArgs = {
  field: STRAPI_EXPERIENCE_TEXT_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_EXPERIENCE_TEXT_TEXTNODEGroupConnection_maxArgs = {
  field: STRAPI_EXPERIENCE_TEXT_TEXTNODEFieldSelector;
};


type STRAPI_EXPERIENCE_TEXT_TEXTNODEGroupConnection_minArgs = {
  field: STRAPI_EXPERIENCE_TEXT_TEXTNODEFieldSelector;
};


type STRAPI_EXPERIENCE_TEXT_TEXTNODEGroupConnection_sumArgs = {
  field: STRAPI_EXPERIENCE_TEXT_TEXTNODEFieldSelector;
};

type STRAPI_EXPERIENCE_TEXT_TEXTNODESortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly text: InputMaybe<SortOrderEnum>;
};

type STRAPI_FAQ = Node & {
  readonly answer: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly question: Maybe<Scalars['String']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type STRAPI_FAQ_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_FAQ_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_FAQ_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_FAQConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_FAQEdge>;
  readonly group: ReadonlyArray<STRAPI_FAQGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_FAQ>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_FAQConnection_distinctArgs = {
  field: STRAPI_FAQFieldSelector;
};


type STRAPI_FAQConnection_groupArgs = {
  field: STRAPI_FAQFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_FAQConnection_maxArgs = {
  field: STRAPI_FAQFieldSelector;
};


type STRAPI_FAQConnection_minArgs = {
  field: STRAPI_FAQFieldSelector;
};


type STRAPI_FAQConnection_sumArgs = {
  field: STRAPI_FAQFieldSelector;
};

type STRAPI_FAQEdge = {
  readonly next: Maybe<STRAPI_FAQ>;
  readonly node: STRAPI_FAQ;
  readonly previous: Maybe<STRAPI_FAQ>;
};

type STRAPI_FAQFieldSelector = {
  readonly answer: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly publishedAt: InputMaybe<FieldSelectorEnum>;
  readonly question: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_FAQFilterInput = {
  readonly answer: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly question: InputMaybe<StringQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type STRAPI_FAQGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_FAQEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_FAQGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_FAQ>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_FAQGroupConnection_distinctArgs = {
  field: STRAPI_FAQFieldSelector;
};


type STRAPI_FAQGroupConnection_groupArgs = {
  field: STRAPI_FAQFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_FAQGroupConnection_maxArgs = {
  field: STRAPI_FAQFieldSelector;
};


type STRAPI_FAQGroupConnection_minArgs = {
  field: STRAPI_FAQFieldSelector;
};


type STRAPI_FAQGroupConnection_sumArgs = {
  field: STRAPI_FAQFieldSelector;
};

type STRAPI_FAQSortInput = {
  readonly answer: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly publishedAt: InputMaybe<SortOrderEnum>;
  readonly question: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type STRAPI_IMAGEGRAB = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly id: Scalars['ID'];
  readonly image: Maybe<STRAPI__MEDIA>;
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly title: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type STRAPI_IMAGEGRAB_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_IMAGEGRAB_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_IMAGEGRAB_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_IMAGEGRABConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_IMAGEGRABEdge>;
  readonly group: ReadonlyArray<STRAPI_IMAGEGRABGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_IMAGEGRAB>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_IMAGEGRABConnection_distinctArgs = {
  field: STRAPI_IMAGEGRABFieldSelector;
};


type STRAPI_IMAGEGRABConnection_groupArgs = {
  field: STRAPI_IMAGEGRABFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_IMAGEGRABConnection_maxArgs = {
  field: STRAPI_IMAGEGRABFieldSelector;
};


type STRAPI_IMAGEGRABConnection_minArgs = {
  field: STRAPI_IMAGEGRABFieldSelector;
};


type STRAPI_IMAGEGRABConnection_sumArgs = {
  field: STRAPI_IMAGEGRABFieldSelector;
};

type STRAPI_IMAGEGRABEdge = {
  readonly next: Maybe<STRAPI_IMAGEGRAB>;
  readonly node: STRAPI_IMAGEGRAB;
  readonly previous: Maybe<STRAPI_IMAGEGRAB>;
};

type STRAPI_IMAGEGRABFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly image: InputMaybe<STRAPI__MEDIAFieldSelector>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly publishedAt: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_IMAGEGRABFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<STRAPI__MEDIAFilterInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type STRAPI_IMAGEGRABGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_IMAGEGRABEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_IMAGEGRABGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_IMAGEGRAB>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_IMAGEGRABGroupConnection_distinctArgs = {
  field: STRAPI_IMAGEGRABFieldSelector;
};


type STRAPI_IMAGEGRABGroupConnection_groupArgs = {
  field: STRAPI_IMAGEGRABFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_IMAGEGRABGroupConnection_maxArgs = {
  field: STRAPI_IMAGEGRABFieldSelector;
};


type STRAPI_IMAGEGRABGroupConnection_minArgs = {
  field: STRAPI_IMAGEGRABFieldSelector;
};


type STRAPI_IMAGEGRABGroupConnection_sumArgs = {
  field: STRAPI_IMAGEGRABFieldSelector;
};

type STRAPI_IMAGEGRABSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly image: InputMaybe<STRAPI__MEDIASortInput>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly publishedAt: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type STRAPI_JOB = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly description: Maybe<STRAPI_JOBDescription>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly locales: Maybe<ReadonlyArray<Maybe<STRAPI_LOCALE>>>;
  readonly parent: Maybe<Node>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly title: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type STRAPI_JOB_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_JOB_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_JOB_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_JOBConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_JOBEdge>;
  readonly group: ReadonlyArray<STRAPI_JOBGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_JOB>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_JOBConnection_distinctArgs = {
  field: STRAPI_JOBFieldSelector;
};


type STRAPI_JOBConnection_groupArgs = {
  field: STRAPI_JOBFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_JOBConnection_maxArgs = {
  field: STRAPI_JOBFieldSelector;
};


type STRAPI_JOBConnection_minArgs = {
  field: STRAPI_JOBFieldSelector;
};


type STRAPI_JOBConnection_sumArgs = {
  field: STRAPI_JOBFieldSelector;
};

type STRAPI_JOBDescription = {
  readonly data: Maybe<STRAPI_JOB_DESCRIPTION_TEXTNODE>;
};

type STRAPI_JOBDescriptionFieldSelector = {
  readonly data: InputMaybe<STRAPI_JOB_DESCRIPTION_TEXTNODEFieldSelector>;
};

type STRAPI_JOBDescriptionFilterInput = {
  readonly data: InputMaybe<STRAPI_JOB_DESCRIPTION_TEXTNODEFilterInput>;
};

type STRAPI_JOBDescriptionSortInput = {
  readonly data: InputMaybe<STRAPI_JOB_DESCRIPTION_TEXTNODESortInput>;
};

type STRAPI_JOBEdge = {
  readonly next: Maybe<STRAPI_JOB>;
  readonly node: STRAPI_JOB;
  readonly previous: Maybe<STRAPI_JOB>;
};

type STRAPI_JOBFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<STRAPI_JOBDescriptionFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly locales: InputMaybe<STRAPI_LOCALEFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly publishedAt: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_JOBFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly description: InputMaybe<STRAPI_JOBDescriptionFilterInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly locales: InputMaybe<STRAPI_LOCALEFilterListInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type STRAPI_JOBFilterListInput = {
  readonly elemMatch: InputMaybe<STRAPI_JOBFilterInput>;
};

type STRAPI_JOBGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_JOBEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_JOBGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_JOB>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_JOBGroupConnection_distinctArgs = {
  field: STRAPI_JOBFieldSelector;
};


type STRAPI_JOBGroupConnection_groupArgs = {
  field: STRAPI_JOBFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_JOBGroupConnection_maxArgs = {
  field: STRAPI_JOBFieldSelector;
};


type STRAPI_JOBGroupConnection_minArgs = {
  field: STRAPI_JOBFieldSelector;
};


type STRAPI_JOBGroupConnection_sumArgs = {
  field: STRAPI_JOBFieldSelector;
};

type STRAPI_JOBSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<STRAPI_JOBDescriptionSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly locales: InputMaybe<STRAPI_LOCALESortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly publishedAt: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type STRAPI_JOB_DESCRIPTION_TEXTNODE = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly description: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type STRAPI_JOB_DESCRIPTION_TEXTNODEConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_JOB_DESCRIPTION_TEXTNODEEdge>;
  readonly group: ReadonlyArray<STRAPI_JOB_DESCRIPTION_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_JOB_DESCRIPTION_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_JOB_DESCRIPTION_TEXTNODEConnection_distinctArgs = {
  field: STRAPI_JOB_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_JOB_DESCRIPTION_TEXTNODEConnection_groupArgs = {
  field: STRAPI_JOB_DESCRIPTION_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_JOB_DESCRIPTION_TEXTNODEConnection_maxArgs = {
  field: STRAPI_JOB_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_JOB_DESCRIPTION_TEXTNODEConnection_minArgs = {
  field: STRAPI_JOB_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_JOB_DESCRIPTION_TEXTNODEConnection_sumArgs = {
  field: STRAPI_JOB_DESCRIPTION_TEXTNODEFieldSelector;
};

type STRAPI_JOB_DESCRIPTION_TEXTNODEEdge = {
  readonly next: Maybe<STRAPI_JOB_DESCRIPTION_TEXTNODE>;
  readonly node: STRAPI_JOB_DESCRIPTION_TEXTNODE;
  readonly previous: Maybe<STRAPI_JOB_DESCRIPTION_TEXTNODE>;
};

type STRAPI_JOB_DESCRIPTION_TEXTNODEFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type STRAPI_JOB_DESCRIPTION_TEXTNODEFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type STRAPI_JOB_DESCRIPTION_TEXTNODEGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_JOB_DESCRIPTION_TEXTNODEEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_JOB_DESCRIPTION_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_JOB_DESCRIPTION_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_JOB_DESCRIPTION_TEXTNODEGroupConnection_distinctArgs = {
  field: STRAPI_JOB_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_JOB_DESCRIPTION_TEXTNODEGroupConnection_groupArgs = {
  field: STRAPI_JOB_DESCRIPTION_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_JOB_DESCRIPTION_TEXTNODEGroupConnection_maxArgs = {
  field: STRAPI_JOB_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_JOB_DESCRIPTION_TEXTNODEGroupConnection_minArgs = {
  field: STRAPI_JOB_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_JOB_DESCRIPTION_TEXTNODEGroupConnection_sumArgs = {
  field: STRAPI_JOB_DESCRIPTION_TEXTNODEFieldSelector;
};

type STRAPI_JOB_DESCRIPTION_TEXTNODESortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type STRAPI_LOCALE = Node & {
  readonly about: Maybe<STRAPI_LOCALEAbout>;
  readonly announcements: Maybe<ReadonlyArray<Maybe<STRAPI_ANNOUNCEMENT>>>;
  readonly children: ReadonlyArray<Node>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly email: Maybe<Scalars['String']>;
  readonly facebook: Maybe<Scalars['String']>;
  readonly geoRadius: Maybe<Scalars['Int']>;
  readonly id: Scalars['ID'];
  readonly instagram: Maybe<Scalars['String']>;
  readonly internal: Internal;
  readonly jobs: Maybe<ReadonlyArray<Maybe<STRAPI_JOB>>>;
  readonly latitude: Maybe<Scalars['Float']>;
  readonly locations: Maybe<ReadonlyArray<Maybe<STRAPI_LOCATION>>>;
  readonly longitude: Maybe<Scalars['Float']>;
  readonly name: Maybe<Scalars['String']>;
  readonly numberOfEmployees: Maybe<Scalars['String']>;
  readonly ogImage: Maybe<Scalars['String']>;
  readonly ogimagedescription: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly peek_base: Maybe<Scalars['String']>;
  readonly peek_double: Maybe<Scalars['String']>;
  readonly peek_paddleboard: Maybe<Scalars['String']>;
  readonly peek_rentals: Maybe<Scalars['String']>;
  readonly peek_single: Maybe<Scalars['String']>;
  readonly peek_tours: Maybe<Scalars['String']>;
  readonly phone: Maybe<Scalars['String']>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly season_end: Maybe<Scalars['Date']>;
  readonly season_start: Maybe<Scalars['Date']>;
  readonly slug: Maybe<Scalars['String']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly teams: Maybe<ReadonlyArray<Maybe<STRAPI_TEAM>>>;
  readonly testimonials: Maybe<ReadonlyArray<Maybe<STRAPI_TESTIMONIAL>>>;
  readonly themeColor: Maybe<Scalars['String']>;
  readonly topbar: Maybe<STRAPI_LOCALETopbar>;
  readonly tours: Maybe<ReadonlyArray<Maybe<STRAPI_TOUR>>>;
  readonly tripadvisor: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
  readonly url: Maybe<Scalars['String']>;
};


type STRAPI_LOCALE_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_LOCALE_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_LOCALE_season_endArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_LOCALE_season_startArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_LOCALE_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_LOCALEAbout = {
  readonly data: Maybe<STRAPI_LOCALE_ABOUT_TEXTNODE>;
};

type STRAPI_LOCALEAboutFieldSelector = {
  readonly data: InputMaybe<STRAPI_LOCALE_ABOUT_TEXTNODEFieldSelector>;
};

type STRAPI_LOCALEAboutFilterInput = {
  readonly data: InputMaybe<STRAPI_LOCALE_ABOUT_TEXTNODEFilterInput>;
};

type STRAPI_LOCALEAboutSortInput = {
  readonly data: InputMaybe<STRAPI_LOCALE_ABOUT_TEXTNODESortInput>;
};

type STRAPI_LOCALEConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_LOCALEEdge>;
  readonly group: ReadonlyArray<STRAPI_LOCALEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_LOCALE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_LOCALEConnection_distinctArgs = {
  field: STRAPI_LOCALEFieldSelector;
};


type STRAPI_LOCALEConnection_groupArgs = {
  field: STRAPI_LOCALEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_LOCALEConnection_maxArgs = {
  field: STRAPI_LOCALEFieldSelector;
};


type STRAPI_LOCALEConnection_minArgs = {
  field: STRAPI_LOCALEFieldSelector;
};


type STRAPI_LOCALEConnection_sumArgs = {
  field: STRAPI_LOCALEFieldSelector;
};

type STRAPI_LOCALEEdge = {
  readonly next: Maybe<STRAPI_LOCALE>;
  readonly node: STRAPI_LOCALE;
  readonly previous: Maybe<STRAPI_LOCALE>;
};

type STRAPI_LOCALEFieldSelector = {
  readonly about: InputMaybe<STRAPI_LOCALEAboutFieldSelector>;
  readonly announcements: InputMaybe<STRAPI_ANNOUNCEMENTFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly email: InputMaybe<FieldSelectorEnum>;
  readonly facebook: InputMaybe<FieldSelectorEnum>;
  readonly geoRadius: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly instagram: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly jobs: InputMaybe<STRAPI_JOBFieldSelector>;
  readonly latitude: InputMaybe<FieldSelectorEnum>;
  readonly locations: InputMaybe<STRAPI_LOCATIONFieldSelector>;
  readonly longitude: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly numberOfEmployees: InputMaybe<FieldSelectorEnum>;
  readonly ogImage: InputMaybe<FieldSelectorEnum>;
  readonly ogimagedescription: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly peek_base: InputMaybe<FieldSelectorEnum>;
  readonly peek_double: InputMaybe<FieldSelectorEnum>;
  readonly peek_paddleboard: InputMaybe<FieldSelectorEnum>;
  readonly peek_rentals: InputMaybe<FieldSelectorEnum>;
  readonly peek_single: InputMaybe<FieldSelectorEnum>;
  readonly peek_tours: InputMaybe<FieldSelectorEnum>;
  readonly phone: InputMaybe<FieldSelectorEnum>;
  readonly publishedAt: InputMaybe<FieldSelectorEnum>;
  readonly season_end: InputMaybe<FieldSelectorEnum>;
  readonly season_start: InputMaybe<FieldSelectorEnum>;
  readonly slug: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly teams: InputMaybe<STRAPI_TEAMFieldSelector>;
  readonly testimonials: InputMaybe<STRAPI_TESTIMONIALFieldSelector>;
  readonly themeColor: InputMaybe<FieldSelectorEnum>;
  readonly topbar: InputMaybe<STRAPI_LOCALETopbarFieldSelector>;
  readonly tours: InputMaybe<STRAPI_TOURFieldSelector>;
  readonly tripadvisor: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_LOCALEFilterInput = {
  readonly about: InputMaybe<STRAPI_LOCALEAboutFilterInput>;
  readonly announcements: InputMaybe<STRAPI_ANNOUNCEMENTFilterListInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly email: InputMaybe<StringQueryOperatorInput>;
  readonly facebook: InputMaybe<StringQueryOperatorInput>;
  readonly geoRadius: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly instagram: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly jobs: InputMaybe<STRAPI_JOBFilterListInput>;
  readonly latitude: InputMaybe<FloatQueryOperatorInput>;
  readonly locations: InputMaybe<STRAPI_LOCATIONFilterListInput>;
  readonly longitude: InputMaybe<FloatQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly numberOfEmployees: InputMaybe<StringQueryOperatorInput>;
  readonly ogImage: InputMaybe<StringQueryOperatorInput>;
  readonly ogimagedescription: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly peek_base: InputMaybe<StringQueryOperatorInput>;
  readonly peek_double: InputMaybe<StringQueryOperatorInput>;
  readonly peek_paddleboard: InputMaybe<StringQueryOperatorInput>;
  readonly peek_rentals: InputMaybe<StringQueryOperatorInput>;
  readonly peek_single: InputMaybe<StringQueryOperatorInput>;
  readonly peek_tours: InputMaybe<StringQueryOperatorInput>;
  readonly phone: InputMaybe<StringQueryOperatorInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly season_end: InputMaybe<DateQueryOperatorInput>;
  readonly season_start: InputMaybe<DateQueryOperatorInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly teams: InputMaybe<STRAPI_TEAMFilterListInput>;
  readonly testimonials: InputMaybe<STRAPI_TESTIMONIALFilterListInput>;
  readonly themeColor: InputMaybe<StringQueryOperatorInput>;
  readonly topbar: InputMaybe<STRAPI_LOCALETopbarFilterInput>;
  readonly tours: InputMaybe<STRAPI_TOURFilterListInput>;
  readonly tripadvisor: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type STRAPI_LOCALEFilterListInput = {
  readonly elemMatch: InputMaybe<STRAPI_LOCALEFilterInput>;
};

type STRAPI_LOCALEGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_LOCALEEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_LOCALEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_LOCALE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_LOCALEGroupConnection_distinctArgs = {
  field: STRAPI_LOCALEFieldSelector;
};


type STRAPI_LOCALEGroupConnection_groupArgs = {
  field: STRAPI_LOCALEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_LOCALEGroupConnection_maxArgs = {
  field: STRAPI_LOCALEFieldSelector;
};


type STRAPI_LOCALEGroupConnection_minArgs = {
  field: STRAPI_LOCALEFieldSelector;
};


type STRAPI_LOCALEGroupConnection_sumArgs = {
  field: STRAPI_LOCALEFieldSelector;
};

type STRAPI_LOCALESortInput = {
  readonly about: InputMaybe<STRAPI_LOCALEAboutSortInput>;
  readonly announcements: InputMaybe<STRAPI_ANNOUNCEMENTSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly email: InputMaybe<SortOrderEnum>;
  readonly facebook: InputMaybe<SortOrderEnum>;
  readonly geoRadius: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly instagram: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly jobs: InputMaybe<STRAPI_JOBSortInput>;
  readonly latitude: InputMaybe<SortOrderEnum>;
  readonly locations: InputMaybe<STRAPI_LOCATIONSortInput>;
  readonly longitude: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly numberOfEmployees: InputMaybe<SortOrderEnum>;
  readonly ogImage: InputMaybe<SortOrderEnum>;
  readonly ogimagedescription: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly peek_base: InputMaybe<SortOrderEnum>;
  readonly peek_double: InputMaybe<SortOrderEnum>;
  readonly peek_paddleboard: InputMaybe<SortOrderEnum>;
  readonly peek_rentals: InputMaybe<SortOrderEnum>;
  readonly peek_single: InputMaybe<SortOrderEnum>;
  readonly peek_tours: InputMaybe<SortOrderEnum>;
  readonly phone: InputMaybe<SortOrderEnum>;
  readonly publishedAt: InputMaybe<SortOrderEnum>;
  readonly season_end: InputMaybe<SortOrderEnum>;
  readonly season_start: InputMaybe<SortOrderEnum>;
  readonly slug: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly teams: InputMaybe<STRAPI_TEAMSortInput>;
  readonly testimonials: InputMaybe<STRAPI_TESTIMONIALSortInput>;
  readonly themeColor: InputMaybe<SortOrderEnum>;
  readonly topbar: InputMaybe<STRAPI_LOCALETopbarSortInput>;
  readonly tours: InputMaybe<STRAPI_TOURSortInput>;
  readonly tripadvisor: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
};

type STRAPI_LOCALETopbar = {
  readonly data: Maybe<STRAPI_LOCALE_TOPBAR_TEXTNODE>;
};

type STRAPI_LOCALETopbarFieldSelector = {
  readonly data: InputMaybe<STRAPI_LOCALE_TOPBAR_TEXTNODEFieldSelector>;
};

type STRAPI_LOCALETopbarFilterInput = {
  readonly data: InputMaybe<STRAPI_LOCALE_TOPBAR_TEXTNODEFilterInput>;
};

type STRAPI_LOCALETopbarSortInput = {
  readonly data: InputMaybe<STRAPI_LOCALE_TOPBAR_TEXTNODESortInput>;
};

type STRAPI_LOCALE_ABOUT_TEXTNODE = Node & {
  readonly about: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type STRAPI_LOCALE_ABOUT_TEXTNODEConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_LOCALE_ABOUT_TEXTNODEEdge>;
  readonly group: ReadonlyArray<STRAPI_LOCALE_ABOUT_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_LOCALE_ABOUT_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_LOCALE_ABOUT_TEXTNODEConnection_distinctArgs = {
  field: STRAPI_LOCALE_ABOUT_TEXTNODEFieldSelector;
};


type STRAPI_LOCALE_ABOUT_TEXTNODEConnection_groupArgs = {
  field: STRAPI_LOCALE_ABOUT_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_LOCALE_ABOUT_TEXTNODEConnection_maxArgs = {
  field: STRAPI_LOCALE_ABOUT_TEXTNODEFieldSelector;
};


type STRAPI_LOCALE_ABOUT_TEXTNODEConnection_minArgs = {
  field: STRAPI_LOCALE_ABOUT_TEXTNODEFieldSelector;
};


type STRAPI_LOCALE_ABOUT_TEXTNODEConnection_sumArgs = {
  field: STRAPI_LOCALE_ABOUT_TEXTNODEFieldSelector;
};

type STRAPI_LOCALE_ABOUT_TEXTNODEEdge = {
  readonly next: Maybe<STRAPI_LOCALE_ABOUT_TEXTNODE>;
  readonly node: STRAPI_LOCALE_ABOUT_TEXTNODE;
  readonly previous: Maybe<STRAPI_LOCALE_ABOUT_TEXTNODE>;
};

type STRAPI_LOCALE_ABOUT_TEXTNODEFieldSelector = {
  readonly about: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type STRAPI_LOCALE_ABOUT_TEXTNODEFilterInput = {
  readonly about: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type STRAPI_LOCALE_ABOUT_TEXTNODEGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_LOCALE_ABOUT_TEXTNODEEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_LOCALE_ABOUT_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_LOCALE_ABOUT_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_LOCALE_ABOUT_TEXTNODEGroupConnection_distinctArgs = {
  field: STRAPI_LOCALE_ABOUT_TEXTNODEFieldSelector;
};


type STRAPI_LOCALE_ABOUT_TEXTNODEGroupConnection_groupArgs = {
  field: STRAPI_LOCALE_ABOUT_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_LOCALE_ABOUT_TEXTNODEGroupConnection_maxArgs = {
  field: STRAPI_LOCALE_ABOUT_TEXTNODEFieldSelector;
};


type STRAPI_LOCALE_ABOUT_TEXTNODEGroupConnection_minArgs = {
  field: STRAPI_LOCALE_ABOUT_TEXTNODEFieldSelector;
};


type STRAPI_LOCALE_ABOUT_TEXTNODEGroupConnection_sumArgs = {
  field: STRAPI_LOCALE_ABOUT_TEXTNODEFieldSelector;
};

type STRAPI_LOCALE_ABOUT_TEXTNODESortInput = {
  readonly about: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type STRAPI_LOCALE_TOPBAR_TEXTNODE = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly topbar: Maybe<Scalars['String']>;
};

type STRAPI_LOCALE_TOPBAR_TEXTNODEConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_LOCALE_TOPBAR_TEXTNODEEdge>;
  readonly group: ReadonlyArray<STRAPI_LOCALE_TOPBAR_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_LOCALE_TOPBAR_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_LOCALE_TOPBAR_TEXTNODEConnection_distinctArgs = {
  field: STRAPI_LOCALE_TOPBAR_TEXTNODEFieldSelector;
};


type STRAPI_LOCALE_TOPBAR_TEXTNODEConnection_groupArgs = {
  field: STRAPI_LOCALE_TOPBAR_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_LOCALE_TOPBAR_TEXTNODEConnection_maxArgs = {
  field: STRAPI_LOCALE_TOPBAR_TEXTNODEFieldSelector;
};


type STRAPI_LOCALE_TOPBAR_TEXTNODEConnection_minArgs = {
  field: STRAPI_LOCALE_TOPBAR_TEXTNODEFieldSelector;
};


type STRAPI_LOCALE_TOPBAR_TEXTNODEConnection_sumArgs = {
  field: STRAPI_LOCALE_TOPBAR_TEXTNODEFieldSelector;
};

type STRAPI_LOCALE_TOPBAR_TEXTNODEEdge = {
  readonly next: Maybe<STRAPI_LOCALE_TOPBAR_TEXTNODE>;
  readonly node: STRAPI_LOCALE_TOPBAR_TEXTNODE;
  readonly previous: Maybe<STRAPI_LOCALE_TOPBAR_TEXTNODE>;
};

type STRAPI_LOCALE_TOPBAR_TEXTNODEFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly topbar: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_LOCALE_TOPBAR_TEXTNODEFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly topbar: InputMaybe<StringQueryOperatorInput>;
};

type STRAPI_LOCALE_TOPBAR_TEXTNODEGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_LOCALE_TOPBAR_TEXTNODEEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_LOCALE_TOPBAR_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_LOCALE_TOPBAR_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_LOCALE_TOPBAR_TEXTNODEGroupConnection_distinctArgs = {
  field: STRAPI_LOCALE_TOPBAR_TEXTNODEFieldSelector;
};


type STRAPI_LOCALE_TOPBAR_TEXTNODEGroupConnection_groupArgs = {
  field: STRAPI_LOCALE_TOPBAR_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_LOCALE_TOPBAR_TEXTNODEGroupConnection_maxArgs = {
  field: STRAPI_LOCALE_TOPBAR_TEXTNODEFieldSelector;
};


type STRAPI_LOCALE_TOPBAR_TEXTNODEGroupConnection_minArgs = {
  field: STRAPI_LOCALE_TOPBAR_TEXTNODEFieldSelector;
};


type STRAPI_LOCALE_TOPBAR_TEXTNODEGroupConnection_sumArgs = {
  field: STRAPI_LOCALE_TOPBAR_TEXTNODEFieldSelector;
};

type STRAPI_LOCALE_TOPBAR_TEXTNODESortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly topbar: InputMaybe<SortOrderEnum>;
};

type STRAPI_LOCATION = Node & {
  readonly address: Maybe<STRAPI_LOCATIONAddress>;
  readonly addressLocality: Maybe<Scalars['String']>;
  readonly addressRegion: Maybe<Scalars['String']>;
  readonly announcements: Maybe<ReadonlyArray<Maybe<STRAPI_ANNOUNCEMENT>>>;
  readonly children: ReadonlyArray<Node>;
  readonly closing_time: Maybe<Scalars['String']>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly description: Maybe<STRAPI_LOCATIONDescription>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly link: Maybe<Scalars['String']>;
  readonly locale: Maybe<STRAPI_LOCALE>;
  readonly name: Maybe<Scalars['String']>;
  readonly opening_time: Maybe<Scalars['String']>;
  readonly order: Maybe<Scalars['Int']>;
  readonly parent: Maybe<Node>;
  readonly paymentAccepted: Maybe<Scalars['String']>;
  readonly postalCode: Maybe<Scalars['String']>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly streetAddress: Maybe<Scalars['String']>;
  readonly svg: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type STRAPI_LOCATION_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_LOCATION_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_LOCATION_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_LOCATIONAddress = {
  readonly data: Maybe<STRAPI_LOCATION_ADDRESS_TEXTNODE>;
};

type STRAPI_LOCATIONAddressFieldSelector = {
  readonly data: InputMaybe<STRAPI_LOCATION_ADDRESS_TEXTNODEFieldSelector>;
};

type STRAPI_LOCATIONAddressFilterInput = {
  readonly data: InputMaybe<STRAPI_LOCATION_ADDRESS_TEXTNODEFilterInput>;
};

type STRAPI_LOCATIONAddressSortInput = {
  readonly data: InputMaybe<STRAPI_LOCATION_ADDRESS_TEXTNODESortInput>;
};

type STRAPI_LOCATIONConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_LOCATIONEdge>;
  readonly group: ReadonlyArray<STRAPI_LOCATIONGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_LOCATION>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_LOCATIONConnection_distinctArgs = {
  field: STRAPI_LOCATIONFieldSelector;
};


type STRAPI_LOCATIONConnection_groupArgs = {
  field: STRAPI_LOCATIONFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_LOCATIONConnection_maxArgs = {
  field: STRAPI_LOCATIONFieldSelector;
};


type STRAPI_LOCATIONConnection_minArgs = {
  field: STRAPI_LOCATIONFieldSelector;
};


type STRAPI_LOCATIONConnection_sumArgs = {
  field: STRAPI_LOCATIONFieldSelector;
};

type STRAPI_LOCATIONDescription = {
  readonly data: Maybe<STRAPI_LOCATION_DESCRIPTION_TEXTNODE>;
};

type STRAPI_LOCATIONDescriptionFieldSelector = {
  readonly data: InputMaybe<STRAPI_LOCATION_DESCRIPTION_TEXTNODEFieldSelector>;
};

type STRAPI_LOCATIONDescriptionFilterInput = {
  readonly data: InputMaybe<STRAPI_LOCATION_DESCRIPTION_TEXTNODEFilterInput>;
};

type STRAPI_LOCATIONDescriptionSortInput = {
  readonly data: InputMaybe<STRAPI_LOCATION_DESCRIPTION_TEXTNODESortInput>;
};

type STRAPI_LOCATIONEdge = {
  readonly next: Maybe<STRAPI_LOCATION>;
  readonly node: STRAPI_LOCATION;
  readonly previous: Maybe<STRAPI_LOCATION>;
};

type STRAPI_LOCATIONFieldSelector = {
  readonly address: InputMaybe<STRAPI_LOCATIONAddressFieldSelector>;
  readonly addressLocality: InputMaybe<FieldSelectorEnum>;
  readonly addressRegion: InputMaybe<FieldSelectorEnum>;
  readonly announcements: InputMaybe<STRAPI_ANNOUNCEMENTFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly closing_time: InputMaybe<FieldSelectorEnum>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<STRAPI_LOCATIONDescriptionFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly link: InputMaybe<FieldSelectorEnum>;
  readonly locale: InputMaybe<STRAPI_LOCALEFieldSelector>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly opening_time: InputMaybe<FieldSelectorEnum>;
  readonly order: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly paymentAccepted: InputMaybe<FieldSelectorEnum>;
  readonly postalCode: InputMaybe<FieldSelectorEnum>;
  readonly publishedAt: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly streetAddress: InputMaybe<FieldSelectorEnum>;
  readonly svg: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_LOCATIONFilterInput = {
  readonly address: InputMaybe<STRAPI_LOCATIONAddressFilterInput>;
  readonly addressLocality: InputMaybe<StringQueryOperatorInput>;
  readonly addressRegion: InputMaybe<StringQueryOperatorInput>;
  readonly announcements: InputMaybe<STRAPI_ANNOUNCEMENTFilterListInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly closing_time: InputMaybe<StringQueryOperatorInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly description: InputMaybe<STRAPI_LOCATIONDescriptionFilterInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly link: InputMaybe<StringQueryOperatorInput>;
  readonly locale: InputMaybe<STRAPI_LOCALEFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly opening_time: InputMaybe<StringQueryOperatorInput>;
  readonly order: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly paymentAccepted: InputMaybe<StringQueryOperatorInput>;
  readonly postalCode: InputMaybe<StringQueryOperatorInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly streetAddress: InputMaybe<StringQueryOperatorInput>;
  readonly svg: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type STRAPI_LOCATIONFilterListInput = {
  readonly elemMatch: InputMaybe<STRAPI_LOCATIONFilterInput>;
};

type STRAPI_LOCATIONGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_LOCATIONEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_LOCATIONGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_LOCATION>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_LOCATIONGroupConnection_distinctArgs = {
  field: STRAPI_LOCATIONFieldSelector;
};


type STRAPI_LOCATIONGroupConnection_groupArgs = {
  field: STRAPI_LOCATIONFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_LOCATIONGroupConnection_maxArgs = {
  field: STRAPI_LOCATIONFieldSelector;
};


type STRAPI_LOCATIONGroupConnection_minArgs = {
  field: STRAPI_LOCATIONFieldSelector;
};


type STRAPI_LOCATIONGroupConnection_sumArgs = {
  field: STRAPI_LOCATIONFieldSelector;
};

type STRAPI_LOCATIONSortInput = {
  readonly address: InputMaybe<STRAPI_LOCATIONAddressSortInput>;
  readonly addressLocality: InputMaybe<SortOrderEnum>;
  readonly addressRegion: InputMaybe<SortOrderEnum>;
  readonly announcements: InputMaybe<STRAPI_ANNOUNCEMENTSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly closing_time: InputMaybe<SortOrderEnum>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<STRAPI_LOCATIONDescriptionSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly link: InputMaybe<SortOrderEnum>;
  readonly locale: InputMaybe<STRAPI_LOCALESortInput>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly opening_time: InputMaybe<SortOrderEnum>;
  readonly order: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly paymentAccepted: InputMaybe<SortOrderEnum>;
  readonly postalCode: InputMaybe<SortOrderEnum>;
  readonly publishedAt: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly streetAddress: InputMaybe<SortOrderEnum>;
  readonly svg: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type STRAPI_LOCATION_ADDRESS_TEXTNODE = Node & {
  readonly address: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type STRAPI_LOCATION_ADDRESS_TEXTNODEConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_LOCATION_ADDRESS_TEXTNODEEdge>;
  readonly group: ReadonlyArray<STRAPI_LOCATION_ADDRESS_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_LOCATION_ADDRESS_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_LOCATION_ADDRESS_TEXTNODEConnection_distinctArgs = {
  field: STRAPI_LOCATION_ADDRESS_TEXTNODEFieldSelector;
};


type STRAPI_LOCATION_ADDRESS_TEXTNODEConnection_groupArgs = {
  field: STRAPI_LOCATION_ADDRESS_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_LOCATION_ADDRESS_TEXTNODEConnection_maxArgs = {
  field: STRAPI_LOCATION_ADDRESS_TEXTNODEFieldSelector;
};


type STRAPI_LOCATION_ADDRESS_TEXTNODEConnection_minArgs = {
  field: STRAPI_LOCATION_ADDRESS_TEXTNODEFieldSelector;
};


type STRAPI_LOCATION_ADDRESS_TEXTNODEConnection_sumArgs = {
  field: STRAPI_LOCATION_ADDRESS_TEXTNODEFieldSelector;
};

type STRAPI_LOCATION_ADDRESS_TEXTNODEEdge = {
  readonly next: Maybe<STRAPI_LOCATION_ADDRESS_TEXTNODE>;
  readonly node: STRAPI_LOCATION_ADDRESS_TEXTNODE;
  readonly previous: Maybe<STRAPI_LOCATION_ADDRESS_TEXTNODE>;
};

type STRAPI_LOCATION_ADDRESS_TEXTNODEFieldSelector = {
  readonly address: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type STRAPI_LOCATION_ADDRESS_TEXTNODEFilterInput = {
  readonly address: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type STRAPI_LOCATION_ADDRESS_TEXTNODEGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_LOCATION_ADDRESS_TEXTNODEEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_LOCATION_ADDRESS_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_LOCATION_ADDRESS_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_LOCATION_ADDRESS_TEXTNODEGroupConnection_distinctArgs = {
  field: STRAPI_LOCATION_ADDRESS_TEXTNODEFieldSelector;
};


type STRAPI_LOCATION_ADDRESS_TEXTNODEGroupConnection_groupArgs = {
  field: STRAPI_LOCATION_ADDRESS_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_LOCATION_ADDRESS_TEXTNODEGroupConnection_maxArgs = {
  field: STRAPI_LOCATION_ADDRESS_TEXTNODEFieldSelector;
};


type STRAPI_LOCATION_ADDRESS_TEXTNODEGroupConnection_minArgs = {
  field: STRAPI_LOCATION_ADDRESS_TEXTNODEFieldSelector;
};


type STRAPI_LOCATION_ADDRESS_TEXTNODEGroupConnection_sumArgs = {
  field: STRAPI_LOCATION_ADDRESS_TEXTNODEFieldSelector;
};

type STRAPI_LOCATION_ADDRESS_TEXTNODESortInput = {
  readonly address: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type STRAPI_LOCATION_DESCRIPTION_TEXTNODE = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly description: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type STRAPI_LOCATION_DESCRIPTION_TEXTNODEConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_LOCATION_DESCRIPTION_TEXTNODEEdge>;
  readonly group: ReadonlyArray<STRAPI_LOCATION_DESCRIPTION_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_LOCATION_DESCRIPTION_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_LOCATION_DESCRIPTION_TEXTNODEConnection_distinctArgs = {
  field: STRAPI_LOCATION_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_LOCATION_DESCRIPTION_TEXTNODEConnection_groupArgs = {
  field: STRAPI_LOCATION_DESCRIPTION_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_LOCATION_DESCRIPTION_TEXTNODEConnection_maxArgs = {
  field: STRAPI_LOCATION_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_LOCATION_DESCRIPTION_TEXTNODEConnection_minArgs = {
  field: STRAPI_LOCATION_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_LOCATION_DESCRIPTION_TEXTNODEConnection_sumArgs = {
  field: STRAPI_LOCATION_DESCRIPTION_TEXTNODEFieldSelector;
};

type STRAPI_LOCATION_DESCRIPTION_TEXTNODEEdge = {
  readonly next: Maybe<STRAPI_LOCATION_DESCRIPTION_TEXTNODE>;
  readonly node: STRAPI_LOCATION_DESCRIPTION_TEXTNODE;
  readonly previous: Maybe<STRAPI_LOCATION_DESCRIPTION_TEXTNODE>;
};

type STRAPI_LOCATION_DESCRIPTION_TEXTNODEFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type STRAPI_LOCATION_DESCRIPTION_TEXTNODEFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type STRAPI_LOCATION_DESCRIPTION_TEXTNODEGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_LOCATION_DESCRIPTION_TEXTNODEEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_LOCATION_DESCRIPTION_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_LOCATION_DESCRIPTION_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_LOCATION_DESCRIPTION_TEXTNODEGroupConnection_distinctArgs = {
  field: STRAPI_LOCATION_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_LOCATION_DESCRIPTION_TEXTNODEGroupConnection_groupArgs = {
  field: STRAPI_LOCATION_DESCRIPTION_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_LOCATION_DESCRIPTION_TEXTNODEGroupConnection_maxArgs = {
  field: STRAPI_LOCATION_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_LOCATION_DESCRIPTION_TEXTNODEGroupConnection_minArgs = {
  field: STRAPI_LOCATION_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_LOCATION_DESCRIPTION_TEXTNODEGroupConnection_sumArgs = {
  field: STRAPI_LOCATION_DESCRIPTION_TEXTNODEFieldSelector;
};

type STRAPI_LOCATION_DESCRIPTION_TEXTNODESortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type STRAPI_RENTAL = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly text: Maybe<STRAPI_RENTALText>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type STRAPI_RENTAL_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_RENTAL_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_RENTAL_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_RENTALConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_RENTALEdge>;
  readonly group: ReadonlyArray<STRAPI_RENTALGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_RENTAL>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_RENTALConnection_distinctArgs = {
  field: STRAPI_RENTALFieldSelector;
};


type STRAPI_RENTALConnection_groupArgs = {
  field: STRAPI_RENTALFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_RENTALConnection_maxArgs = {
  field: STRAPI_RENTALFieldSelector;
};


type STRAPI_RENTALConnection_minArgs = {
  field: STRAPI_RENTALFieldSelector;
};


type STRAPI_RENTALConnection_sumArgs = {
  field: STRAPI_RENTALFieldSelector;
};

type STRAPI_RENTALEdge = {
  readonly next: Maybe<STRAPI_RENTAL>;
  readonly node: STRAPI_RENTAL;
  readonly previous: Maybe<STRAPI_RENTAL>;
};

type STRAPI_RENTALFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly publishedAt: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<STRAPI_RENTALTextFieldSelector>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_RENTALFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly text: InputMaybe<STRAPI_RENTALTextFilterInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type STRAPI_RENTALGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_RENTALEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_RENTALGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_RENTAL>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_RENTALGroupConnection_distinctArgs = {
  field: STRAPI_RENTALFieldSelector;
};


type STRAPI_RENTALGroupConnection_groupArgs = {
  field: STRAPI_RENTALFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_RENTALGroupConnection_maxArgs = {
  field: STRAPI_RENTALFieldSelector;
};


type STRAPI_RENTALGroupConnection_minArgs = {
  field: STRAPI_RENTALFieldSelector;
};


type STRAPI_RENTALGroupConnection_sumArgs = {
  field: STRAPI_RENTALFieldSelector;
};

type STRAPI_RENTALSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly publishedAt: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<STRAPI_RENTALTextSortInput>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type STRAPI_RENTALText = {
  readonly data: Maybe<STRAPI_RENTAL_TEXT_TEXTNODE>;
};

type STRAPI_RENTALTextFieldSelector = {
  readonly data: InputMaybe<STRAPI_RENTAL_TEXT_TEXTNODEFieldSelector>;
};

type STRAPI_RENTALTextFilterInput = {
  readonly data: InputMaybe<STRAPI_RENTAL_TEXT_TEXTNODEFilterInput>;
};

type STRAPI_RENTALTextSortInput = {
  readonly data: InputMaybe<STRAPI_RENTAL_TEXT_TEXTNODESortInput>;
};

type STRAPI_RENTAL_ADDON = Node & {
  readonly attribute: Maybe<STRAPI_ATTRIBUTE>;
  readonly children: ReadonlyArray<Node>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly double: Maybe<Scalars['Int']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly name: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly single: Maybe<Scalars['Int']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly sup: Maybe<Scalars['Int']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type STRAPI_RENTAL_ADDON_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_RENTAL_ADDON_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_RENTAL_ADDON_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_RENTAL_ADDONConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_RENTAL_ADDONEdge>;
  readonly group: ReadonlyArray<STRAPI_RENTAL_ADDONGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_RENTAL_ADDON>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_RENTAL_ADDONConnection_distinctArgs = {
  field: STRAPI_RENTAL_ADDONFieldSelector;
};


type STRAPI_RENTAL_ADDONConnection_groupArgs = {
  field: STRAPI_RENTAL_ADDONFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_RENTAL_ADDONConnection_maxArgs = {
  field: STRAPI_RENTAL_ADDONFieldSelector;
};


type STRAPI_RENTAL_ADDONConnection_minArgs = {
  field: STRAPI_RENTAL_ADDONFieldSelector;
};


type STRAPI_RENTAL_ADDONConnection_sumArgs = {
  field: STRAPI_RENTAL_ADDONFieldSelector;
};

type STRAPI_RENTAL_ADDONEdge = {
  readonly next: Maybe<STRAPI_RENTAL_ADDON>;
  readonly node: STRAPI_RENTAL_ADDON;
  readonly previous: Maybe<STRAPI_RENTAL_ADDON>;
};

type STRAPI_RENTAL_ADDONFieldSelector = {
  readonly attribute: InputMaybe<STRAPI_ATTRIBUTEFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly double: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly publishedAt: InputMaybe<FieldSelectorEnum>;
  readonly single: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly sup: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_RENTAL_ADDONFilterInput = {
  readonly attribute: InputMaybe<STRAPI_ATTRIBUTEFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly double: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly single: InputMaybe<IntQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly sup: InputMaybe<IntQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type STRAPI_RENTAL_ADDONGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_RENTAL_ADDONEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_RENTAL_ADDONGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_RENTAL_ADDON>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_RENTAL_ADDONGroupConnection_distinctArgs = {
  field: STRAPI_RENTAL_ADDONFieldSelector;
};


type STRAPI_RENTAL_ADDONGroupConnection_groupArgs = {
  field: STRAPI_RENTAL_ADDONFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_RENTAL_ADDONGroupConnection_maxArgs = {
  field: STRAPI_RENTAL_ADDONFieldSelector;
};


type STRAPI_RENTAL_ADDONGroupConnection_minArgs = {
  field: STRAPI_RENTAL_ADDONFieldSelector;
};


type STRAPI_RENTAL_ADDONGroupConnection_sumArgs = {
  field: STRAPI_RENTAL_ADDONFieldSelector;
};

type STRAPI_RENTAL_ADDONSortInput = {
  readonly attribute: InputMaybe<STRAPI_ATTRIBUTESortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly double: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly publishedAt: InputMaybe<SortOrderEnum>;
  readonly single: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly sup: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type STRAPI_RENTAL_RATE = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly favorite: Maybe<Scalars['Boolean']>;
  readonly fullDay: Maybe<Scalars['Int']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly item: Maybe<Scalars['String']>;
  readonly oneHour: Maybe<Scalars['Int']>;
  readonly order: Maybe<Scalars['Int']>;
  readonly parent: Maybe<Node>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly threeHour: Maybe<Scalars['Int']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type STRAPI_RENTAL_RATE_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_RENTAL_RATE_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_RENTAL_RATE_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_RENTAL_RATEConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_RENTAL_RATEEdge>;
  readonly group: ReadonlyArray<STRAPI_RENTAL_RATEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_RENTAL_RATE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_RENTAL_RATEConnection_distinctArgs = {
  field: STRAPI_RENTAL_RATEFieldSelector;
};


type STRAPI_RENTAL_RATEConnection_groupArgs = {
  field: STRAPI_RENTAL_RATEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_RENTAL_RATEConnection_maxArgs = {
  field: STRAPI_RENTAL_RATEFieldSelector;
};


type STRAPI_RENTAL_RATEConnection_minArgs = {
  field: STRAPI_RENTAL_RATEFieldSelector;
};


type STRAPI_RENTAL_RATEConnection_sumArgs = {
  field: STRAPI_RENTAL_RATEFieldSelector;
};

type STRAPI_RENTAL_RATEEdge = {
  readonly next: Maybe<STRAPI_RENTAL_RATE>;
  readonly node: STRAPI_RENTAL_RATE;
  readonly previous: Maybe<STRAPI_RENTAL_RATE>;
};

type STRAPI_RENTAL_RATEFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly favorite: InputMaybe<FieldSelectorEnum>;
  readonly fullDay: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly item: InputMaybe<FieldSelectorEnum>;
  readonly oneHour: InputMaybe<FieldSelectorEnum>;
  readonly order: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly publishedAt: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly threeHour: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_RENTAL_RATEFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly favorite: InputMaybe<BooleanQueryOperatorInput>;
  readonly fullDay: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly item: InputMaybe<StringQueryOperatorInput>;
  readonly oneHour: InputMaybe<IntQueryOperatorInput>;
  readonly order: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly threeHour: InputMaybe<IntQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type STRAPI_RENTAL_RATEGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_RENTAL_RATEEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_RENTAL_RATEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_RENTAL_RATE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_RENTAL_RATEGroupConnection_distinctArgs = {
  field: STRAPI_RENTAL_RATEFieldSelector;
};


type STRAPI_RENTAL_RATEGroupConnection_groupArgs = {
  field: STRAPI_RENTAL_RATEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_RENTAL_RATEGroupConnection_maxArgs = {
  field: STRAPI_RENTAL_RATEFieldSelector;
};


type STRAPI_RENTAL_RATEGroupConnection_minArgs = {
  field: STRAPI_RENTAL_RATEFieldSelector;
};


type STRAPI_RENTAL_RATEGroupConnection_sumArgs = {
  field: STRAPI_RENTAL_RATEFieldSelector;
};

type STRAPI_RENTAL_RATESortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly favorite: InputMaybe<SortOrderEnum>;
  readonly fullDay: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly item: InputMaybe<SortOrderEnum>;
  readonly oneHour: InputMaybe<SortOrderEnum>;
  readonly order: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly publishedAt: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly threeHour: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type STRAPI_RENTAL_TEXT_TEXTNODE = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly text: Maybe<Scalars['String']>;
};

type STRAPI_RENTAL_TEXT_TEXTNODEConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_RENTAL_TEXT_TEXTNODEEdge>;
  readonly group: ReadonlyArray<STRAPI_RENTAL_TEXT_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_RENTAL_TEXT_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_RENTAL_TEXT_TEXTNODEConnection_distinctArgs = {
  field: STRAPI_RENTAL_TEXT_TEXTNODEFieldSelector;
};


type STRAPI_RENTAL_TEXT_TEXTNODEConnection_groupArgs = {
  field: STRAPI_RENTAL_TEXT_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_RENTAL_TEXT_TEXTNODEConnection_maxArgs = {
  field: STRAPI_RENTAL_TEXT_TEXTNODEFieldSelector;
};


type STRAPI_RENTAL_TEXT_TEXTNODEConnection_minArgs = {
  field: STRAPI_RENTAL_TEXT_TEXTNODEFieldSelector;
};


type STRAPI_RENTAL_TEXT_TEXTNODEConnection_sumArgs = {
  field: STRAPI_RENTAL_TEXT_TEXTNODEFieldSelector;
};

type STRAPI_RENTAL_TEXT_TEXTNODEEdge = {
  readonly next: Maybe<STRAPI_RENTAL_TEXT_TEXTNODE>;
  readonly node: STRAPI_RENTAL_TEXT_TEXTNODE;
  readonly previous: Maybe<STRAPI_RENTAL_TEXT_TEXTNODE>;
};

type STRAPI_RENTAL_TEXT_TEXTNODEFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly text: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_RENTAL_TEXT_TEXTNODEFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly text: InputMaybe<StringQueryOperatorInput>;
};

type STRAPI_RENTAL_TEXT_TEXTNODEGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_RENTAL_TEXT_TEXTNODEEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_RENTAL_TEXT_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_RENTAL_TEXT_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_RENTAL_TEXT_TEXTNODEGroupConnection_distinctArgs = {
  field: STRAPI_RENTAL_TEXT_TEXTNODEFieldSelector;
};


type STRAPI_RENTAL_TEXT_TEXTNODEGroupConnection_groupArgs = {
  field: STRAPI_RENTAL_TEXT_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_RENTAL_TEXT_TEXTNODEGroupConnection_maxArgs = {
  field: STRAPI_RENTAL_TEXT_TEXTNODEFieldSelector;
};


type STRAPI_RENTAL_TEXT_TEXTNODEGroupConnection_minArgs = {
  field: STRAPI_RENTAL_TEXT_TEXTNODEFieldSelector;
};


type STRAPI_RENTAL_TEXT_TEXTNODEGroupConnection_sumArgs = {
  field: STRAPI_RENTAL_TEXT_TEXTNODEFieldSelector;
};

type STRAPI_RENTAL_TEXT_TEXTNODESortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly text: InputMaybe<SortOrderEnum>;
};

type STRAPI_RETAIL = Node & {
  readonly brand: Maybe<STRAPI_BRAND>;
  readonly capacity: Maybe<Scalars['Int']>;
  readonly children: ReadonlyArray<Node>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly crew: Maybe<Scalars['String']>;
  readonly cutout: Maybe<STRAPI__MEDIA>;
  readonly demo: Maybe<Scalars['Boolean']>;
  readonly description: Maybe<STRAPI_RETAILDescription>;
  readonly discount: Maybe<Scalars['Int']>;
  readonly excerpt: Maybe<Scalars['String']>;
  readonly featured: Maybe<Scalars['Boolean']>;
  readonly features: Maybe<STRAPI_RETAILFeatures>;
  readonly hullweight: Maybe<Scalars['Float']>;
  readonly id: Scalars['ID'];
  readonly inflatable: Maybe<Scalars['Boolean']>;
  readonly internal: Internal;
  readonly length: Maybe<Scalars['Int']>;
  readonly link: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly price: Maybe<Scalars['Float']>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly riggedweight: Maybe<Scalars['Int']>;
  readonly series: Maybe<Scalars['String']>;
  readonly slug: Maybe<Scalars['String']>;
  readonly sport: Maybe<STRAPI_SPORT>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly thickness: Maybe<Scalars['Float']>;
  readonly title: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
  readonly volume: Maybe<Scalars['Int']>;
  readonly width: Maybe<Scalars['Float']>;
};


type STRAPI_RETAIL_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_RETAIL_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_RETAIL_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_RETAILConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_RETAILEdge>;
  readonly group: ReadonlyArray<STRAPI_RETAILGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_RETAIL>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_RETAILConnection_distinctArgs = {
  field: STRAPI_RETAILFieldSelector;
};


type STRAPI_RETAILConnection_groupArgs = {
  field: STRAPI_RETAILFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_RETAILConnection_maxArgs = {
  field: STRAPI_RETAILFieldSelector;
};


type STRAPI_RETAILConnection_minArgs = {
  field: STRAPI_RETAILFieldSelector;
};


type STRAPI_RETAILConnection_sumArgs = {
  field: STRAPI_RETAILFieldSelector;
};

type STRAPI_RETAILDescription = {
  readonly data: Maybe<STRAPI_RETAIL_DESCRIPTION_TEXTNODE>;
};

type STRAPI_RETAILDescriptionFieldSelector = {
  readonly data: InputMaybe<STRAPI_RETAIL_DESCRIPTION_TEXTNODEFieldSelector>;
};

type STRAPI_RETAILDescriptionFilterInput = {
  readonly data: InputMaybe<STRAPI_RETAIL_DESCRIPTION_TEXTNODEFilterInput>;
};

type STRAPI_RETAILDescriptionSortInput = {
  readonly data: InputMaybe<STRAPI_RETAIL_DESCRIPTION_TEXTNODESortInput>;
};

type STRAPI_RETAILEdge = {
  readonly next: Maybe<STRAPI_RETAIL>;
  readonly node: STRAPI_RETAIL;
  readonly previous: Maybe<STRAPI_RETAIL>;
};

type STRAPI_RETAILFeatures = {
  readonly data: Maybe<STRAPI_RETAIL_FEATURES_TEXTNODE>;
};

type STRAPI_RETAILFeaturesFieldSelector = {
  readonly data: InputMaybe<STRAPI_RETAIL_FEATURES_TEXTNODEFieldSelector>;
};

type STRAPI_RETAILFeaturesFilterInput = {
  readonly data: InputMaybe<STRAPI_RETAIL_FEATURES_TEXTNODEFilterInput>;
};

type STRAPI_RETAILFeaturesSortInput = {
  readonly data: InputMaybe<STRAPI_RETAIL_FEATURES_TEXTNODESortInput>;
};

type STRAPI_RETAILFieldSelector = {
  readonly brand: InputMaybe<STRAPI_BRANDFieldSelector>;
  readonly capacity: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly crew: InputMaybe<FieldSelectorEnum>;
  readonly cutout: InputMaybe<STRAPI__MEDIAFieldSelector>;
  readonly demo: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<STRAPI_RETAILDescriptionFieldSelector>;
  readonly discount: InputMaybe<FieldSelectorEnum>;
  readonly excerpt: InputMaybe<FieldSelectorEnum>;
  readonly featured: InputMaybe<FieldSelectorEnum>;
  readonly features: InputMaybe<STRAPI_RETAILFeaturesFieldSelector>;
  readonly hullweight: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly inflatable: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly length: InputMaybe<FieldSelectorEnum>;
  readonly link: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly price: InputMaybe<FieldSelectorEnum>;
  readonly publishedAt: InputMaybe<FieldSelectorEnum>;
  readonly riggedweight: InputMaybe<FieldSelectorEnum>;
  readonly series: InputMaybe<FieldSelectorEnum>;
  readonly slug: InputMaybe<FieldSelectorEnum>;
  readonly sport: InputMaybe<STRAPI_SPORTFieldSelector>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly thickness: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
  readonly volume: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_RETAILFilterInput = {
  readonly brand: InputMaybe<STRAPI_BRANDFilterInput>;
  readonly capacity: InputMaybe<IntQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly crew: InputMaybe<StringQueryOperatorInput>;
  readonly cutout: InputMaybe<STRAPI__MEDIAFilterInput>;
  readonly demo: InputMaybe<BooleanQueryOperatorInput>;
  readonly description: InputMaybe<STRAPI_RETAILDescriptionFilterInput>;
  readonly discount: InputMaybe<IntQueryOperatorInput>;
  readonly excerpt: InputMaybe<StringQueryOperatorInput>;
  readonly featured: InputMaybe<BooleanQueryOperatorInput>;
  readonly features: InputMaybe<STRAPI_RETAILFeaturesFilterInput>;
  readonly hullweight: InputMaybe<FloatQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly inflatable: InputMaybe<BooleanQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly length: InputMaybe<IntQueryOperatorInput>;
  readonly link: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly price: InputMaybe<FloatQueryOperatorInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly riggedweight: InputMaybe<IntQueryOperatorInput>;
  readonly series: InputMaybe<StringQueryOperatorInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly sport: InputMaybe<STRAPI_SPORTFilterInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly thickness: InputMaybe<FloatQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly volume: InputMaybe<IntQueryOperatorInput>;
  readonly width: InputMaybe<FloatQueryOperatorInput>;
};

type STRAPI_RETAILFilterListInput = {
  readonly elemMatch: InputMaybe<STRAPI_RETAILFilterInput>;
};

type STRAPI_RETAILGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_RETAILEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_RETAILGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_RETAIL>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_RETAILGroupConnection_distinctArgs = {
  field: STRAPI_RETAILFieldSelector;
};


type STRAPI_RETAILGroupConnection_groupArgs = {
  field: STRAPI_RETAILFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_RETAILGroupConnection_maxArgs = {
  field: STRAPI_RETAILFieldSelector;
};


type STRAPI_RETAILGroupConnection_minArgs = {
  field: STRAPI_RETAILFieldSelector;
};


type STRAPI_RETAILGroupConnection_sumArgs = {
  field: STRAPI_RETAILFieldSelector;
};

type STRAPI_RETAILSortInput = {
  readonly brand: InputMaybe<STRAPI_BRANDSortInput>;
  readonly capacity: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly crew: InputMaybe<SortOrderEnum>;
  readonly cutout: InputMaybe<STRAPI__MEDIASortInput>;
  readonly demo: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<STRAPI_RETAILDescriptionSortInput>;
  readonly discount: InputMaybe<SortOrderEnum>;
  readonly excerpt: InputMaybe<SortOrderEnum>;
  readonly featured: InputMaybe<SortOrderEnum>;
  readonly features: InputMaybe<STRAPI_RETAILFeaturesSortInput>;
  readonly hullweight: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly inflatable: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly length: InputMaybe<SortOrderEnum>;
  readonly link: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly price: InputMaybe<SortOrderEnum>;
  readonly publishedAt: InputMaybe<SortOrderEnum>;
  readonly riggedweight: InputMaybe<SortOrderEnum>;
  readonly series: InputMaybe<SortOrderEnum>;
  readonly slug: InputMaybe<SortOrderEnum>;
  readonly sport: InputMaybe<STRAPI_SPORTSortInput>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly thickness: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
  readonly volume: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type STRAPI_RETAIL_DESCRIPTION_TEXTNODE = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly description: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type STRAPI_RETAIL_DESCRIPTION_TEXTNODEConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_RETAIL_DESCRIPTION_TEXTNODEEdge>;
  readonly group: ReadonlyArray<STRAPI_RETAIL_DESCRIPTION_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_RETAIL_DESCRIPTION_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_RETAIL_DESCRIPTION_TEXTNODEConnection_distinctArgs = {
  field: STRAPI_RETAIL_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_RETAIL_DESCRIPTION_TEXTNODEConnection_groupArgs = {
  field: STRAPI_RETAIL_DESCRIPTION_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_RETAIL_DESCRIPTION_TEXTNODEConnection_maxArgs = {
  field: STRAPI_RETAIL_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_RETAIL_DESCRIPTION_TEXTNODEConnection_minArgs = {
  field: STRAPI_RETAIL_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_RETAIL_DESCRIPTION_TEXTNODEConnection_sumArgs = {
  field: STRAPI_RETAIL_DESCRIPTION_TEXTNODEFieldSelector;
};

type STRAPI_RETAIL_DESCRIPTION_TEXTNODEEdge = {
  readonly next: Maybe<STRAPI_RETAIL_DESCRIPTION_TEXTNODE>;
  readonly node: STRAPI_RETAIL_DESCRIPTION_TEXTNODE;
  readonly previous: Maybe<STRAPI_RETAIL_DESCRIPTION_TEXTNODE>;
};

type STRAPI_RETAIL_DESCRIPTION_TEXTNODEFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type STRAPI_RETAIL_DESCRIPTION_TEXTNODEFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type STRAPI_RETAIL_DESCRIPTION_TEXTNODEGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_RETAIL_DESCRIPTION_TEXTNODEEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_RETAIL_DESCRIPTION_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_RETAIL_DESCRIPTION_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_RETAIL_DESCRIPTION_TEXTNODEGroupConnection_distinctArgs = {
  field: STRAPI_RETAIL_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_RETAIL_DESCRIPTION_TEXTNODEGroupConnection_groupArgs = {
  field: STRAPI_RETAIL_DESCRIPTION_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_RETAIL_DESCRIPTION_TEXTNODEGroupConnection_maxArgs = {
  field: STRAPI_RETAIL_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_RETAIL_DESCRIPTION_TEXTNODEGroupConnection_minArgs = {
  field: STRAPI_RETAIL_DESCRIPTION_TEXTNODEFieldSelector;
};


type STRAPI_RETAIL_DESCRIPTION_TEXTNODEGroupConnection_sumArgs = {
  field: STRAPI_RETAIL_DESCRIPTION_TEXTNODEFieldSelector;
};

type STRAPI_RETAIL_DESCRIPTION_TEXTNODESortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type STRAPI_RETAIL_FEATURES_TEXTNODE = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly features: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type STRAPI_RETAIL_FEATURES_TEXTNODEConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_RETAIL_FEATURES_TEXTNODEEdge>;
  readonly group: ReadonlyArray<STRAPI_RETAIL_FEATURES_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_RETAIL_FEATURES_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_RETAIL_FEATURES_TEXTNODEConnection_distinctArgs = {
  field: STRAPI_RETAIL_FEATURES_TEXTNODEFieldSelector;
};


type STRAPI_RETAIL_FEATURES_TEXTNODEConnection_groupArgs = {
  field: STRAPI_RETAIL_FEATURES_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_RETAIL_FEATURES_TEXTNODEConnection_maxArgs = {
  field: STRAPI_RETAIL_FEATURES_TEXTNODEFieldSelector;
};


type STRAPI_RETAIL_FEATURES_TEXTNODEConnection_minArgs = {
  field: STRAPI_RETAIL_FEATURES_TEXTNODEFieldSelector;
};


type STRAPI_RETAIL_FEATURES_TEXTNODEConnection_sumArgs = {
  field: STRAPI_RETAIL_FEATURES_TEXTNODEFieldSelector;
};

type STRAPI_RETAIL_FEATURES_TEXTNODEEdge = {
  readonly next: Maybe<STRAPI_RETAIL_FEATURES_TEXTNODE>;
  readonly node: STRAPI_RETAIL_FEATURES_TEXTNODE;
  readonly previous: Maybe<STRAPI_RETAIL_FEATURES_TEXTNODE>;
};

type STRAPI_RETAIL_FEATURES_TEXTNODEFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly features: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type STRAPI_RETAIL_FEATURES_TEXTNODEFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly features: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type STRAPI_RETAIL_FEATURES_TEXTNODEGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_RETAIL_FEATURES_TEXTNODEEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_RETAIL_FEATURES_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_RETAIL_FEATURES_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_RETAIL_FEATURES_TEXTNODEGroupConnection_distinctArgs = {
  field: STRAPI_RETAIL_FEATURES_TEXTNODEFieldSelector;
};


type STRAPI_RETAIL_FEATURES_TEXTNODEGroupConnection_groupArgs = {
  field: STRAPI_RETAIL_FEATURES_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_RETAIL_FEATURES_TEXTNODEGroupConnection_maxArgs = {
  field: STRAPI_RETAIL_FEATURES_TEXTNODEFieldSelector;
};


type STRAPI_RETAIL_FEATURES_TEXTNODEGroupConnection_minArgs = {
  field: STRAPI_RETAIL_FEATURES_TEXTNODEFieldSelector;
};


type STRAPI_RETAIL_FEATURES_TEXTNODEGroupConnection_sumArgs = {
  field: STRAPI_RETAIL_FEATURES_TEXTNODEFieldSelector;
};

type STRAPI_RETAIL_FEATURES_TEXTNODESortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly features: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type STRAPI_SHOP = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly text: Maybe<STRAPI_SHOPText>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type STRAPI_SHOP_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_SHOP_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_SHOP_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_SHOPConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_SHOPEdge>;
  readonly group: ReadonlyArray<STRAPI_SHOPGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_SHOP>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_SHOPConnection_distinctArgs = {
  field: STRAPI_SHOPFieldSelector;
};


type STRAPI_SHOPConnection_groupArgs = {
  field: STRAPI_SHOPFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_SHOPConnection_maxArgs = {
  field: STRAPI_SHOPFieldSelector;
};


type STRAPI_SHOPConnection_minArgs = {
  field: STRAPI_SHOPFieldSelector;
};


type STRAPI_SHOPConnection_sumArgs = {
  field: STRAPI_SHOPFieldSelector;
};

type STRAPI_SHOPEdge = {
  readonly next: Maybe<STRAPI_SHOP>;
  readonly node: STRAPI_SHOP;
  readonly previous: Maybe<STRAPI_SHOP>;
};

type STRAPI_SHOPFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly publishedAt: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<STRAPI_SHOPTextFieldSelector>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_SHOPFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly text: InputMaybe<STRAPI_SHOPTextFilterInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type STRAPI_SHOPGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_SHOPEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_SHOPGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_SHOP>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_SHOPGroupConnection_distinctArgs = {
  field: STRAPI_SHOPFieldSelector;
};


type STRAPI_SHOPGroupConnection_groupArgs = {
  field: STRAPI_SHOPFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_SHOPGroupConnection_maxArgs = {
  field: STRAPI_SHOPFieldSelector;
};


type STRAPI_SHOPGroupConnection_minArgs = {
  field: STRAPI_SHOPFieldSelector;
};


type STRAPI_SHOPGroupConnection_sumArgs = {
  field: STRAPI_SHOPFieldSelector;
};

type STRAPI_SHOPSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly publishedAt: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<STRAPI_SHOPTextSortInput>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type STRAPI_SHOPText = {
  readonly data: Maybe<STRAPI_SHOP_TEXT_TEXTNODE>;
};

type STRAPI_SHOPTextFieldSelector = {
  readonly data: InputMaybe<STRAPI_SHOP_TEXT_TEXTNODEFieldSelector>;
};

type STRAPI_SHOPTextFilterInput = {
  readonly data: InputMaybe<STRAPI_SHOP_TEXT_TEXTNODEFilterInput>;
};

type STRAPI_SHOPTextSortInput = {
  readonly data: InputMaybe<STRAPI_SHOP_TEXT_TEXTNODESortInput>;
};

type STRAPI_SHOP_TEXT_TEXTNODE = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly text: Maybe<Scalars['String']>;
};

type STRAPI_SHOP_TEXT_TEXTNODEConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_SHOP_TEXT_TEXTNODEEdge>;
  readonly group: ReadonlyArray<STRAPI_SHOP_TEXT_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_SHOP_TEXT_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_SHOP_TEXT_TEXTNODEConnection_distinctArgs = {
  field: STRAPI_SHOP_TEXT_TEXTNODEFieldSelector;
};


type STRAPI_SHOP_TEXT_TEXTNODEConnection_groupArgs = {
  field: STRAPI_SHOP_TEXT_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_SHOP_TEXT_TEXTNODEConnection_maxArgs = {
  field: STRAPI_SHOP_TEXT_TEXTNODEFieldSelector;
};


type STRAPI_SHOP_TEXT_TEXTNODEConnection_minArgs = {
  field: STRAPI_SHOP_TEXT_TEXTNODEFieldSelector;
};


type STRAPI_SHOP_TEXT_TEXTNODEConnection_sumArgs = {
  field: STRAPI_SHOP_TEXT_TEXTNODEFieldSelector;
};

type STRAPI_SHOP_TEXT_TEXTNODEEdge = {
  readonly next: Maybe<STRAPI_SHOP_TEXT_TEXTNODE>;
  readonly node: STRAPI_SHOP_TEXT_TEXTNODE;
  readonly previous: Maybe<STRAPI_SHOP_TEXT_TEXTNODE>;
};

type STRAPI_SHOP_TEXT_TEXTNODEFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly text: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_SHOP_TEXT_TEXTNODEFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly text: InputMaybe<StringQueryOperatorInput>;
};

type STRAPI_SHOP_TEXT_TEXTNODEGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_SHOP_TEXT_TEXTNODEEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_SHOP_TEXT_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_SHOP_TEXT_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_SHOP_TEXT_TEXTNODEGroupConnection_distinctArgs = {
  field: STRAPI_SHOP_TEXT_TEXTNODEFieldSelector;
};


type STRAPI_SHOP_TEXT_TEXTNODEGroupConnection_groupArgs = {
  field: STRAPI_SHOP_TEXT_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_SHOP_TEXT_TEXTNODEGroupConnection_maxArgs = {
  field: STRAPI_SHOP_TEXT_TEXTNODEFieldSelector;
};


type STRAPI_SHOP_TEXT_TEXTNODEGroupConnection_minArgs = {
  field: STRAPI_SHOP_TEXT_TEXTNODEFieldSelector;
};


type STRAPI_SHOP_TEXT_TEXTNODEGroupConnection_sumArgs = {
  field: STRAPI_SHOP_TEXT_TEXTNODEFieldSelector;
};

type STRAPI_SHOP_TEXT_TEXTNODESortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly text: InputMaybe<SortOrderEnum>;
};

type STRAPI_SPORT = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly description: Maybe<STRAPI_SPORTDescription>;
  readonly gatsbyPath: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly slug: Maybe<Scalars['String']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly title: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type STRAPI_SPORT_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_SPORT_gatsbyPathArgs = {
  filePath: InputMaybe<Scalars['String']>;
};


type STRAPI_SPORT_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_SPORT_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_SPORTConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_SPORTEdge>;
  readonly group: ReadonlyArray<STRAPI_SPORTGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_SPORT>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_SPORTConnection_distinctArgs = {
  field: STRAPI_SPORTFieldSelector;
};


type STRAPI_SPORTConnection_groupArgs = {
  field: STRAPI_SPORTFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_SPORTConnection_maxArgs = {
  field: STRAPI_SPORTFieldSelector;
};


type STRAPI_SPORTConnection_minArgs = {
  field: STRAPI_SPORTFieldSelector;
};


type STRAPI_SPORTConnection_sumArgs = {
  field: STRAPI_SPORTFieldSelector;
};

type STRAPI_SPORTDescription = {
  readonly data: Maybe<Scalars['String']>;
};

type STRAPI_SPORTDescriptionFieldSelector = {
  readonly data: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_SPORTDescriptionFilterInput = {
  readonly data: InputMaybe<StringQueryOperatorInput>;
};

type STRAPI_SPORTDescriptionSortInput = {
  readonly data: InputMaybe<SortOrderEnum>;
};

type STRAPI_SPORTEdge = {
  readonly next: Maybe<STRAPI_SPORT>;
  readonly node: STRAPI_SPORT;
  readonly previous: Maybe<STRAPI_SPORT>;
};

type STRAPI_SPORTFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<STRAPI_SPORTDescriptionFieldSelector>;
  readonly gatsbyPath: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly publishedAt: InputMaybe<FieldSelectorEnum>;
  readonly slug: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_SPORTFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly description: InputMaybe<STRAPI_SPORTDescriptionFilterInput>;
  readonly gatsbyPath: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type STRAPI_SPORTGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_SPORTEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_SPORTGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_SPORT>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_SPORTGroupConnection_distinctArgs = {
  field: STRAPI_SPORTFieldSelector;
};


type STRAPI_SPORTGroupConnection_groupArgs = {
  field: STRAPI_SPORTFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_SPORTGroupConnection_maxArgs = {
  field: STRAPI_SPORTFieldSelector;
};


type STRAPI_SPORTGroupConnection_minArgs = {
  field: STRAPI_SPORTFieldSelector;
};


type STRAPI_SPORTGroupConnection_sumArgs = {
  field: STRAPI_SPORTFieldSelector;
};

type STRAPI_SPORTSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<STRAPI_SPORTDescriptionSortInput>;
  readonly gatsbyPath: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly publishedAt: InputMaybe<SortOrderEnum>;
  readonly slug: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type STRAPI_TEAM = Node & {
  readonly bio: Maybe<STRAPI_TEAMBio>;
  readonly children: ReadonlyArray<Node>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly locales: Maybe<ReadonlyArray<Maybe<STRAPI_LOCALE>>>;
  readonly name: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly position: Maybe<Scalars['String']>;
  readonly profile: Maybe<STRAPI__MEDIA>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type STRAPI_TEAM_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_TEAM_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_TEAM_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_TEAMBio = {
  readonly data: Maybe<STRAPI_TEAM_BIO_TEXTNODE>;
};

type STRAPI_TEAMBioFieldSelector = {
  readonly data: InputMaybe<STRAPI_TEAM_BIO_TEXTNODEFieldSelector>;
};

type STRAPI_TEAMBioFilterInput = {
  readonly data: InputMaybe<STRAPI_TEAM_BIO_TEXTNODEFilterInput>;
};

type STRAPI_TEAMBioSortInput = {
  readonly data: InputMaybe<STRAPI_TEAM_BIO_TEXTNODESortInput>;
};

type STRAPI_TEAMConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_TEAMEdge>;
  readonly group: ReadonlyArray<STRAPI_TEAMGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_TEAM>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_TEAMConnection_distinctArgs = {
  field: STRAPI_TEAMFieldSelector;
};


type STRAPI_TEAMConnection_groupArgs = {
  field: STRAPI_TEAMFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_TEAMConnection_maxArgs = {
  field: STRAPI_TEAMFieldSelector;
};


type STRAPI_TEAMConnection_minArgs = {
  field: STRAPI_TEAMFieldSelector;
};


type STRAPI_TEAMConnection_sumArgs = {
  field: STRAPI_TEAMFieldSelector;
};

type STRAPI_TEAMEdge = {
  readonly next: Maybe<STRAPI_TEAM>;
  readonly node: STRAPI_TEAM;
  readonly previous: Maybe<STRAPI_TEAM>;
};

type STRAPI_TEAMFieldSelector = {
  readonly bio: InputMaybe<STRAPI_TEAMBioFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly locales: InputMaybe<STRAPI_LOCALEFieldSelector>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly position: InputMaybe<FieldSelectorEnum>;
  readonly profile: InputMaybe<STRAPI__MEDIAFieldSelector>;
  readonly publishedAt: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_TEAMFilterInput = {
  readonly bio: InputMaybe<STRAPI_TEAMBioFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly locales: InputMaybe<STRAPI_LOCALEFilterListInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly position: InputMaybe<StringQueryOperatorInput>;
  readonly profile: InputMaybe<STRAPI__MEDIAFilterInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type STRAPI_TEAMFilterListInput = {
  readonly elemMatch: InputMaybe<STRAPI_TEAMFilterInput>;
};

type STRAPI_TEAMGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_TEAMEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_TEAMGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_TEAM>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_TEAMGroupConnection_distinctArgs = {
  field: STRAPI_TEAMFieldSelector;
};


type STRAPI_TEAMGroupConnection_groupArgs = {
  field: STRAPI_TEAMFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_TEAMGroupConnection_maxArgs = {
  field: STRAPI_TEAMFieldSelector;
};


type STRAPI_TEAMGroupConnection_minArgs = {
  field: STRAPI_TEAMFieldSelector;
};


type STRAPI_TEAMGroupConnection_sumArgs = {
  field: STRAPI_TEAMFieldSelector;
};

type STRAPI_TEAMSortInput = {
  readonly bio: InputMaybe<STRAPI_TEAMBioSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly locales: InputMaybe<STRAPI_LOCALESortInput>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly position: InputMaybe<SortOrderEnum>;
  readonly profile: InputMaybe<STRAPI__MEDIASortInput>;
  readonly publishedAt: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type STRAPI_TEAM_BIO_TEXTNODE = Node & {
  readonly bio: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type STRAPI_TEAM_BIO_TEXTNODEConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_TEAM_BIO_TEXTNODEEdge>;
  readonly group: ReadonlyArray<STRAPI_TEAM_BIO_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_TEAM_BIO_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_TEAM_BIO_TEXTNODEConnection_distinctArgs = {
  field: STRAPI_TEAM_BIO_TEXTNODEFieldSelector;
};


type STRAPI_TEAM_BIO_TEXTNODEConnection_groupArgs = {
  field: STRAPI_TEAM_BIO_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_TEAM_BIO_TEXTNODEConnection_maxArgs = {
  field: STRAPI_TEAM_BIO_TEXTNODEFieldSelector;
};


type STRAPI_TEAM_BIO_TEXTNODEConnection_minArgs = {
  field: STRAPI_TEAM_BIO_TEXTNODEFieldSelector;
};


type STRAPI_TEAM_BIO_TEXTNODEConnection_sumArgs = {
  field: STRAPI_TEAM_BIO_TEXTNODEFieldSelector;
};

type STRAPI_TEAM_BIO_TEXTNODEEdge = {
  readonly next: Maybe<STRAPI_TEAM_BIO_TEXTNODE>;
  readonly node: STRAPI_TEAM_BIO_TEXTNODE;
  readonly previous: Maybe<STRAPI_TEAM_BIO_TEXTNODE>;
};

type STRAPI_TEAM_BIO_TEXTNODEFieldSelector = {
  readonly bio: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type STRAPI_TEAM_BIO_TEXTNODEFilterInput = {
  readonly bio: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type STRAPI_TEAM_BIO_TEXTNODEGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_TEAM_BIO_TEXTNODEEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_TEAM_BIO_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_TEAM_BIO_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_TEAM_BIO_TEXTNODEGroupConnection_distinctArgs = {
  field: STRAPI_TEAM_BIO_TEXTNODEFieldSelector;
};


type STRAPI_TEAM_BIO_TEXTNODEGroupConnection_groupArgs = {
  field: STRAPI_TEAM_BIO_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_TEAM_BIO_TEXTNODEGroupConnection_maxArgs = {
  field: STRAPI_TEAM_BIO_TEXTNODEFieldSelector;
};


type STRAPI_TEAM_BIO_TEXTNODEGroupConnection_minArgs = {
  field: STRAPI_TEAM_BIO_TEXTNODEFieldSelector;
};


type STRAPI_TEAM_BIO_TEXTNODEGroupConnection_sumArgs = {
  field: STRAPI_TEAM_BIO_TEXTNODEFieldSelector;
};

type STRAPI_TEAM_BIO_TEXTNODESortInput = {
  readonly bio: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type STRAPI_TESTIMONIAL = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly customer: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly locale: Maybe<STRAPI_LOCALE>;
  readonly location: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly sign: Maybe<Scalars['String']>;
  readonly source: Maybe<Scalars['String']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly testimonial: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type STRAPI_TESTIMONIAL_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_TESTIMONIAL_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_TESTIMONIAL_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_TESTIMONIALConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_TESTIMONIALEdge>;
  readonly group: ReadonlyArray<STRAPI_TESTIMONIALGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_TESTIMONIAL>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_TESTIMONIALConnection_distinctArgs = {
  field: STRAPI_TESTIMONIALFieldSelector;
};


type STRAPI_TESTIMONIALConnection_groupArgs = {
  field: STRAPI_TESTIMONIALFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_TESTIMONIALConnection_maxArgs = {
  field: STRAPI_TESTIMONIALFieldSelector;
};


type STRAPI_TESTIMONIALConnection_minArgs = {
  field: STRAPI_TESTIMONIALFieldSelector;
};


type STRAPI_TESTIMONIALConnection_sumArgs = {
  field: STRAPI_TESTIMONIALFieldSelector;
};

type STRAPI_TESTIMONIALEdge = {
  readonly next: Maybe<STRAPI_TESTIMONIAL>;
  readonly node: STRAPI_TESTIMONIAL;
  readonly previous: Maybe<STRAPI_TESTIMONIAL>;
};

type STRAPI_TESTIMONIALFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly customer: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly locale: InputMaybe<STRAPI_LOCALEFieldSelector>;
  readonly location: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly publishedAt: InputMaybe<FieldSelectorEnum>;
  readonly sign: InputMaybe<FieldSelectorEnum>;
  readonly source: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly testimonial: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_TESTIMONIALFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly customer: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly locale: InputMaybe<STRAPI_LOCALEFilterInput>;
  readonly location: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly sign: InputMaybe<StringQueryOperatorInput>;
  readonly source: InputMaybe<StringQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly testimonial: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type STRAPI_TESTIMONIALFilterListInput = {
  readonly elemMatch: InputMaybe<STRAPI_TESTIMONIALFilterInput>;
};

type STRAPI_TESTIMONIALGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_TESTIMONIALEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_TESTIMONIALGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_TESTIMONIAL>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_TESTIMONIALGroupConnection_distinctArgs = {
  field: STRAPI_TESTIMONIALFieldSelector;
};


type STRAPI_TESTIMONIALGroupConnection_groupArgs = {
  field: STRAPI_TESTIMONIALFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_TESTIMONIALGroupConnection_maxArgs = {
  field: STRAPI_TESTIMONIALFieldSelector;
};


type STRAPI_TESTIMONIALGroupConnection_minArgs = {
  field: STRAPI_TESTIMONIALFieldSelector;
};


type STRAPI_TESTIMONIALGroupConnection_sumArgs = {
  field: STRAPI_TESTIMONIALFieldSelector;
};

type STRAPI_TESTIMONIALSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly customer: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly locale: InputMaybe<STRAPI_LOCALESortInput>;
  readonly location: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly publishedAt: InputMaybe<SortOrderEnum>;
  readonly sign: InputMaybe<SortOrderEnum>;
  readonly source: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly testimonial: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type STRAPI_TOUR = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly duration: Maybe<Scalars['Int']>;
  readonly excerpt: Maybe<Scalars['String']>;
  readonly experience: Maybe<Scalars['String']>;
  readonly featured: Maybe<Scalars['Boolean']>;
  readonly finish: Maybe<Scalars['String']>;
  readonly fitness: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly information: Maybe<STRAPI_TOURInformation>;
  readonly internal: Internal;
  readonly locale: Maybe<STRAPI_LOCALE>;
  readonly minimum: Maybe<Scalars['Int']>;
  readonly name: Maybe<Scalars['String']>;
  readonly ogimage: Maybe<STRAPI__MEDIA>;
  readonly parent: Maybe<Node>;
  readonly peek: Maybe<Scalars['String']>;
  readonly price: Maybe<Scalars['Int']>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly slug: Maybe<Scalars['String']>;
  readonly sport: Maybe<Scalars['String']>;
  readonly start: Maybe<Scalars['String']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly timeframe: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type STRAPI_TOUR_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_TOUR_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_TOUR_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_TOURConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_TOUREdge>;
  readonly group: ReadonlyArray<STRAPI_TOURGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_TOUR>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_TOURConnection_distinctArgs = {
  field: STRAPI_TOURFieldSelector;
};


type STRAPI_TOURConnection_groupArgs = {
  field: STRAPI_TOURFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_TOURConnection_maxArgs = {
  field: STRAPI_TOURFieldSelector;
};


type STRAPI_TOURConnection_minArgs = {
  field: STRAPI_TOURFieldSelector;
};


type STRAPI_TOURConnection_sumArgs = {
  field: STRAPI_TOURFieldSelector;
};

type STRAPI_TOUREdge = {
  readonly next: Maybe<STRAPI_TOUR>;
  readonly node: STRAPI_TOUR;
  readonly previous: Maybe<STRAPI_TOUR>;
};

type STRAPI_TOURFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly duration: InputMaybe<FieldSelectorEnum>;
  readonly excerpt: InputMaybe<FieldSelectorEnum>;
  readonly experience: InputMaybe<FieldSelectorEnum>;
  readonly featured: InputMaybe<FieldSelectorEnum>;
  readonly finish: InputMaybe<FieldSelectorEnum>;
  readonly fitness: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly information: InputMaybe<STRAPI_TOURInformationFieldSelector>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly locale: InputMaybe<STRAPI_LOCALEFieldSelector>;
  readonly minimum: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly ogimage: InputMaybe<STRAPI__MEDIAFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly peek: InputMaybe<FieldSelectorEnum>;
  readonly price: InputMaybe<FieldSelectorEnum>;
  readonly publishedAt: InputMaybe<FieldSelectorEnum>;
  readonly slug: InputMaybe<FieldSelectorEnum>;
  readonly sport: InputMaybe<FieldSelectorEnum>;
  readonly start: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly timeframe: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_TOURFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly duration: InputMaybe<IntQueryOperatorInput>;
  readonly excerpt: InputMaybe<StringQueryOperatorInput>;
  readonly experience: InputMaybe<StringQueryOperatorInput>;
  readonly featured: InputMaybe<BooleanQueryOperatorInput>;
  readonly finish: InputMaybe<StringQueryOperatorInput>;
  readonly fitness: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly information: InputMaybe<STRAPI_TOURInformationFilterInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly locale: InputMaybe<STRAPI_LOCALEFilterInput>;
  readonly minimum: InputMaybe<IntQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly ogimage: InputMaybe<STRAPI__MEDIAFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly peek: InputMaybe<StringQueryOperatorInput>;
  readonly price: InputMaybe<IntQueryOperatorInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly sport: InputMaybe<StringQueryOperatorInput>;
  readonly start: InputMaybe<StringQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly timeframe: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type STRAPI_TOURFilterListInput = {
  readonly elemMatch: InputMaybe<STRAPI_TOURFilterInput>;
};

type STRAPI_TOURGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_TOUREdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_TOURGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_TOUR>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_TOURGroupConnection_distinctArgs = {
  field: STRAPI_TOURFieldSelector;
};


type STRAPI_TOURGroupConnection_groupArgs = {
  field: STRAPI_TOURFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_TOURGroupConnection_maxArgs = {
  field: STRAPI_TOURFieldSelector;
};


type STRAPI_TOURGroupConnection_minArgs = {
  field: STRAPI_TOURFieldSelector;
};


type STRAPI_TOURGroupConnection_sumArgs = {
  field: STRAPI_TOURFieldSelector;
};

type STRAPI_TOURInformation = {
  readonly data: Maybe<STRAPI_TOUR_INFORMATION_TEXTNODE>;
};

type STRAPI_TOURInformationFieldSelector = {
  readonly data: InputMaybe<STRAPI_TOUR_INFORMATION_TEXTNODEFieldSelector>;
};

type STRAPI_TOURInformationFilterInput = {
  readonly data: InputMaybe<STRAPI_TOUR_INFORMATION_TEXTNODEFilterInput>;
};

type STRAPI_TOURInformationSortInput = {
  readonly data: InputMaybe<STRAPI_TOUR_INFORMATION_TEXTNODESortInput>;
};

type STRAPI_TOURSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly duration: InputMaybe<SortOrderEnum>;
  readonly excerpt: InputMaybe<SortOrderEnum>;
  readonly experience: InputMaybe<SortOrderEnum>;
  readonly featured: InputMaybe<SortOrderEnum>;
  readonly finish: InputMaybe<SortOrderEnum>;
  readonly fitness: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly information: InputMaybe<STRAPI_TOURInformationSortInput>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly locale: InputMaybe<STRAPI_LOCALESortInput>;
  readonly minimum: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly ogimage: InputMaybe<STRAPI__MEDIASortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly peek: InputMaybe<SortOrderEnum>;
  readonly price: InputMaybe<SortOrderEnum>;
  readonly publishedAt: InputMaybe<SortOrderEnum>;
  readonly slug: InputMaybe<SortOrderEnum>;
  readonly sport: InputMaybe<SortOrderEnum>;
  readonly start: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly timeframe: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type STRAPI_TOUR_INFORMATION_TEXTNODE = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly information: Maybe<Scalars['String']>;
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type STRAPI_TOUR_INFORMATION_TEXTNODEConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_TOUR_INFORMATION_TEXTNODEEdge>;
  readonly group: ReadonlyArray<STRAPI_TOUR_INFORMATION_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_TOUR_INFORMATION_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_TOUR_INFORMATION_TEXTNODEConnection_distinctArgs = {
  field: STRAPI_TOUR_INFORMATION_TEXTNODEFieldSelector;
};


type STRAPI_TOUR_INFORMATION_TEXTNODEConnection_groupArgs = {
  field: STRAPI_TOUR_INFORMATION_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_TOUR_INFORMATION_TEXTNODEConnection_maxArgs = {
  field: STRAPI_TOUR_INFORMATION_TEXTNODEFieldSelector;
};


type STRAPI_TOUR_INFORMATION_TEXTNODEConnection_minArgs = {
  field: STRAPI_TOUR_INFORMATION_TEXTNODEFieldSelector;
};


type STRAPI_TOUR_INFORMATION_TEXTNODEConnection_sumArgs = {
  field: STRAPI_TOUR_INFORMATION_TEXTNODEFieldSelector;
};

type STRAPI_TOUR_INFORMATION_TEXTNODEEdge = {
  readonly next: Maybe<STRAPI_TOUR_INFORMATION_TEXTNODE>;
  readonly node: STRAPI_TOUR_INFORMATION_TEXTNODE;
  readonly previous: Maybe<STRAPI_TOUR_INFORMATION_TEXTNODE>;
};

type STRAPI_TOUR_INFORMATION_TEXTNODEFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly information: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type STRAPI_TOUR_INFORMATION_TEXTNODEFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly information: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type STRAPI_TOUR_INFORMATION_TEXTNODEGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_TOUR_INFORMATION_TEXTNODEEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_TOUR_INFORMATION_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_TOUR_INFORMATION_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_TOUR_INFORMATION_TEXTNODEGroupConnection_distinctArgs = {
  field: STRAPI_TOUR_INFORMATION_TEXTNODEFieldSelector;
};


type STRAPI_TOUR_INFORMATION_TEXTNODEGroupConnection_groupArgs = {
  field: STRAPI_TOUR_INFORMATION_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_TOUR_INFORMATION_TEXTNODEGroupConnection_maxArgs = {
  field: STRAPI_TOUR_INFORMATION_TEXTNODEFieldSelector;
};


type STRAPI_TOUR_INFORMATION_TEXTNODEGroupConnection_minArgs = {
  field: STRAPI_TOUR_INFORMATION_TEXTNODEFieldSelector;
};


type STRAPI_TOUR_INFORMATION_TEXTNODEGroupConnection_sumArgs = {
  field: STRAPI_TOUR_INFORMATION_TEXTNODEFieldSelector;
};

type STRAPI_TOUR_INFORMATION_TEXTNODESortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly information: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type STRAPI__MEDIA = Node & {
  readonly alternativeText: Maybe<Scalars['String']>;
  readonly caption: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly ext: Maybe<Scalars['String']>;
  readonly formats: Maybe<STRAPI__MEDIAFormats>;
  readonly hash: Maybe<Scalars['String']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly localFile: Maybe<File>;
  readonly mime: Maybe<Scalars['String']>;
  readonly name: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly size: Maybe<Scalars['Float']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
  readonly url: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};


type STRAPI__MEDIA_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI__MEDIA_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI__MEDIAConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__MEDIAEdge>;
  readonly group: ReadonlyArray<STRAPI__MEDIAGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__MEDIA>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__MEDIAConnection_distinctArgs = {
  field: STRAPI__MEDIAFieldSelector;
};


type STRAPI__MEDIAConnection_groupArgs = {
  field: STRAPI__MEDIAFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__MEDIAConnection_maxArgs = {
  field: STRAPI__MEDIAFieldSelector;
};


type STRAPI__MEDIAConnection_minArgs = {
  field: STRAPI__MEDIAFieldSelector;
};


type STRAPI__MEDIAConnection_sumArgs = {
  field: STRAPI__MEDIAFieldSelector;
};

type STRAPI__MEDIAEdge = {
  readonly next: Maybe<STRAPI__MEDIA>;
  readonly node: STRAPI__MEDIA;
  readonly previous: Maybe<STRAPI__MEDIA>;
};

type STRAPI__MEDIAFieldSelector = {
  readonly alternativeText: InputMaybe<FieldSelectorEnum>;
  readonly caption: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly ext: InputMaybe<FieldSelectorEnum>;
  readonly formats: InputMaybe<STRAPI__MEDIAFormatsFieldSelector>;
  readonly hash: InputMaybe<FieldSelectorEnum>;
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly localFile: InputMaybe<FileFieldSelector>;
  readonly mime: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type STRAPI__MEDIAFilterInput = {
  readonly alternativeText: InputMaybe<StringQueryOperatorInput>;
  readonly caption: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly formats: InputMaybe<STRAPI__MEDIAFormatsFilterInput>;
  readonly hash: InputMaybe<StringQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly localFile: InputMaybe<FileFilterInput>;
  readonly mime: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly size: InputMaybe<FloatQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type STRAPI__MEDIAFormats = {
  readonly large: Maybe<STRAPI__MEDIAFormatsLarge>;
  readonly medium: Maybe<STRAPI__MEDIAFormatsMedium>;
  readonly small: Maybe<STRAPI__MEDIAFormatsSmall>;
  readonly thumbnail: Maybe<STRAPI__MEDIAFormatsThumbnail>;
};

type STRAPI__MEDIAFormatsFieldSelector = {
  readonly large: InputMaybe<STRAPI__MEDIAFormatsLargeFieldSelector>;
  readonly medium: InputMaybe<STRAPI__MEDIAFormatsMediumFieldSelector>;
  readonly small: InputMaybe<STRAPI__MEDIAFormatsSmallFieldSelector>;
  readonly thumbnail: InputMaybe<STRAPI__MEDIAFormatsThumbnailFieldSelector>;
};

type STRAPI__MEDIAFormatsFilterInput = {
  readonly large: InputMaybe<STRAPI__MEDIAFormatsLargeFilterInput>;
  readonly medium: InputMaybe<STRAPI__MEDIAFormatsMediumFilterInput>;
  readonly small: InputMaybe<STRAPI__MEDIAFormatsSmallFilterInput>;
  readonly thumbnail: InputMaybe<STRAPI__MEDIAFormatsThumbnailFilterInput>;
};

type STRAPI__MEDIAFormatsLarge = {
  readonly ext: Maybe<Scalars['String']>;
  readonly hash: Maybe<Scalars['String']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly mime: Maybe<Scalars['String']>;
  readonly name: Maybe<Scalars['String']>;
  readonly size: Maybe<Scalars['Float']>;
  readonly url: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};

type STRAPI__MEDIAFormatsLargeFieldSelector = {
  readonly ext: InputMaybe<FieldSelectorEnum>;
  readonly hash: InputMaybe<FieldSelectorEnum>;
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly mime: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type STRAPI__MEDIAFormatsLargeFilterInput = {
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly hash: InputMaybe<StringQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly mime: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<FloatQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type STRAPI__MEDIAFormatsLargeSortInput = {
  readonly ext: InputMaybe<SortOrderEnum>;
  readonly hash: InputMaybe<SortOrderEnum>;
  readonly height: InputMaybe<SortOrderEnum>;
  readonly mime: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type STRAPI__MEDIAFormatsMedium = {
  readonly ext: Maybe<Scalars['String']>;
  readonly hash: Maybe<Scalars['String']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly mime: Maybe<Scalars['String']>;
  readonly name: Maybe<Scalars['String']>;
  readonly size: Maybe<Scalars['Float']>;
  readonly url: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};

type STRAPI__MEDIAFormatsMediumFieldSelector = {
  readonly ext: InputMaybe<FieldSelectorEnum>;
  readonly hash: InputMaybe<FieldSelectorEnum>;
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly mime: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type STRAPI__MEDIAFormatsMediumFilterInput = {
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly hash: InputMaybe<StringQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly mime: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<FloatQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type STRAPI__MEDIAFormatsMediumSortInput = {
  readonly ext: InputMaybe<SortOrderEnum>;
  readonly hash: InputMaybe<SortOrderEnum>;
  readonly height: InputMaybe<SortOrderEnum>;
  readonly mime: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type STRAPI__MEDIAFormatsSmall = {
  readonly ext: Maybe<Scalars['String']>;
  readonly hash: Maybe<Scalars['String']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly mime: Maybe<Scalars['String']>;
  readonly name: Maybe<Scalars['String']>;
  readonly size: Maybe<Scalars['Float']>;
  readonly url: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};

type STRAPI__MEDIAFormatsSmallFieldSelector = {
  readonly ext: InputMaybe<FieldSelectorEnum>;
  readonly hash: InputMaybe<FieldSelectorEnum>;
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly mime: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type STRAPI__MEDIAFormatsSmallFilterInput = {
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly hash: InputMaybe<StringQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly mime: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<FloatQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type STRAPI__MEDIAFormatsSmallSortInput = {
  readonly ext: InputMaybe<SortOrderEnum>;
  readonly hash: InputMaybe<SortOrderEnum>;
  readonly height: InputMaybe<SortOrderEnum>;
  readonly mime: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type STRAPI__MEDIAFormatsSortInput = {
  readonly large: InputMaybe<STRAPI__MEDIAFormatsLargeSortInput>;
  readonly medium: InputMaybe<STRAPI__MEDIAFormatsMediumSortInput>;
  readonly small: InputMaybe<STRAPI__MEDIAFormatsSmallSortInput>;
  readonly thumbnail: InputMaybe<STRAPI__MEDIAFormatsThumbnailSortInput>;
};

type STRAPI__MEDIAFormatsThumbnail = {
  readonly ext: Maybe<Scalars['String']>;
  readonly hash: Maybe<Scalars['String']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly mime: Maybe<Scalars['String']>;
  readonly name: Maybe<Scalars['String']>;
  readonly size: Maybe<Scalars['Float']>;
  readonly url: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};

type STRAPI__MEDIAFormatsThumbnailFieldSelector = {
  readonly ext: InputMaybe<FieldSelectorEnum>;
  readonly hash: InputMaybe<FieldSelectorEnum>;
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly mime: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type STRAPI__MEDIAFormatsThumbnailFilterInput = {
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly hash: InputMaybe<StringQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly mime: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<FloatQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type STRAPI__MEDIAFormatsThumbnailSortInput = {
  readonly ext: InputMaybe<SortOrderEnum>;
  readonly hash: InputMaybe<SortOrderEnum>;
  readonly height: InputMaybe<SortOrderEnum>;
  readonly mime: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type STRAPI__MEDIAGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__MEDIAEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI__MEDIAGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__MEDIA>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__MEDIAGroupConnection_distinctArgs = {
  field: STRAPI__MEDIAFieldSelector;
};


type STRAPI__MEDIAGroupConnection_groupArgs = {
  field: STRAPI__MEDIAFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__MEDIAGroupConnection_maxArgs = {
  field: STRAPI__MEDIAFieldSelector;
};


type STRAPI__MEDIAGroupConnection_minArgs = {
  field: STRAPI__MEDIAFieldSelector;
};


type STRAPI__MEDIAGroupConnection_sumArgs = {
  field: STRAPI__MEDIAFieldSelector;
};

type STRAPI__MEDIASortInput = {
  readonly alternativeText: InputMaybe<SortOrderEnum>;
  readonly caption: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly ext: InputMaybe<SortOrderEnum>;
  readonly formats: InputMaybe<STRAPI__MEDIAFormatsSortInput>;
  readonly hash: InputMaybe<SortOrderEnum>;
  readonly height: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly localFile: InputMaybe<FileSortInput>;
  readonly mime: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type Site = Node & {
  readonly buildTime: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly graphqlTypegen: Maybe<SiteGraphqlTypegen>;
  readonly host: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly jsxRuntime: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly pathPrefix: Maybe<Scalars['String']>;
  readonly polyfill: Maybe<Scalars['Boolean']>;
  readonly port: Maybe<Scalars['Int']>;
  readonly siteMetadata: Maybe<SiteSiteMetadata>;
  readonly trailingSlash: Maybe<Scalars['String']>;
};


type Site_buildTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SiteBuildMetadata = Node & {
  readonly buildTime: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};


type SiteBuildMetadata_buildTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SiteBuildMetadataConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
  readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteBuildMetadata>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteBuildMetadataConnection_distinctArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataConnection_groupArgs = {
  field: SiteBuildMetadataFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteBuildMetadataConnection_maxArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataConnection_minArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataConnection_sumArgs = {
  field: SiteBuildMetadataFieldSelector;
};

type SiteBuildMetadataEdge = {
  readonly next: Maybe<SiteBuildMetadata>;
  readonly node: SiteBuildMetadata;
  readonly previous: Maybe<SiteBuildMetadata>;
};

type SiteBuildMetadataFieldSelector = {
  readonly buildTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type SiteBuildMetadataFilterInput = {
  readonly buildTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type SiteBuildMetadataGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteBuildMetadata>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteBuildMetadataGroupConnection_distinctArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataGroupConnection_groupArgs = {
  field: SiteBuildMetadataFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteBuildMetadataGroupConnection_maxArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataGroupConnection_minArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataGroupConnection_sumArgs = {
  field: SiteBuildMetadataFieldSelector;
};

type SiteBuildMetadataSortInput = {
  readonly buildTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type SiteConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteEdge>;
  readonly group: ReadonlyArray<SiteGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Site>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteConnection_distinctArgs = {
  field: SiteFieldSelector;
};


type SiteConnection_groupArgs = {
  field: SiteFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteConnection_maxArgs = {
  field: SiteFieldSelector;
};


type SiteConnection_minArgs = {
  field: SiteFieldSelector;
};


type SiteConnection_sumArgs = {
  field: SiteFieldSelector;
};

type SiteEdge = {
  readonly next: Maybe<Site>;
  readonly node: Site;
  readonly previous: Maybe<Site>;
};

type SiteFieldSelector = {
  readonly buildTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenFieldSelector>;
  readonly host: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly jsxRuntime: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly pathPrefix: InputMaybe<FieldSelectorEnum>;
  readonly polyfill: InputMaybe<FieldSelectorEnum>;
  readonly port: InputMaybe<FieldSelectorEnum>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataFieldSelector>;
  readonly trailingSlash: InputMaybe<FieldSelectorEnum>;
};

type SiteFilterInput = {
  readonly buildTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenFilterInput>;
  readonly host: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly jsxRuntime: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pathPrefix: InputMaybe<StringQueryOperatorInput>;
  readonly polyfill: InputMaybe<BooleanQueryOperatorInput>;
  readonly port: InputMaybe<IntQueryOperatorInput>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
  readonly trailingSlash: InputMaybe<StringQueryOperatorInput>;
};

type SiteFunction = Node & {
  readonly absoluteCompiledFilePath: Scalars['String'];
  readonly children: ReadonlyArray<Node>;
  readonly functionRoute: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly matchPath: Maybe<Scalars['String']>;
  readonly originalAbsoluteFilePath: Scalars['String'];
  readonly originalRelativeFilePath: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly pluginName: Scalars['String'];
  readonly relativeCompiledFilePath: Scalars['String'];
};

type SiteFunctionConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteFunctionEdge>;
  readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteFunction>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteFunctionConnection_distinctArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionConnection_groupArgs = {
  field: SiteFunctionFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteFunctionConnection_maxArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionConnection_minArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionConnection_sumArgs = {
  field: SiteFunctionFieldSelector;
};

type SiteFunctionEdge = {
  readonly next: Maybe<SiteFunction>;
  readonly node: SiteFunction;
  readonly previous: Maybe<SiteFunction>;
};

type SiteFunctionFieldSelector = {
  readonly absoluteCompiledFilePath: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly functionRoute: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly matchPath: InputMaybe<FieldSelectorEnum>;
  readonly originalAbsoluteFilePath: InputMaybe<FieldSelectorEnum>;
  readonly originalRelativeFilePath: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly pluginName: InputMaybe<FieldSelectorEnum>;
  readonly relativeCompiledFilePath: InputMaybe<FieldSelectorEnum>;
};

type SiteFunctionFilterInput = {
  readonly absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly functionRoute: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly matchPath: InputMaybe<StringQueryOperatorInput>;
  readonly originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pluginName: InputMaybe<StringQueryOperatorInput>;
  readonly relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
};

type SiteFunctionGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteFunctionEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteFunction>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteFunctionGroupConnection_distinctArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionGroupConnection_groupArgs = {
  field: SiteFunctionFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteFunctionGroupConnection_maxArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionGroupConnection_minArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionGroupConnection_sumArgs = {
  field: SiteFunctionFieldSelector;
};

type SiteFunctionSortInput = {
  readonly absoluteCompiledFilePath: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly functionRoute: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly matchPath: InputMaybe<SortOrderEnum>;
  readonly originalAbsoluteFilePath: InputMaybe<SortOrderEnum>;
  readonly originalRelativeFilePath: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly pluginName: InputMaybe<SortOrderEnum>;
  readonly relativeCompiledFilePath: InputMaybe<SortOrderEnum>;
};

type SiteGraphqlTypegen = {
  readonly documentSearchPaths: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly generateOnBuild: Maybe<Scalars['Boolean']>;
  readonly typesOutputPath: Maybe<Scalars['String']>;
};

type SiteGraphqlTypegenFieldSelector = {
  readonly documentSearchPaths: InputMaybe<FieldSelectorEnum>;
  readonly generateOnBuild: InputMaybe<FieldSelectorEnum>;
  readonly typesOutputPath: InputMaybe<FieldSelectorEnum>;
};

type SiteGraphqlTypegenFilterInput = {
  readonly documentSearchPaths: InputMaybe<StringQueryOperatorInput>;
  readonly generateOnBuild: InputMaybe<BooleanQueryOperatorInput>;
  readonly typesOutputPath: InputMaybe<StringQueryOperatorInput>;
};

type SiteGraphqlTypegenSortInput = {
  readonly documentSearchPaths: InputMaybe<SortOrderEnum>;
  readonly generateOnBuild: InputMaybe<SortOrderEnum>;
  readonly typesOutputPath: InputMaybe<SortOrderEnum>;
};

type SiteGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Site>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteGroupConnection_distinctArgs = {
  field: SiteFieldSelector;
};


type SiteGroupConnection_groupArgs = {
  field: SiteFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteGroupConnection_maxArgs = {
  field: SiteFieldSelector;
};


type SiteGroupConnection_minArgs = {
  field: SiteFieldSelector;
};


type SiteGroupConnection_sumArgs = {
  field: SiteFieldSelector;
};

type SitePage = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly component: Scalars['String'];
  readonly componentChunkName: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly internalComponentName: Scalars['String'];
  readonly matchPath: Maybe<Scalars['String']>;
  readonly pageContext: Maybe<Scalars['JSON']>;
  readonly parent: Maybe<Node>;
  readonly path: Scalars['String'];
  readonly pluginCreator: Maybe<SitePlugin>;
};

type SitePageConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePageEdge>;
  readonly group: ReadonlyArray<SitePageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePageConnection_distinctArgs = {
  field: SitePageFieldSelector;
};


type SitePageConnection_groupArgs = {
  field: SitePageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePageConnection_maxArgs = {
  field: SitePageFieldSelector;
};


type SitePageConnection_minArgs = {
  field: SitePageFieldSelector;
};


type SitePageConnection_sumArgs = {
  field: SitePageFieldSelector;
};

type SitePageEdge = {
  readonly next: Maybe<SitePage>;
  readonly node: SitePage;
  readonly previous: Maybe<SitePage>;
};

type SitePageFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly component: InputMaybe<FieldSelectorEnum>;
  readonly componentChunkName: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly internalComponentName: InputMaybe<FieldSelectorEnum>;
  readonly matchPath: InputMaybe<FieldSelectorEnum>;
  readonly pageContext: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly path: InputMaybe<FieldSelectorEnum>;
  readonly pluginCreator: InputMaybe<SitePluginFieldSelector>;
};

type SitePageFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly component: InputMaybe<StringQueryOperatorInput>;
  readonly componentChunkName: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly internalComponentName: InputMaybe<StringQueryOperatorInput>;
  readonly matchPath: InputMaybe<StringQueryOperatorInput>;
  readonly pageContext: InputMaybe<JSONQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly path: InputMaybe<StringQueryOperatorInput>;
  readonly pluginCreator: InputMaybe<SitePluginFilterInput>;
};

type SitePageGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePageEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SitePageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePageGroupConnection_distinctArgs = {
  field: SitePageFieldSelector;
};


type SitePageGroupConnection_groupArgs = {
  field: SitePageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePageGroupConnection_maxArgs = {
  field: SitePageFieldSelector;
};


type SitePageGroupConnection_minArgs = {
  field: SitePageFieldSelector;
};


type SitePageGroupConnection_sumArgs = {
  field: SitePageFieldSelector;
};

type SitePageSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly component: InputMaybe<SortOrderEnum>;
  readonly componentChunkName: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly internalComponentName: InputMaybe<SortOrderEnum>;
  readonly matchPath: InputMaybe<SortOrderEnum>;
  readonly pageContext: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly path: InputMaybe<SortOrderEnum>;
  readonly pluginCreator: InputMaybe<SitePluginSortInput>;
};

type SitePlugin = Node & {
  readonly browserAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly name: Maybe<Scalars['String']>;
  readonly nodeAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly packageJson: Maybe<Scalars['JSON']>;
  readonly parent: Maybe<Node>;
  readonly pluginFilepath: Maybe<Scalars['String']>;
  readonly pluginOptions: Maybe<Scalars['JSON']>;
  readonly resolve: Maybe<Scalars['String']>;
  readonly ssrAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly version: Maybe<Scalars['String']>;
};

type SitePluginConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePluginEdge>;
  readonly group: ReadonlyArray<SitePluginGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePlugin>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePluginConnection_distinctArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginConnection_groupArgs = {
  field: SitePluginFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePluginConnection_maxArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginConnection_minArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginConnection_sumArgs = {
  field: SitePluginFieldSelector;
};

type SitePluginEdge = {
  readonly next: Maybe<SitePlugin>;
  readonly node: SitePlugin;
  readonly previous: Maybe<SitePlugin>;
};

type SitePluginFieldSelector = {
  readonly browserAPIs: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly nodeAPIs: InputMaybe<FieldSelectorEnum>;
  readonly packageJson: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly pluginFilepath: InputMaybe<FieldSelectorEnum>;
  readonly pluginOptions: InputMaybe<FieldSelectorEnum>;
  readonly resolve: InputMaybe<FieldSelectorEnum>;
  readonly ssrAPIs: InputMaybe<FieldSelectorEnum>;
  readonly version: InputMaybe<FieldSelectorEnum>;
};

type SitePluginFilterInput = {
  readonly browserAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nodeAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly packageJson: InputMaybe<JSONQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pluginFilepath: InputMaybe<StringQueryOperatorInput>;
  readonly pluginOptions: InputMaybe<JSONQueryOperatorInput>;
  readonly resolve: InputMaybe<StringQueryOperatorInput>;
  readonly ssrAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly version: InputMaybe<StringQueryOperatorInput>;
};

type SitePluginGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePluginEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SitePluginGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePlugin>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePluginGroupConnection_distinctArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginGroupConnection_groupArgs = {
  field: SitePluginFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePluginGroupConnection_maxArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginGroupConnection_minArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginGroupConnection_sumArgs = {
  field: SitePluginFieldSelector;
};

type SitePluginSortInput = {
  readonly browserAPIs: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly nodeAPIs: InputMaybe<SortOrderEnum>;
  readonly packageJson: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly pluginFilepath: InputMaybe<SortOrderEnum>;
  readonly pluginOptions: InputMaybe<SortOrderEnum>;
  readonly resolve: InputMaybe<SortOrderEnum>;
  readonly ssrAPIs: InputMaybe<SortOrderEnum>;
  readonly version: InputMaybe<SortOrderEnum>;
};

type SiteSiteMetadata = {
  readonly areaServed: Maybe<Scalars['String']>;
  readonly author: Maybe<Scalars['String']>;
  readonly defaultDescription: Maybe<Scalars['String']>;
  readonly defaultImage: Maybe<Scalars['String']>;
  readonly defaultImageAlt: Maybe<Scalars['String']>;
  readonly description: Maybe<Scalars['String']>;
  readonly email: Maybe<Scalars['String']>;
  readonly geo: Maybe<SiteSiteMetadataGeo>;
  readonly itemType: Maybe<Scalars['String']>;
  readonly jobEmail: Maybe<Scalars['String']>;
  readonly location: Maybe<SiteSiteMetadataLocation>;
  readonly logo: Maybe<Scalars['String']>;
  readonly numberOfEmployees: Maybe<Scalars['String']>;
  readonly offerCatalog: Maybe<SiteSiteMetadataOfferCatalog>;
  readonly openingHours: Maybe<Scalars['String']>;
  readonly paymentAccepted: Maybe<Scalars['String']>;
  readonly priceRange: Maybe<Scalars['String']>;
  readonly rentalLocation: Maybe<SiteSiteMetadataRentalLocation>;
  readonly siteUrl: Maybe<Scalars['String']>;
  readonly slogan: Maybe<Scalars['String']>;
  readonly social: Maybe<SiteSiteMetadataSocial>;
  readonly telephone: Maybe<Scalars['String']>;
  readonly themeColor: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
  readonly url: Maybe<Scalars['String']>;
};

type SiteSiteMetadataFieldSelector = {
  readonly areaServed: InputMaybe<FieldSelectorEnum>;
  readonly author: InputMaybe<FieldSelectorEnum>;
  readonly defaultDescription: InputMaybe<FieldSelectorEnum>;
  readonly defaultImage: InputMaybe<FieldSelectorEnum>;
  readonly defaultImageAlt: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly email: InputMaybe<FieldSelectorEnum>;
  readonly geo: InputMaybe<SiteSiteMetadataGeoFieldSelector>;
  readonly itemType: InputMaybe<FieldSelectorEnum>;
  readonly jobEmail: InputMaybe<FieldSelectorEnum>;
  readonly location: InputMaybe<SiteSiteMetadataLocationFieldSelector>;
  readonly logo: InputMaybe<FieldSelectorEnum>;
  readonly numberOfEmployees: InputMaybe<FieldSelectorEnum>;
  readonly offerCatalog: InputMaybe<SiteSiteMetadataOfferCatalogFieldSelector>;
  readonly openingHours: InputMaybe<FieldSelectorEnum>;
  readonly paymentAccepted: InputMaybe<FieldSelectorEnum>;
  readonly priceRange: InputMaybe<FieldSelectorEnum>;
  readonly rentalLocation: InputMaybe<SiteSiteMetadataRentalLocationFieldSelector>;
  readonly siteUrl: InputMaybe<FieldSelectorEnum>;
  readonly slogan: InputMaybe<FieldSelectorEnum>;
  readonly social: InputMaybe<SiteSiteMetadataSocialFieldSelector>;
  readonly telephone: InputMaybe<FieldSelectorEnum>;
  readonly themeColor: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
};

type SiteSiteMetadataFilterInput = {
  readonly areaServed: InputMaybe<StringQueryOperatorInput>;
  readonly author: InputMaybe<StringQueryOperatorInput>;
  readonly defaultDescription: InputMaybe<StringQueryOperatorInput>;
  readonly defaultImage: InputMaybe<StringQueryOperatorInput>;
  readonly defaultImageAlt: InputMaybe<StringQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly email: InputMaybe<StringQueryOperatorInput>;
  readonly geo: InputMaybe<SiteSiteMetadataGeoFilterInput>;
  readonly itemType: InputMaybe<StringQueryOperatorInput>;
  readonly jobEmail: InputMaybe<StringQueryOperatorInput>;
  readonly location: InputMaybe<SiteSiteMetadataLocationFilterInput>;
  readonly logo: InputMaybe<StringQueryOperatorInput>;
  readonly numberOfEmployees: InputMaybe<StringQueryOperatorInput>;
  readonly offerCatalog: InputMaybe<SiteSiteMetadataOfferCatalogFilterInput>;
  readonly openingHours: InputMaybe<StringQueryOperatorInput>;
  readonly paymentAccepted: InputMaybe<StringQueryOperatorInput>;
  readonly priceRange: InputMaybe<StringQueryOperatorInput>;
  readonly rentalLocation: InputMaybe<SiteSiteMetadataRentalLocationFilterInput>;
  readonly siteUrl: InputMaybe<StringQueryOperatorInput>;
  readonly slogan: InputMaybe<StringQueryOperatorInput>;
  readonly social: InputMaybe<SiteSiteMetadataSocialFilterInput>;
  readonly telephone: InputMaybe<StringQueryOperatorInput>;
  readonly themeColor: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type SiteSiteMetadataGeo = {
  readonly geoRadius: Maybe<Scalars['String']>;
  readonly latitude: Maybe<Scalars['String']>;
  readonly longitude: Maybe<Scalars['String']>;
};

type SiteSiteMetadataGeoFieldSelector = {
  readonly geoRadius: InputMaybe<FieldSelectorEnum>;
  readonly latitude: InputMaybe<FieldSelectorEnum>;
  readonly longitude: InputMaybe<FieldSelectorEnum>;
};

type SiteSiteMetadataGeoFilterInput = {
  readonly geoRadius: InputMaybe<StringQueryOperatorInput>;
  readonly latitude: InputMaybe<StringQueryOperatorInput>;
  readonly longitude: InputMaybe<StringQueryOperatorInput>;
};

type SiteSiteMetadataGeoSortInput = {
  readonly geoRadius: InputMaybe<SortOrderEnum>;
  readonly latitude: InputMaybe<SortOrderEnum>;
  readonly longitude: InputMaybe<SortOrderEnum>;
};

type SiteSiteMetadataLocation = {
  readonly address: Maybe<SiteSiteMetadataLocationAddress>;
};

type SiteSiteMetadataLocationAddress = {
  readonly addressLocality: Maybe<Scalars['String']>;
  readonly addressRegion: Maybe<Scalars['String']>;
  readonly postalCode: Maybe<Scalars['String']>;
  readonly streetAddress: Maybe<Scalars['String']>;
};

type SiteSiteMetadataLocationAddressFieldSelector = {
  readonly addressLocality: InputMaybe<FieldSelectorEnum>;
  readonly addressRegion: InputMaybe<FieldSelectorEnum>;
  readonly postalCode: InputMaybe<FieldSelectorEnum>;
  readonly streetAddress: InputMaybe<FieldSelectorEnum>;
};

type SiteSiteMetadataLocationAddressFilterInput = {
  readonly addressLocality: InputMaybe<StringQueryOperatorInput>;
  readonly addressRegion: InputMaybe<StringQueryOperatorInput>;
  readonly postalCode: InputMaybe<StringQueryOperatorInput>;
  readonly streetAddress: InputMaybe<StringQueryOperatorInput>;
};

type SiteSiteMetadataLocationAddressSortInput = {
  readonly addressLocality: InputMaybe<SortOrderEnum>;
  readonly addressRegion: InputMaybe<SortOrderEnum>;
  readonly postalCode: InputMaybe<SortOrderEnum>;
  readonly streetAddress: InputMaybe<SortOrderEnum>;
};

type SiteSiteMetadataLocationFieldSelector = {
  readonly address: InputMaybe<SiteSiteMetadataLocationAddressFieldSelector>;
};

type SiteSiteMetadataLocationFilterInput = {
  readonly address: InputMaybe<SiteSiteMetadataLocationAddressFilterInput>;
};

type SiteSiteMetadataLocationSortInput = {
  readonly address: InputMaybe<SiteSiteMetadataLocationAddressSortInput>;
};

type SiteSiteMetadataOfferCatalog = {
  readonly itemOffered1: Maybe<Scalars['String']>;
  readonly itemOffered2: Maybe<Scalars['String']>;
  readonly itemOffered3: Maybe<Scalars['String']>;
};

type SiteSiteMetadataOfferCatalogFieldSelector = {
  readonly itemOffered1: InputMaybe<FieldSelectorEnum>;
  readonly itemOffered2: InputMaybe<FieldSelectorEnum>;
  readonly itemOffered3: InputMaybe<FieldSelectorEnum>;
};

type SiteSiteMetadataOfferCatalogFilterInput = {
  readonly itemOffered1: InputMaybe<StringQueryOperatorInput>;
  readonly itemOffered2: InputMaybe<StringQueryOperatorInput>;
  readonly itemOffered3: InputMaybe<StringQueryOperatorInput>;
};

type SiteSiteMetadataOfferCatalogSortInput = {
  readonly itemOffered1: InputMaybe<SortOrderEnum>;
  readonly itemOffered2: InputMaybe<SortOrderEnum>;
  readonly itemOffered3: InputMaybe<SortOrderEnum>;
};

type SiteSiteMetadataRentalLocation = {
  readonly address: Maybe<SiteSiteMetadataRentalLocationAddress>;
};

type SiteSiteMetadataRentalLocationAddress = {
  readonly addressLocality: Maybe<Scalars['String']>;
  readonly addressRegion: Maybe<Scalars['String']>;
  readonly name: Maybe<Scalars['String']>;
  readonly postalCode: Maybe<Scalars['String']>;
  readonly streetAddress: Maybe<Scalars['String']>;
};

type SiteSiteMetadataRentalLocationAddressFieldSelector = {
  readonly addressLocality: InputMaybe<FieldSelectorEnum>;
  readonly addressRegion: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly postalCode: InputMaybe<FieldSelectorEnum>;
  readonly streetAddress: InputMaybe<FieldSelectorEnum>;
};

type SiteSiteMetadataRentalLocationAddressFilterInput = {
  readonly addressLocality: InputMaybe<StringQueryOperatorInput>;
  readonly addressRegion: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly postalCode: InputMaybe<StringQueryOperatorInput>;
  readonly streetAddress: InputMaybe<StringQueryOperatorInput>;
};

type SiteSiteMetadataRentalLocationAddressSortInput = {
  readonly addressLocality: InputMaybe<SortOrderEnum>;
  readonly addressRegion: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly postalCode: InputMaybe<SortOrderEnum>;
  readonly streetAddress: InputMaybe<SortOrderEnum>;
};

type SiteSiteMetadataRentalLocationFieldSelector = {
  readonly address: InputMaybe<SiteSiteMetadataRentalLocationAddressFieldSelector>;
};

type SiteSiteMetadataRentalLocationFilterInput = {
  readonly address: InputMaybe<SiteSiteMetadataRentalLocationAddressFilterInput>;
};

type SiteSiteMetadataRentalLocationSortInput = {
  readonly address: InputMaybe<SiteSiteMetadataRentalLocationAddressSortInput>;
};

type SiteSiteMetadataSocial = {
  readonly facebook: Maybe<Scalars['String']>;
  readonly instagram: Maybe<Scalars['String']>;
};

type SiteSiteMetadataSocialFieldSelector = {
  readonly facebook: InputMaybe<FieldSelectorEnum>;
  readonly instagram: InputMaybe<FieldSelectorEnum>;
};

type SiteSiteMetadataSocialFilterInput = {
  readonly facebook: InputMaybe<StringQueryOperatorInput>;
  readonly instagram: InputMaybe<StringQueryOperatorInput>;
};

type SiteSiteMetadataSocialSortInput = {
  readonly facebook: InputMaybe<SortOrderEnum>;
  readonly instagram: InputMaybe<SortOrderEnum>;
};

type SiteSiteMetadataSortInput = {
  readonly areaServed: InputMaybe<SortOrderEnum>;
  readonly author: InputMaybe<SortOrderEnum>;
  readonly defaultDescription: InputMaybe<SortOrderEnum>;
  readonly defaultImage: InputMaybe<SortOrderEnum>;
  readonly defaultImageAlt: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly email: InputMaybe<SortOrderEnum>;
  readonly geo: InputMaybe<SiteSiteMetadataGeoSortInput>;
  readonly itemType: InputMaybe<SortOrderEnum>;
  readonly jobEmail: InputMaybe<SortOrderEnum>;
  readonly location: InputMaybe<SiteSiteMetadataLocationSortInput>;
  readonly logo: InputMaybe<SortOrderEnum>;
  readonly numberOfEmployees: InputMaybe<SortOrderEnum>;
  readonly offerCatalog: InputMaybe<SiteSiteMetadataOfferCatalogSortInput>;
  readonly openingHours: InputMaybe<SortOrderEnum>;
  readonly paymentAccepted: InputMaybe<SortOrderEnum>;
  readonly priceRange: InputMaybe<SortOrderEnum>;
  readonly rentalLocation: InputMaybe<SiteSiteMetadataRentalLocationSortInput>;
  readonly siteUrl: InputMaybe<SortOrderEnum>;
  readonly slogan: InputMaybe<SortOrderEnum>;
  readonly social: InputMaybe<SiteSiteMetadataSocialSortInput>;
  readonly telephone: InputMaybe<SortOrderEnum>;
  readonly themeColor: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
};

type SiteSortInput = {
  readonly buildTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenSortInput>;
  readonly host: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly jsxRuntime: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly pathPrefix: InputMaybe<SortOrderEnum>;
  readonly polyfill: InputMaybe<SortOrderEnum>;
  readonly port: InputMaybe<SortOrderEnum>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataSortInput>;
  readonly trailingSlash: InputMaybe<SortOrderEnum>;
};

type SortOrderEnum =
  | 'ASC'
  | 'DESC';

type StringQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['String']>;
  readonly glob: InputMaybe<Scalars['String']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly ne: InputMaybe<Scalars['String']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly regex: InputMaybe<Scalars['String']>;
};

type TransformOptions = {
  readonly cropFocus: InputMaybe<ImageCropFocus>;
  readonly duotone: InputMaybe<DuotoneGradient>;
  readonly fit: InputMaybe<ImageFit>;
  readonly grayscale: InputMaybe<Scalars['Boolean']>;
  readonly rotate: InputMaybe<Scalars['Int']>;
  readonly trim: InputMaybe<Scalars['Float']>;
};

type WebPOptions = {
  readonly quality: InputMaybe<Scalars['Int']>;
};

type AboutQueryQueryVariables = Exact<{ [key: string]: never; }>;


type AboutQueryQuery = { readonly strapiAbout: { readonly text: { readonly data: { readonly text: string | null } | null } | null } | null };

type AnnouncementCatchAllQueryQueryVariables = Exact<{ [key: string]: never; }>;


type AnnouncementCatchAllQueryQuery = { readonly allStrapiAnnouncement: { readonly nodes: ReadonlyArray<{ readonly slug: string | null }> } };

type AnnouncementPageQueryQueryVariables = Exact<{ [key: string]: never; }>;


type AnnouncementPageQueryQuery = { readonly allStrapiAnnouncement: { readonly nodes: ReadonlyArray<{ readonly title: string | null, readonly slug: string | null }> } };

type AnnouncementQueryQueryVariables = Exact<{
  slug: Scalars['String'];
}>;


type AnnouncementQueryQuery = { readonly strapiAnnouncement: { readonly title: string | null, readonly slug: string | null, readonly calendar: string | null, readonly publishedAt: string | null, readonly post: { readonly data: { readonly post: string | null } | null } | null, readonly hero: { readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null } | null };

type attributeFragmentFragment = { readonly name: string | null, readonly description: { readonly data: { readonly description: string | null } | null } | null };

type attributeRetailFragmentFragment = { readonly id: string, readonly title: string | null, readonly slug: string | null, readonly excerpt: string | null, readonly capacity: number | null, readonly length: number | null, readonly width: number | null, readonly inflatable: boolean | null, readonly sport: { readonly slug: string | null } | null, readonly brand: { readonly slug: string | null } | null, readonly cutout: { readonly alternativeText: string | null, readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null };

type BookNowQueryQueryVariables = Exact<{ [key: string]: never; }>;


type BookNowQueryQuery = { readonly strapiLocale: { readonly name: string | null, readonly peek_base: string | null } | null };

type DemosQueryQueryVariables = Exact<{ [key: string]: never; }>;


type DemosQueryQuery = { readonly kayak: { readonly nodes: ReadonlyArray<{ readonly id: string, readonly title: string | null, readonly slug: string | null, readonly excerpt: string | null, readonly length: number | null, readonly width: number | null, readonly inflatable: boolean | null, readonly hullweight: number | null, readonly capacity: number | null, readonly demo: boolean | null, readonly brand: { readonly name: string | null, readonly slug: string | null } | null, readonly sport: { readonly slug: string | null } | null, readonly cutout: { readonly alternativeText: string | null, readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null }> }, readonly paddleboards: { readonly nodes: ReadonlyArray<{ readonly id: string, readonly title: string | null, readonly slug: string | null, readonly excerpt: string | null, readonly length: number | null, readonly width: number | null, readonly inflatable: boolean | null, readonly hullweight: number | null, readonly capacity: number | null, readonly demo: boolean | null, readonly brand: { readonly name: string | null, readonly slug: string | null } | null, readonly sport: { readonly slug: string | null } | null, readonly cutout: { readonly alternativeText: string | null, readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null }> }, readonly strapiLocation: { readonly id: string, readonly name: string | null, readonly link: string | null, readonly svg: string | null, readonly opening_time: string | null, readonly closing_time: string | null, readonly address: { readonly data: { readonly address: string | null } | null } | null, readonly description: { readonly data: { readonly description: string | null } | null } | null, readonly locale: { readonly season_start: string | null, readonly season_end: string | null } | null } | null, readonly strapiDemo: { readonly text: { readonly data: { readonly text: string | null } | null } | null } | null, readonly allStrapiRentalRate: { readonly nodes: ReadonlyArray<{ readonly id: string, readonly item: string | null, readonly oneHour: number | null, readonly threeHour: number | null, readonly fullDay: number | null }> }, readonly allStrapiRentalAddon: { readonly nodes: ReadonlyArray<{ readonly name: string | null, readonly single: number | null, readonly double: number | null, readonly sup: number | null }> } };

type ExperienceQueryQueryVariables = Exact<{ [key: string]: never; }>;


type ExperienceQueryQuery = { readonly strapiExperience: { readonly text: { readonly data: { readonly text: string | null } | null } | null } | null };

type FeatureLIstQueryQueryVariables = Exact<{ [key: string]: never; }>;


type FeatureLIstQueryQuery = { readonly allStrapiAttribute: { readonly nodes: ReadonlyArray<{ readonly name: string | null, readonly slug: string | null, readonly id: string }> }, readonly allStrapiRetails: { readonly nodes: ReadonlyArray<{ readonly id: string, readonly inflatable: boolean | null, readonly crew: string | null, readonly hullweight: number | null, readonly sport: { readonly slug: string | null } | null }> } };

type FooterQueryQueryVariables = Exact<{ [key: string]: never; }>;


type FooterQueryQuery = { readonly allStrapiLocation: { readonly nodes: ReadonlyArray<{ readonly id: string, readonly name: string | null, readonly link: string | null, readonly svg: string | null, readonly opening_time: string | null, readonly closing_time: string | null, readonly address: { readonly data: { readonly address: string | null } | null } | null, readonly description: { readonly data: { readonly description: string | null } | null } | null, readonly locale: { readonly season_start: string | null, readonly season_end: string | null } | null }> }, readonly strapiLocale: { readonly instagram: string | null, readonly facebook: string | null, readonly tripadvisor: string | null } | null, readonly allStrapiLocale: { readonly nodes: ReadonlyArray<{ readonly name: string | null, readonly url: string | null }> } };

type GatsbyImageSharpFixedFragment = { readonly base64: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_noBase64Fragment = { readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_tracedSVGFragment = { readonly tracedSVG: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_withWebpFragment = { readonly base64: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFixed_withWebp_noBase64Fragment = { readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFixed_withWebp_tracedSVGFragment = { readonly tracedSVG: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFluidFragment = { readonly base64: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_noBase64Fragment = { readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_tracedSVGFragment = { readonly tracedSVG: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_withWebpFragment = { readonly base64: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluid_withWebp_noBase64Fragment = { readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluid_withWebp_tracedSVGFragment = { readonly tracedSVG: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluidLimitPresentationSizeFragment = { readonly maxHeight: number, readonly maxWidth: number };

type HeaderQueryQueryVariables = Exact<{ [key: string]: never; }>;


type HeaderQueryQuery = { readonly strapiLocale: { readonly name: string | null, readonly topbar: { readonly data: { readonly topbar: string | null } | null } | null } | null };

type IndexQueryQueryVariables = Exact<{ [key: string]: never; }>;


type IndexQueryQuery = { readonly allStrapiLocation: { readonly nodes: ReadonlyArray<{ readonly id: string, readonly name: string | null, readonly link: string | null, readonly svg: string | null, readonly opening_time: string | null, readonly closing_time: string | null, readonly address: { readonly data: { readonly address: string | null } | null } | null, readonly description: { readonly data: { readonly description: string | null } | null } | null, readonly locale: { readonly season_start: string | null, readonly season_end: string | null } | null }> }, readonly allStrapiTour: { readonly nodes: ReadonlyArray<{ readonly id: string, readonly name: string | null, readonly slug: string | null, readonly price: number | null, readonly peek: string | null, readonly excerpt: string | null, readonly start: string | null, readonly finish: string | null, readonly duration: number | null, readonly timeframe: string | null, readonly fitness: string | null, readonly sport: string | null, readonly ogimage: { readonly alternativeText: string | null, readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null }> }, readonly allStrapiRetails: { readonly nodes: ReadonlyArray<{ readonly id: string, readonly title: string | null, readonly slug: string | null, readonly excerpt: string | null, readonly length: number | null, readonly width: number | null, readonly inflatable: boolean | null, readonly hullweight: number | null, readonly capacity: number | null, readonly demo: boolean | null, readonly sport: { readonly slug: string | null } | null, readonly brand: { readonly slug: string | null } | null, readonly cutout: { readonly alternativeText: string | null, readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null }> }, readonly strapiLocale: { readonly peek_tours: string | null } | null };

type KnowQueryQueryVariables = Exact<{ [key: string]: never; }>;


type KnowQueryQuery = { readonly allStrapiFaq: { readonly nodes: ReadonlyArray<{ readonly id: string, readonly question: string | null, readonly answer: string | null }> } };

type locationCardFragmentFragment = { readonly id: string, readonly name: string | null, readonly link: string | null, readonly svg: string | null, readonly opening_time: string | null, readonly closing_time: string | null, readonly address: { readonly data: { readonly address: string | null } | null } | null, readonly description: { readonly data: { readonly description: string | null } | null } | null, readonly locale: { readonly season_start: string | null, readonly season_end: string | null } | null };

type LogosQueryQueryVariables = Exact<{ [key: string]: never; }>;


type LogosQueryQuery = { readonly logoLight: { readonly title: string | null, readonly image: { readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null } | null, readonly logoDark: { readonly title: string | null, readonly image: { readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null } | null };

type PhoneQueryQueryVariables = Exact<{ [key: string]: never; }>;


type PhoneQueryQuery = { readonly strapiLocale: { readonly phone: string | null } | null };

type PricingChartQueryQueryVariables = Exact<{ [key: string]: never; }>;


type PricingChartQueryQuery = { readonly allStrapiRentalRate: { readonly nodes: ReadonlyArray<{ readonly id: string, readonly item: string | null, readonly oneHour: number | null, readonly threeHour: number | null, readonly fullDay: number | null }> }, readonly allStrapiRentalAddon: { readonly nodes: ReadonlyArray<{ readonly id: string, readonly name: string | null, readonly single: number | null, readonly double: number | null, readonly sup: number | null }> } };

type RentalsQueryQueryVariables = Exact<{ [key: string]: never; }>;


type RentalsQueryQuery = { readonly allStrapiRentalRate: { readonly nodes: ReadonlyArray<{ readonly id: string, readonly oneHour: number | null, readonly item: string | null, readonly threeHour: number | null, readonly fullDay: number | null }> }, readonly allStrapiRentalAddon: { readonly nodes: ReadonlyArray<{ readonly name: string | null, readonly single: number | null, readonly double: number | null, readonly sup: number | null }> }, readonly allStrapiLocation: { readonly nodes: ReadonlyArray<{ readonly id: string, readonly name: string | null, readonly link: string | null, readonly svg: string | null, readonly opening_time: string | null, readonly closing_time: string | null, readonly address: { readonly data: { readonly address: string | null } | null } | null, readonly description: { readonly data: { readonly description: string | null } | null } | null, readonly locale: { readonly season_start: string | null, readonly season_end: string | null } | null }> }, readonly strapiRental: { readonly text: { readonly data: { readonly text: string | null } | null } | null } | null };

type retailBrandFragment = { readonly id: string, readonly name: string | null, readonly slug: string | null, readonly tagline: string | null, readonly svg: string | null };

type retailCardFragment = { readonly id: string, readonly title: string | null, readonly slug: string | null, readonly excerpt: string | null, readonly length: number | null, readonly width: number | null, readonly inflatable: boolean | null, readonly hullweight: number | null, readonly capacity: number | null, readonly demo: boolean | null, readonly sport: { readonly slug: string | null } | null, readonly brand: { readonly slug: string | null } | null, readonly cutout: { readonly alternativeText: string | null, readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null };

type RetailSportQueryQueryVariables = Exact<{
  slug: Scalars['String'];
}>;


type RetailSportQueryQuery = { readonly strapiSport: { readonly title: string | null, readonly slug: string | null } | null, readonly strapiShop: { readonly text: { readonly data: { readonly text: string | null } | null } | null } | null, readonly strapiLocation: { readonly id: string, readonly name: string | null, readonly link: string | null, readonly svg: string | null, readonly opening_time: string | null, readonly closing_time: string | null, readonly address: { readonly data: { readonly address: string | null } | null } | null, readonly description: { readonly data: { readonly description: string | null } | null } | null, readonly locale: { readonly season_start: string | null, readonly season_end: string | null } | null } | null, readonly allStrapiBrand: { readonly nodes: ReadonlyArray<{ readonly id: string, readonly name: string | null, readonly slug: string | null, readonly tagline: string | null, readonly svg: string | null, readonly retail: ReadonlyArray<{ readonly id: string, readonly title: string | null, readonly slug: string | null, readonly excerpt: string | null, readonly length: number | null, readonly width: number | null, readonly inflatable: boolean | null, readonly hullweight: number | null, readonly capacity: number | null, readonly demo: boolean | null, readonly sport: { readonly slug: string | null } | null, readonly brand: { readonly slug: string | null } | null, readonly cutout: { readonly alternativeText: string | null, readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null } | null> | null }> } };

type RetailsQueryQueryVariables = Exact<{ [key: string]: never; }>;


type RetailsQueryQuery = { readonly kayak: { readonly nodes: ReadonlyArray<{ readonly id: string, readonly title: string | null, readonly slug: string | null, readonly excerpt: string | null, readonly length: number | null, readonly width: number | null, readonly inflatable: boolean | null, readonly hullweight: number | null, readonly capacity: number | null, readonly demo: boolean | null, readonly sport: { readonly slug: string | null } | null, readonly brand: { readonly slug: string | null } | null, readonly cutout: { readonly alternativeText: string | null, readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null }> }, readonly paddleBoard: { readonly nodes: ReadonlyArray<{ readonly id: string, readonly title: string | null, readonly slug: string | null, readonly excerpt: string | null, readonly length: number | null, readonly width: number | null, readonly inflatable: boolean | null, readonly hullweight: number | null, readonly capacity: number | null, readonly demo: boolean | null, readonly sport: { readonly slug: string | null } | null, readonly brand: { readonly slug: string | null } | null, readonly cutout: { readonly alternativeText: string | null, readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null }> }, readonly strapiLocation: { readonly id: string, readonly name: string | null, readonly link: string | null, readonly svg: string | null, readonly opening_time: string | null, readonly closing_time: string | null, readonly address: { readonly data: { readonly address: string | null } | null } | null, readonly description: { readonly data: { readonly description: string | null } | null } | null, readonly locale: { readonly season_start: string | null, readonly season_end: string | null } | null } | null };

type SEOQueryQueryVariables = Exact<{ [key: string]: never; }>;


type SEOQueryQuery = { readonly strapiLocale: { readonly name: string | null, readonly phone: string | null } | null };

type ShopQueryQueryVariables = Exact<{ [key: string]: never; }>;


type ShopQueryQuery = { readonly strapiShop: { readonly text: { readonly data: { readonly text: string | null } | null } | null } | null };

type SportBrandQueryQueryVariables = Exact<{ [key: string]: never; }>;


type SportBrandQueryQuery = { readonly allStrapiBrand: { readonly nodes: ReadonlyArray<{ readonly id: string, readonly name: string | null, readonly slug: string | null, readonly svg: string | null, readonly retail: ReadonlyArray<{ readonly title: string | null, readonly slug: string | null, readonly sport: { readonly slug: string | null } | null } | null> | null }> } };

type TeamQueryQueryVariables = Exact<{ [key: string]: never; }>;


type TeamQueryQuery = { readonly allStrapiTeam: { readonly nodes: ReadonlyArray<{ readonly id: string, readonly name: string | null, readonly bio: { readonly data: { readonly bio: string | null } | null } | null, readonly profile: { readonly alternativeText: string | null, readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null }> }, readonly strapiLocale: { readonly name: string | null } | null };

type TestimonialsQueryQueryVariables = Exact<{ [key: string]: never; }>;


type TestimonialsQueryQuery = { readonly allStrapiTestimonial: { readonly nodes: ReadonlyArray<{ readonly id: string, readonly testimonial: string | null, readonly customer: string | null, readonly sign: string | null, readonly location: string | null }> } };

type TexturesQueryQueryVariables = Exact<{ [key: string]: never; }>;


type TexturesQueryQuery = { readonly baseone: { readonly title: string | null, readonly image: { readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null } | null, readonly basetwo: { readonly title: string | null, readonly image: { readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null } | null, readonly basethree: { readonly title: string | null, readonly image: { readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null } | null, readonly topone: { readonly title: string | null, readonly image: { readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null } | null, readonly toptwo: { readonly title: string | null, readonly image: { readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null } | null, readonly topthree: { readonly title: string | null, readonly image: { readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null } | null };

type tourCardFragment = { readonly id: string, readonly name: string | null, readonly slug: string | null, readonly price: number | null, readonly peek: string | null, readonly excerpt: string | null, readonly start: string | null, readonly finish: string | null, readonly duration: number | null, readonly timeframe: string | null, readonly fitness: string | null, readonly sport: string | null, readonly ogimage: { readonly alternativeText: string | null, readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null };

type tourCardFragmentFragment = { readonly id: string, readonly name: string | null, readonly slug: string | null, readonly price: number | null, readonly peek: string | null, readonly excerpt: string | null, readonly start: string | null, readonly finish: string | null, readonly duration: number | null, readonly timeframe: string | null, readonly fitness: string | null, readonly sport: string | null, readonly ogimage: { readonly alternativeText: string | null, readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null };

type TourCompareQueryQueryVariables = Exact<{ [key: string]: never; }>;


type TourCompareQueryQuery = { readonly allStrapiTour: { readonly nodes: ReadonlyArray<{ readonly id: string, readonly fitness: string | null, readonly slug: string | null, readonly start: string | null, readonly sport: string | null, readonly peek: string | null, readonly price: number | null, readonly name: string | null, readonly minimum: number | null, readonly finish: string | null, readonly excerpt: string | null, readonly duration: number | null, readonly locale: { readonly name: string | null } | null }> } };

type TourQueryQueryVariables = Exact<{
  slug: Scalars['String'];
}>;


type TourQueryQuery = { readonly strapiTour: { readonly id: string, readonly name: string | null, readonly start: string | null, readonly finish: string | null, readonly duration: number | null, readonly timeframe: string | null, readonly minimum: number | null, readonly fitness: string | null, readonly peek: string | null, readonly sport: string | null, readonly excerpt: string | null, readonly price: number | null, readonly slug: string | null, readonly information: { readonly data: { readonly information: string | null } | null } | null, readonly ogimage: { readonly alternativeText: string | null, readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null, readonly locale: { readonly name: string | null } | null } | null, readonly allStrapiTour: { readonly nodes: ReadonlyArray<{ readonly id: string, readonly name: string | null, readonly slug: string | null, readonly price: number | null, readonly peek: string | null, readonly excerpt: string | null, readonly start: string | null, readonly finish: string | null, readonly duration: number | null, readonly timeframe: string | null, readonly fitness: string | null, readonly sport: string | null, readonly ogimage: { readonly alternativeText: string | null, readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null }> }, readonly strapiLocation: { readonly id: string, readonly name: string | null, readonly link: string | null, readonly svg: string | null, readonly opening_time: string | null, readonly closing_time: string | null, readonly locale: { readonly name: string | null, readonly season_start: string | null, readonly season_end: string | null } | null, readonly address: { readonly data: { readonly address: string | null } | null } | null, readonly description: { readonly data: { readonly description: string | null } | null } | null } | null, readonly strapiLocale: { readonly peek_tours: string | null } | null };

type ToursQueryQueryVariables = Exact<{ [key: string]: never; }>;


type ToursQueryQuery = { readonly kayak: { readonly nodes: ReadonlyArray<{ readonly id: string, readonly name: string | null, readonly slug: string | null, readonly price: number | null, readonly peek: string | null, readonly excerpt: string | null, readonly start: string | null, readonly finish: string | null, readonly duration: number | null, readonly timeframe: string | null, readonly fitness: string | null, readonly sport: string | null, readonly ogimage: { readonly alternativeText: string | null, readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null }> }, readonly paddleBoard: { readonly nodes: ReadonlyArray<{ readonly id: string, readonly name: string | null, readonly slug: string | null, readonly price: number | null, readonly peek: string | null, readonly excerpt: string | null, readonly start: string | null, readonly finish: string | null, readonly duration: number | null, readonly timeframe: string | null, readonly fitness: string | null, readonly sport: string | null, readonly ogimage: { readonly alternativeText: string | null, readonly localFile: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null }> }, readonly allStrapiLocation: { readonly nodes: ReadonlyArray<{ readonly id: string, readonly name: string | null, readonly link: string | null, readonly svg: string | null, readonly opening_time: string | null, readonly closing_time: string | null, readonly address: { readonly data: { readonly address: string | null } | null } | null, readonly description: { readonly data: { readonly description: string | null } | null } | null, readonly locale: { readonly season_start: string | null, readonly season_end: string | null } | null }> }, readonly strapiLocale: { readonly peek_tours: string | null } | null };


}
